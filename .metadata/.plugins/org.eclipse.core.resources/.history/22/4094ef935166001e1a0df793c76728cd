/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "rng.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "stdio.h"
#include "ILI9341_Touchscreen.h"

#include "ILI9341_STM32_Driver.h"
#include "ILI9341_GFX.h"
#include "ILI9341_SPRITE.h"

#include "snow_tiger.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/
const uint16_t mario[] = {
  0xf79e, 0xf79e, 0xf79e, 0xf79e, 0xf79e, 0xf77d, 0xef1c, 0xd961, 0xd920, 0xd920, 0xd920, 0xd920, 0xd920, 0xd920, 0xd920, 0xd961, 0xf71b, 0xf75d, 0xf75d, 0xf75d, 0xf79e, 0xf79e, 0xf79e,
  0xf79e, 0xf79e, 0xf79e, 0xf79e, 0xf79e, 0xee37, 0xe40d, 0xd940, 0xd920, 0xd920, 0xd920, 0xd920, 0xd920, 0xd920, 0xd920, 0xd940, 0xe3cc, 0xe3ed, 0xe3ed, 0xe42d, 0xee99, 0xf79e, 0xf79e,
  0xf79e, 0xf79e, 0xf79e, 0xf79e, 0xf79e, 0xdd72, 0xc221, 0xc1e0, 0xc1e0, 0xc1e0, 0xc1e0, 0xd201, 0xe222, 0xe222, 0xc9e0, 0xc1e0, 0xe242, 0xe2a6, 0xdb08, 0xe349, 0xee58, 0xf79e, 0xf79e,
  0xf79e, 0xf79e, 0xf79e, 0xf79e, 0xf79e, 0xcdf2, 0x9381, 0x8b60, 0x8b60, 0x8b60, 0x8b60, 0xc403, 0xfc86, 0xfc86, 0xabc1, 0x9360, 0xf4a7, 0xf634, 0xf75c, 0xf75d, 0xf77d, 0xf79e, 0xf79e,
  0xf79e, 0xf79e, 0xf79e, 0xf79e, 0xc5af, 0x9c45, 0x8b80, 0xd444, 0xc403, 0x9380, 0xcc23, 0xec86, 0xfcc7, 0xfcc7, 0xabe2, 0x8b80, 0xfca7, 0xfd4b, 0xfd8e, 0xfdae, 0xf6f9, 0xf79e, 0xf79e,
  0xf79e, 0xf79e, 0xf79e, 0xf79e, 0xacc9, 0x8b80, 0x8b80, 0xfca6, 0xdc65, 0x8b80, 0xc403, 0xe485, 0xfcc7, 0xfcc7, 0xcc23, 0xb402, 0xd444, 0xec86, 0xfcc7, 0xfcc7, 0xf5f1, 0xf6f9, 0xf79d,
  0xf79e, 0xf79e, 0xf79e, 0xf79e, 0xacc9, 0x8b80, 0x8b80, 0xf4a6, 0xdc44, 0x8b80, 0x9380, 0xc423, 0xfcc7, 0xfcc7, 0xf4a6, 0xec86, 0x93a0, 0xcc44, 0xfca6, 0xfca6, 0xfce8, 0xf612, 0xf77d,
  0xf79e, 0xf79e, 0xf79e, 0xf79e, 0xacc9, 0x8b80, 0x8b80, 0x8b80, 0xabe2, 0xfca6, 0xfca6, 0xfca6, 0xfcc7, 0xfcc7, 0xabe2, 0x8b80, 0x8b80, 0x8b80, 0x8b80, 0x93c1, 0xd655, 0xf79d, 0xf79e,
  0xf79e, 0xf79e, 0xf79e, 0xf79e, 0xbd8f, 0xa4a8, 0xa4a8, 0xabe2, 0xc423, 0xfcc7, 0xfcc7, 0xfcc7, 0xfcc7, 0xfcc7, 0xc423, 0xabe2, 0xabe2, 0xabe2, 0xac24, 0xacc9, 0xdeb8, 0xf79e, 0xf79e,
  0xf79e, 0xf79e, 0xf79e, 0xf79e, 0xf79e, 0xef5d, 0xef1a, 0xf4a7, 0xf4a6, 0xf486, 0xf466, 0xf486, 0xf4a6, 0xf4a6, 0xf4a6, 0xf4a6, 0xfd09, 0xfd09, 0xfdcf, 0xf79e, 0xf79e, 0xf79e, 0xf79e,
  0xf79e, 0xf79e, 0xf79e, 0xf79e, 0xf79e, 0xd654, 0xa467, 0x9bc1, 0x9bc1, 0xa381, 0xd241, 0xbac1, 0x9bc1, 0x9bc1, 0x9bc1, 0xa3e2, 0xeed8, 0xf6f9, 0xf73a, 0xf79e, 0xf79e, 0xf79e, 0xf79e,
  0xf79e, 0xf79e, 0xf79e, 0xf79e, 0xce13, 0xa4a9, 0x8b80, 0x8b80, 0x8b80, 0x9340, 0xc1a0, 0xb240, 0x8b80, 0x8b80, 0xa2a0, 0xb260, 0xbd4e, 0xbd6f, 0xbd8f, 0xbdaf, 0xe71a, 0xf79e, 0xf79e,
  0xf79e, 0xf79e, 0xef5c, 0xded8, 0xa487, 0x8b80, 0x8b80, 0x8b80, 0x8b80, 0x9340, 0xc1a0, 0xba20, 0x9b00, 0x9b00, 0xc1c0, 0xd140, 0x8b60, 0x8b80, 0x8b80, 0x8ba1, 0xc5d1, 0xe71a, 0xf79e,
  0xf79e, 0xf79e, 0xd696, 0x9c04, 0x8ba1, 0x8b80, 0x8b80, 0x8b80, 0x8b80, 0x9340, 0xc1a0, 0xd140, 0xc960, 0xc960, 0xd140, 0xd140, 0x8b60, 0x8b80, 0x8b80, 0x8b80, 0x93c2, 0xbd6e, 0xef7d,
  0xf79e, 0xf79e, 0xeeb7, 0xdc86, 0xdc65, 0xdc65, 0xd444, 0x8b80, 0x9b00, 0xc200, 0xeb44, 0xe262, 0xd920, 0xd920, 0xeae3, 0xf3a4, 0xc200, 0x9ae0, 0xa3c1, 0xdc65, 0xdc65, 0xe5af, 0xf77d,
  0xf79e, 0xf79e, 0xf6d7, 0xfce8, 0xfcc7, 0xfcc7, 0xfca6, 0x9380, 0xa2e0, 0xd980, 0xf3e5, 0xeae3, 0xd920, 0xd920, 0xf384, 0xfc66, 0xd160, 0xaaa0, 0xabe2, 0xfcc7, 0xfcc7, 0xf5f0, 0xf77d,
  0xf79e, 0xf79e, 0xf6d7, 0xfce8, 0xfcc7, 0xfcc7, 0xfcc7, 0xf486, 0xeb84, 0xd920, 0xd940, 0xd940, 0xd920, 0xd920, 0xd940, 0xd960, 0xd940, 0xeb43, 0xfc86, 0xfcc7, 0xfcc7, 0xf5f1, 0xf77d,
  0xf79e, 0xf79e, 0xf6d7, 0xfce8, 0xfcc7, 0xfcc7, 0xfca6, 0xe2a2, 0xe221, 0xd920, 0xd920, 0xd920, 0xd920, 0xd920, 0xd920, 0xd920, 0xd940, 0xe201, 0xeb24, 0xfcc7, 0xfcc7, 0xf5f1, 0xf77d,
  0xf79e, 0xf79e, 0xf6f9, 0xfdae, 0xfd8d, 0xf4ca, 0xf3a5, 0xd940, 0xd920, 0xd920, 0xd920, 0xda24, 0xdac7, 0xd961, 0xd920, 0xd920, 0xd920, 0xd920, 0xe284, 0xfd8e, 0xfd8e, 0xf675, 0xf77d,
  0xf79e, 0xf79e, 0xf79e, 0xf79e, 0xef7d, 0xe511, 0xd181, 0xd140, 0xd140, 0xd140, 0xd961, 0xe48f, 0xee58, 0xda24, 0xd160, 0xd140, 0xd140, 0xd140, 0xdb28, 0xef7d, 0xf79e, 0xf79e, 0xf79e,
  0xf79e, 0xf79e, 0xf79e, 0xf79e, 0xbd8f, 0xa3e5, 0x9ae0, 0x9ac0, 0x9ac0, 0xa322, 0xdd31, 0xeeba, 0xf73c, 0xedf6, 0xb3a6, 0x9ac0, 0x9ac0, 0x9ac0, 0xa362, 0xacc9, 0xdeb8, 0xf79e, 0xf79e,
  0xf79e, 0xf79e, 0xe71a, 0xc5f1, 0x9c25, 0x8b80, 0x8b80, 0x8b80, 0x8b80, 0x93e3, 0xdeb8, 0xf79e, 0xf79e, 0xf79e, 0xa4a8, 0x8b80, 0x8b80, 0x8b80, 0x8b80, 0x8b80, 0xb52c, 0xde96, 0xf79d,
  0xf79e, 0xf79e, 0xd675, 0x93c2, 0x8b80, 0x8b80, 0x8b80, 0x8b80, 0x8b80, 0x93e3, 0xdeb8, 0xf79e, 0xf79e, 0xf79e, 0xa4a8, 0x8b80, 0x8b80, 0x8b80, 0x8b80, 0x8b80, 0x8b80, 0xbd4d, 0xef7d
};
float dutyCycle = 1.0;
volatile uint32_t adc_val;
uint32_t adc_av8;
uint32_t pwm;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	Sprite Mario = {mario, 0, 0, 23, 23};
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  //ILI9341_Fill_Screen(BLACK);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART3_UART_Init();
  MX_SPI5_Init();
  MX_TIM1_Init();
  MX_RNG_Init();
  MX_ADC1_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  ILI9341_Init();//initial driver setup to drive ili9341
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  HAL_ADC_Start(&hadc1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	while (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK){}
	adc_val = HAL_ADC_GetValue(&hadc1);

	dutyCycle = (((float)adc_val / 4095.0)*12.0)*5.0 + 25.0; //value between 0.xx - 1.00

	TIM2->CCR1 = (1000-1) * dutyCycle;
	pwm = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);

  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 9;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
