
LED_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e20  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003018  08003018  00013018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003028  08003028  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003028  08003028  00013028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003030  08003030  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003030  08003030  00013030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003034  08003034  00013034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000010  08003048  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08003048  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b482  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d66  00000000  00000000  0002b503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b58  00000000  00000000  0002d270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008b4  00000000  00000000  0002ddc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000272bd  00000000  00000000  0002e67c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d594  00000000  00000000  00055939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f72fd  00000000  00000000  00062ecd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002e60  00000000  00000000  0015a1cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0015d02c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000010 	.word	0x20000010
 8000214:	00000000 	.word	0x00000000
 8000218:	08003000 	.word	0x08003000

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000014 	.word	0x20000014
 8000234:	08003000 	.word	0x08003000

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b970 	b.w	8000530 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	460f      	mov	r7, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4694      	mov	ip, r2
 800027c:	d965      	bls.n	800034a <__udivmoddi4+0xe2>
 800027e:	fab2 f382 	clz	r3, r2
 8000282:	b143      	cbz	r3, 8000296 <__udivmoddi4+0x2e>
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	f1c3 0220 	rsb	r2, r3, #32
 800028c:	409f      	lsls	r7, r3
 800028e:	fa20 f202 	lsr.w	r2, r0, r2
 8000292:	4317      	orrs	r7, r2
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a2:	0c22      	lsrs	r2, r4, #16
 80002a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	fb01 f005 	mul.w	r0, r1, r5
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002bc:	f080 811c 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8119 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	b2a4      	uxth	r4, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	fb00 f505 	mul.w	r5, r0, r5
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x90>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ea:	f080 8107 	bcs.w	80004fc <__udivmoddi4+0x294>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8104 	bls.w	80004fc <__udivmoddi4+0x294>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	2100      	movs	r1, #0
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa2>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xbc>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ed 	beq.w	80004f2 <__udivmoddi4+0x28a>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d149      	bne.n	80003c0 <__udivmoddi4+0x158>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xce>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2be>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4617      	mov	r7, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa2>
 8000344:	e9c6 4700 	strd	r4, r7, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa2>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xe6>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x210>
 8000358:	1a8a      	subs	r2, r1, r2
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb2 f5f7 	udiv	r5, r2, r7
 8000368:	fb07 2015 	mls	r0, r7, r5, r2
 800036c:	0c22      	lsrs	r2, r4, #16
 800036e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000372:	fb0e f005 	mul.w	r0, lr, r5
 8000376:	4290      	cmp	r0, r2
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x124>
 800037a:	eb1c 0202 	adds.w	r2, ip, r2
 800037e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4290      	cmp	r0, r2
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2b8>
 800038a:	4645      	mov	r5, r8
 800038c:	1a12      	subs	r2, r2, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb2 f0f7 	udiv	r0, r2, r7
 8000394:	fb07 2210 	mls	r2, r7, r0, r2
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x14e>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x14c>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2c2>
 80003b4:	4610      	mov	r0, r2
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003be:	e79f      	b.n	8000300 <__udivmoddi4+0x98>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa05 f401 	lsl.w	r4, r5, r1
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	40fd      	lsrs	r5, r7
 80003d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003dc:	4323      	orrs	r3, r4
 80003de:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ea:	0c1c      	lsrs	r4, r3, #16
 80003ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f0:	fb08 f50e 	mul.w	r5, r8, lr
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	fa00 f001 	lsl.w	r0, r0, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2b4>
 800040c:	42a5      	cmp	r5, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2b4>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	b29d      	uxth	r5, r3
 800041c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000420:	fb09 4413 	mls	r4, r9, r3, r4
 8000424:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000428:	fb03 fe0e 	mul.w	lr, r3, lr
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2ac>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2ac>
 800043e:	3b02      	subs	r3, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000446:	fba3 9502 	umull	r9, r5, r3, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x29c>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x298>
 8000458:	b156      	cbz	r6, 8000470 <__udivmoddi4+0x208>
 800045a:	ebb0 0208 	subs.w	r2, r0, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	40ca      	lsrs	r2, r1
 8000468:	40cc      	lsrs	r4, r1
 800046a:	4317      	orrs	r7, r2
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	4618      	mov	r0, r3
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c3 0120 	rsb	r1, r3, #32
 800047c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000480:	fa20 f201 	lsr.w	r2, r0, r1
 8000484:	fa25 f101 	lsr.w	r1, r5, r1
 8000488:	409d      	lsls	r5, r3
 800048a:	432a      	orrs	r2, r5
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb1 f0f7 	udiv	r0, r1, r7
 8000498:	fb07 1510 	mls	r5, r7, r0, r1
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a2:	fb00 f50e 	mul.w	r5, r0, lr
 80004a6:	428d      	cmp	r5, r1
 80004a8:	fa04 f403 	lsl.w	r4, r4, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x258>
 80004ae:	eb1c 0101 	adds.w	r1, ip, r1
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004b8:	428d      	cmp	r5, r1
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1b49      	subs	r1, r1, r5
 80004c2:	b292      	uxth	r2, r2
 80004c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c8:	fb07 1115 	mls	r1, r7, r5, r1
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	fb05 f10e 	mul.w	r1, r5, lr
 80004d4:	4291      	cmp	r1, r2
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x282>
 80004d8:	eb1c 0202 	adds.w	r2, ip, r2
 80004dc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 80004e2:	4291      	cmp	r1, r2
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2a8>
 80004e6:	3d02      	subs	r5, #2
 80004e8:	4462      	add	r2, ip
 80004ea:	1a52      	subs	r2, r2, r1
 80004ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0xfc>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xa2>
 80004f8:	4639      	mov	r1, r7
 80004fa:	e6e6      	b.n	80002ca <__udivmoddi4+0x62>
 80004fc:	4610      	mov	r0, r2
 80004fe:	e6fb      	b.n	80002f8 <__udivmoddi4+0x90>
 8000500:	4548      	cmp	r0, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3b01      	subs	r3, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f0>
 8000510:	4645      	mov	r5, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x282>
 8000514:	462b      	mov	r3, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1da>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x258>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b0>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x124>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xd8>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x14e>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800053a:	463b      	mov	r3, r7
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000546:	4b21      	ldr	r3, [pc, #132]	; (80005cc <MX_ADC1_Init+0x98>)
 8000548:	4a21      	ldr	r2, [pc, #132]	; (80005d0 <MX_ADC1_Init+0x9c>)
 800054a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800054c:	4b1f      	ldr	r3, [pc, #124]	; (80005cc <MX_ADC1_Init+0x98>)
 800054e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000552:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000554:	4b1d      	ldr	r3, [pc, #116]	; (80005cc <MX_ADC1_Init+0x98>)
 8000556:	2200      	movs	r2, #0
 8000558:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800055a:	4b1c      	ldr	r3, [pc, #112]	; (80005cc <MX_ADC1_Init+0x98>)
 800055c:	2200      	movs	r2, #0
 800055e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000560:	4b1a      	ldr	r3, [pc, #104]	; (80005cc <MX_ADC1_Init+0x98>)
 8000562:	2201      	movs	r2, #1
 8000564:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000566:	4b19      	ldr	r3, [pc, #100]	; (80005cc <MX_ADC1_Init+0x98>)
 8000568:	2200      	movs	r2, #0
 800056a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800056e:	4b17      	ldr	r3, [pc, #92]	; (80005cc <MX_ADC1_Init+0x98>)
 8000570:	2200      	movs	r2, #0
 8000572:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000574:	4b15      	ldr	r3, [pc, #84]	; (80005cc <MX_ADC1_Init+0x98>)
 8000576:	4a17      	ldr	r2, [pc, #92]	; (80005d4 <MX_ADC1_Init+0xa0>)
 8000578:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800057a:	4b14      	ldr	r3, [pc, #80]	; (80005cc <MX_ADC1_Init+0x98>)
 800057c:	2200      	movs	r2, #0
 800057e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000580:	4b12      	ldr	r3, [pc, #72]	; (80005cc <MX_ADC1_Init+0x98>)
 8000582:	2201      	movs	r2, #1
 8000584:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <MX_ADC1_Init+0x98>)
 8000588:	2200      	movs	r2, #0
 800058a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800058e:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <MX_ADC1_Init+0x98>)
 8000590:	2200      	movs	r2, #0
 8000592:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000594:	480d      	ldr	r0, [pc, #52]	; (80005cc <MX_ADC1_Init+0x98>)
 8000596:	f000 fb11 	bl	8000bbc <HAL_ADC_Init>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005a0:	f000 f96a 	bl	8000878 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80005a4:	230a      	movs	r3, #10
 80005a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005a8:	2301      	movs	r3, #1
 80005aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b0:	463b      	mov	r3, r7
 80005b2:	4619      	mov	r1, r3
 80005b4:	4805      	ldr	r0, [pc, #20]	; (80005cc <MX_ADC1_Init+0x98>)
 80005b6:	f000 fcab 	bl	8000f10 <HAL_ADC_ConfigChannel>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005c0:	f000 f95a 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c4:	bf00      	nop
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	2000002c 	.word	0x2000002c
 80005d0:	40012000 	.word	0x40012000
 80005d4:	0f000001 	.word	0x0f000001

080005d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08a      	sub	sp, #40	; 0x28
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a15      	ldr	r2, [pc, #84]	; (800064c <HAL_ADC_MspInit+0x74>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d123      	bne.n	8000642 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <HAL_ADC_MspInit+0x78>)
 80005fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005fe:	4a14      	ldr	r2, [pc, #80]	; (8000650 <HAL_ADC_MspInit+0x78>)
 8000600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000604:	6453      	str	r3, [r2, #68]	; 0x44
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <HAL_ADC_MspInit+0x78>)
 8000608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800060a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000612:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <HAL_ADC_MspInit+0x78>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a0e      	ldr	r2, [pc, #56]	; (8000650 <HAL_ADC_MspInit+0x78>)
 8000618:	f043 0304 	orr.w	r3, r3, #4
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <HAL_ADC_MspInit+0x78>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0304 	and.w	r3, r3, #4
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800062a:	2301      	movs	r3, #1
 800062c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800062e:	2303      	movs	r3, #3
 8000630:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	4619      	mov	r1, r3
 800063c:	4805      	ldr	r0, [pc, #20]	; (8000654 <HAL_ADC_MspInit+0x7c>)
 800063e:	f000 ff9d 	bl	800157c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000642:	bf00      	nop
 8000644:	3728      	adds	r7, #40	; 0x28
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40012000 	.word	0x40012000
 8000650:	40023800 	.word	0x40023800
 8000654:	40020800 	.word	0x40020800

08000658 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	f107 030c 	add.w	r3, r7, #12
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066e:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <MX_GPIO_Init+0x90>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a1d      	ldr	r2, [pc, #116]	; (80006e8 <MX_GPIO_Init+0x90>)
 8000674:	f043 0304 	orr.w	r3, r3, #4
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <MX_GPIO_Init+0x90>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f003 0304 	and.w	r3, r3, #4
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000686:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <MX_GPIO_Init+0x90>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a17      	ldr	r2, [pc, #92]	; (80006e8 <MX_GPIO_Init+0x90>)
 800068c:	f043 0310 	orr.w	r3, r3, #16
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <MX_GPIO_Init+0x90>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0310 	and.w	r3, r3, #16
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069e:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <MX_GPIO_Init+0x90>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a11      	ldr	r2, [pc, #68]	; (80006e8 <MX_GPIO_Init+0x90>)
 80006a4:	f043 0302 	orr.w	r3, r3, #2
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_GPIO_Init+0x90>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0302 	and.w	r3, r3, #2
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80006b6:	2200      	movs	r2, #0
 80006b8:	f44f 41ff 	mov.w	r1, #32640	; 0x7f80
 80006bc:	480b      	ldr	r0, [pc, #44]	; (80006ec <MX_GPIO_Init+0x94>)
 80006be:	f001 f921 	bl	8001904 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80006c2:	f44f 43ff 	mov.w	r3, #32640	; 0x7f80
 80006c6:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c8:	2301      	movs	r3, #1
 80006ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	4619      	mov	r1, r3
 80006da:	4804      	ldr	r0, [pc, #16]	; (80006ec <MX_GPIO_Init+0x94>)
 80006dc:	f000 ff4e 	bl	800157c <HAL_GPIO_Init>

}
 80006e0:	bf00      	nop
 80006e2:	3720      	adds	r7, #32
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40021000 	.word	0x40021000

080006f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f4:	f000 fa05 	bl	8000b02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f8:	f000 f850 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fc:	f7ff ffac 	bl	8000658 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000700:	f000 f920 	bl	8000944 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000704:	f7ff ff16 	bl	8000534 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000708:	481c      	ldr	r0, [pc, #112]	; (800077c <main+0x8c>)
 800070a:	f001 fdc5 	bl	8002298 <HAL_TIM_Base_Start>
  HAL_ADC_Start(&hadc1);
 800070e:	481c      	ldr	r0, [pc, #112]	; (8000780 <main+0x90>)
 8000710:	f000 fa98 	bl	8000c44 <HAL_ADC_Start>
//	  HAL_Delay(500);
//	  GPIOE->BSRR = 0x00000C00;
//	  HAL_Delay(500);
//	  GPIOE->BSRR = 0x00000C00 << 16;
//	  HAL_Delay(500);
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000714:	2164      	movs	r1, #100	; 0x64
 8000716:	481a      	ldr	r0, [pc, #104]	; (8000780 <main+0x90>)
 8000718:	f000 fb62 	bl	8000de0 <HAL_ADC_PollForConversion>
	  adc_val = HAL_ADC_GetValue(&hadc1);
 800071c:	4818      	ldr	r0, [pc, #96]	; (8000780 <main+0x90>)
 800071e:	f000 fbea 	bl	8000ef6 <HAL_ADC_GetValue>
 8000722:	4603      	mov	r3, r0
 8000724:	4a17      	ldr	r2, [pc, #92]	; (8000784 <main+0x94>)
 8000726:	6013      	str	r3, [r2, #0]

	  dutyCycle = (float)adc_val / 4095.0;
 8000728:	4b16      	ldr	r3, [pc, #88]	; (8000784 <main+0x94>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	ee07 3a90 	vmov	s15, r3
 8000730:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000734:	eddf 6a14 	vldr	s13, [pc, #80]	; 8000788 <main+0x98>
 8000738:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <main+0x9c>)
 800073e:	edc3 7a00 	vstr	s15, [r3]
	  htim2.Instance->CCR4 = (100-1) * dutyCycle;
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <main+0x9c>)
 8000744:	edd3 7a00 	vldr	s15, [r3]
 8000748:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000790 <main+0xa0>
 800074c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <main+0x8c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000758:	ee17 2a90 	vmov	r2, s15
 800075c:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800075e:	210c      	movs	r1, #12
 8000760:	4806      	ldr	r0, [pc, #24]	; (800077c <main+0x8c>)
 8000762:	f001 fe61 	bl	8002428 <HAL_TIM_PWM_Start>
	  pwm = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
 8000766:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800076a:	480a      	ldr	r0, [pc, #40]	; (8000794 <main+0xa4>)
 800076c:	f001 f8b2 	bl	80018d4 <HAL_GPIO_ReadPin>
 8000770:	4603      	mov	r3, r0
 8000772:	461a      	mov	r2, r3
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <main+0xa8>)
 8000776:	601a      	str	r2, [r3, #0]
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000778:	e7cc      	b.n	8000714 <main+0x24>
 800077a:	bf00      	nop
 800077c:	2000007c 	.word	0x2000007c
 8000780:	2000002c 	.word	0x2000002c
 8000784:	20000078 	.word	0x20000078
 8000788:	457ff000 	.word	0x457ff000
 800078c:	20000000 	.word	0x20000000
 8000790:	42c60000 	.word	0x42c60000
 8000794:	40020400 	.word	0x40020400
 8000798:	20000074 	.word	0x20000074

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b094      	sub	sp, #80	; 0x50
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	2234      	movs	r2, #52	; 0x34
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f002 fbfc 	bl	8002fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	f107 0308 	add.w	r3, r7, #8
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c0:	4b2b      	ldr	r3, [pc, #172]	; (8000870 <SystemClock_Config+0xd4>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	4a2a      	ldr	r2, [pc, #168]	; (8000870 <SystemClock_Config+0xd4>)
 80007c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ca:	6413      	str	r3, [r2, #64]	; 0x40
 80007cc:	4b28      	ldr	r3, [pc, #160]	; (8000870 <SystemClock_Config+0xd4>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d8:	4b26      	ldr	r3, [pc, #152]	; (8000874 <SystemClock_Config+0xd8>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a25      	ldr	r2, [pc, #148]	; (8000874 <SystemClock_Config+0xd8>)
 80007de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007e2:	6013      	str	r3, [r2, #0]
 80007e4:	4b23      	ldr	r3, [pc, #140]	; (8000874 <SystemClock_Config+0xd8>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f0:	2302      	movs	r3, #2
 80007f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f4:	2301      	movs	r3, #1
 80007f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f8:	2310      	movs	r3, #16
 80007fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fc:	2302      	movs	r3, #2
 80007fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000800:	2300      	movs	r3, #0
 8000802:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000804:	2308      	movs	r3, #8
 8000806:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000808:	23d8      	movs	r3, #216	; 0xd8
 800080a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800080c:	2302      	movs	r3, #2
 800080e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000810:	2302      	movs	r3, #2
 8000812:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000814:	2302      	movs	r3, #2
 8000816:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4618      	mov	r0, r3
 800081e:	f001 f8db 	bl	80019d8 <HAL_RCC_OscConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000828:	f000 f826 	bl	8000878 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800082c:	f001 f884 	bl	8001938 <HAL_PWREx_EnableOverDrive>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000836:	f000 f81f 	bl	8000878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083a:	230f      	movs	r3, #15
 800083c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083e:	2302      	movs	r3, #2
 8000840:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000846:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800084a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800084c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000850:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000852:	f107 0308 	add.w	r3, r7, #8
 8000856:	2107      	movs	r1, #7
 8000858:	4618      	mov	r0, r3
 800085a:	f001 fb6b 	bl	8001f34 <HAL_RCC_ClockConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000864:	f000 f808 	bl	8000878 <Error_Handler>
  }
}
 8000868:	bf00      	nop
 800086a:	3750      	adds	r7, #80	; 0x50
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40023800 	.word	0x40023800
 8000874:	40007000 	.word	0x40007000

08000878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800087c:	b672      	cpsid	i
}
 800087e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000880:	e7fe      	b.n	8000880 <Error_Handler+0x8>
	...

08000884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <HAL_MspInit+0x44>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	4a0e      	ldr	r2, [pc, #56]	; (80008c8 <HAL_MspInit+0x44>)
 8000890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000894:	6413      	str	r3, [r2, #64]	; 0x40
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <HAL_MspInit+0x44>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <HAL_MspInit+0x44>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a6:	4a08      	ldr	r2, [pc, #32]	; (80008c8 <HAL_MspInit+0x44>)
 80008a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ac:	6453      	str	r3, [r2, #68]	; 0x44
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <HAL_MspInit+0x44>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800

080008cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <NMI_Handler+0x4>

080008d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <HardFault_Handler+0x4>

080008d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <MemManage_Handler+0x4>

080008de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <BusFault_Handler+0x4>

080008e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <UsageFault_Handler+0x4>

080008ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000918:	f000 f930 	bl	8000b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}

08000920 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <SystemInit+0x20>)
 8000926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800092a:	4a05      	ldr	r2, [pc, #20]	; (8000940 <SystemInit+0x20>)
 800092c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	; 0x28
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000956:	463b      	mov	r3, r7
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
 8000964:	615a      	str	r2, [r3, #20]
 8000966:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000968:	4b26      	ldr	r3, [pc, #152]	; (8000a04 <MX_TIM2_Init+0xc0>)
 800096a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800096e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108-1;
 8000970:	4b24      	ldr	r3, [pc, #144]	; (8000a04 <MX_TIM2_Init+0xc0>)
 8000972:	226b      	movs	r2, #107	; 0x6b
 8000974:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000976:	4b23      	ldr	r3, [pc, #140]	; (8000a04 <MX_TIM2_Init+0xc0>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800097c:	4b21      	ldr	r3, [pc, #132]	; (8000a04 <MX_TIM2_Init+0xc0>)
 800097e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000982:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000984:	4b1f      	ldr	r3, [pc, #124]	; (8000a04 <MX_TIM2_Init+0xc0>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098a:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <MX_TIM2_Init+0xc0>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000990:	481c      	ldr	r0, [pc, #112]	; (8000a04 <MX_TIM2_Init+0xc0>)
 8000992:	f001 fcf1 	bl	8002378 <HAL_TIM_PWM_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800099c:	f7ff ff6c 	bl	8000878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	4815      	ldr	r0, [pc, #84]	; (8000a04 <MX_TIM2_Init+0xc0>)
 80009b0:	f002 fa6c 	bl	8002e8c <HAL_TIMEx_MasterConfigSynchronization>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80009ba:	f7ff ff5d 	bl	8000878 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009be:	2360      	movs	r3, #96	; 0x60
 80009c0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000/4-1;
 80009c2:	23f9      	movs	r3, #249	; 0xf9
 80009c4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009ce:	463b      	mov	r3, r7
 80009d0:	220c      	movs	r2, #12
 80009d2:	4619      	mov	r1, r3
 80009d4:	480b      	ldr	r0, [pc, #44]	; (8000a04 <MX_TIM2_Init+0xc0>)
 80009d6:	f001 fe21 	bl	800261c <HAL_TIM_PWM_ConfigChannel>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80009e0:	f7ff ff4a 	bl	8000878 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_4);
 80009e4:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <MX_TIM2_Init+0xc0>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	69da      	ldr	r2, [r3, #28]
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <MX_TIM2_Init+0xc0>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009f2:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009f4:	4803      	ldr	r0, [pc, #12]	; (8000a04 <MX_TIM2_Init+0xc0>)
 80009f6:	f000 f825 	bl	8000a44 <HAL_TIM_MspPostInit>

}
 80009fa:	bf00      	nop
 80009fc:	3728      	adds	r7, #40	; 0x28
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	2000007c 	.word	0x2000007c

08000a08 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a18:	d10b      	bne.n	8000a32 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <HAL_TIM_PWM_MspInit+0x38>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	4a08      	ldr	r2, [pc, #32]	; (8000a40 <HAL_TIM_PWM_MspInit+0x38>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6413      	str	r3, [r2, #64]	; 0x40
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_TIM_PWM_MspInit+0x38>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000a32:	bf00      	nop
 8000a34:	3714      	adds	r7, #20
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800

08000a44 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a64:	d11c      	bne.n	8000aa0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <HAL_TIM_MspPostInit+0x64>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a0f      	ldr	r2, [pc, #60]	; (8000aa8 <HAL_TIM_MspPostInit+0x64>)
 8000a6c:	f043 0302 	orr.w	r3, r3, #2
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <HAL_TIM_MspPostInit+0x64>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0302 	and.w	r3, r3, #2
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a82:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a90:	2301      	movs	r3, #1
 8000a92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a94:	f107 030c 	add.w	r3, r7, #12
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4804      	ldr	r0, [pc, #16]	; (8000aac <HAL_TIM_MspPostInit+0x68>)
 8000a9c:	f000 fd6e 	bl	800157c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000aa0:	bf00      	nop
 8000aa2:	3720      	adds	r7, #32
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020400 	.word	0x40020400

08000ab0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ab0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ab4:	480d      	ldr	r0, [pc, #52]	; (8000aec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ab6:	490e      	ldr	r1, [pc, #56]	; (8000af0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ab8:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000abc:	e002      	b.n	8000ac4 <LoopCopyDataInit>

08000abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac2:	3304      	adds	r3, #4

08000ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac8:	d3f9      	bcc.n	8000abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aca:	4a0b      	ldr	r2, [pc, #44]	; (8000af8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000acc:	4c0b      	ldr	r4, [pc, #44]	; (8000afc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad0:	e001      	b.n	8000ad6 <LoopFillZerobss>

08000ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad4:	3204      	adds	r2, #4

08000ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad8:	d3fb      	bcc.n	8000ad2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ada:	f7ff ff21 	bl	8000920 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ade:	f002 fa6b 	bl	8002fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ae2:	f7ff fe05 	bl	80006f0 <main>
  bx  lr    
 8000ae6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ae8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000af4:	08003038 	.word	0x08003038
  ldr r2, =_sbss
 8000af8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000afc:	200000cc 	.word	0x200000cc

08000b00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b00:	e7fe      	b.n	8000b00 <ADC_IRQHandler>

08000b02 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b06:	2003      	movs	r0, #3
 8000b08:	f000 fd04 	bl	8001514 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0c:	200f      	movs	r0, #15
 8000b0e:	f000 f805 	bl	8000b1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b12:	f7ff feb7 	bl	8000884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b16:	2300      	movs	r3, #0
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b24:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <HAL_InitTick+0x54>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <HAL_InitTick+0x58>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 fd11 	bl	8001562 <HAL_SYSTICK_Config>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e00e      	b.n	8000b68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2b0f      	cmp	r3, #15
 8000b4e:	d80a      	bhi.n	8000b66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b50:	2200      	movs	r2, #0
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b58:	f000 fce7 	bl	800152a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b5c:	4a06      	ldr	r2, [pc, #24]	; (8000b78 <HAL_InitTick+0x5c>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b62:	2300      	movs	r3, #0
 8000b64:	e000      	b.n	8000b68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000004 	.word	0x20000004
 8000b74:	2000000c 	.word	0x2000000c
 8000b78:	20000008 	.word	0x20000008

08000b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_IncTick+0x20>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_IncTick+0x24>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <HAL_IncTick+0x24>)
 8000b8e:	6013      	str	r3, [r2, #0]
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	2000000c 	.word	0x2000000c
 8000ba0:	200000c8 	.word	0x200000c8

08000ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba8:	4b03      	ldr	r3, [pc, #12]	; (8000bb8 <HAL_GetTick+0x14>)
 8000baa:	681b      	ldr	r3, [r3, #0]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	200000c8 	.word	0x200000c8

08000bbc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d101      	bne.n	8000bd2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e031      	b.n	8000c36 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d109      	bne.n	8000bee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff fcfc 	bl	80005d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2200      	movs	r2, #0
 8000be4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2200      	movs	r2, #0
 8000bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	f003 0310 	and.w	r3, r3, #16
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d116      	bne.n	8000c28 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <HAL_ADC_Init+0x84>)
 8000c00:	4013      	ands	r3, r2
 8000c02:	f043 0202 	orr.w	r2, r3, #2
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f000 fad6 	bl	80011bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2200      	movs	r2, #0
 8000c14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	f023 0303 	bic.w	r3, r3, #3
 8000c1e:	f043 0201 	orr.w	r2, r3, #1
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	641a      	str	r2, [r3, #64]	; 0x40
 8000c26:	e001      	b.n	8000c2c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	ffffeefd 	.word	0xffffeefd

08000c44 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d101      	bne.n	8000c5e <HAL_ADC_Start+0x1a>
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	e0ad      	b.n	8000dba <HAL_ADC_Start+0x176>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2201      	movs	r2, #1
 8000c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	f003 0301 	and.w	r3, r3, #1
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d018      	beq.n	8000ca6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	689a      	ldr	r2, [r3, #8]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f042 0201 	orr.w	r2, r2, #1
 8000c82:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000c84:	4b50      	ldr	r3, [pc, #320]	; (8000dc8 <HAL_ADC_Start+0x184>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a50      	ldr	r2, [pc, #320]	; (8000dcc <HAL_ADC_Start+0x188>)
 8000c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c8e:	0c9a      	lsrs	r2, r3, #18
 8000c90:	4613      	mov	r3, r2
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	4413      	add	r3, r2
 8000c96:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8000c98:	e002      	b.n	8000ca0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d1f9      	bne.n	8000c9a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d175      	bne.n	8000da0 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cb8:	4b45      	ldr	r3, [pc, #276]	; (8000dd0 <HAL_ADC_Start+0x18c>)
 8000cba:	4013      	ands	r3, r2
 8000cbc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d007      	beq.n	8000ce2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cda:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cee:	d106      	bne.n	8000cfe <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf4:	f023 0206 	bic.w	r2, r3, #6
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	645a      	str	r2, [r3, #68]	; 0x44
 8000cfc:	e002      	b.n	8000d04 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2200      	movs	r2, #0
 8000d02:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2200      	movs	r2, #0
 8000d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000d14:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8000d16:	4b2f      	ldr	r3, [pc, #188]	; (8000dd4 <HAL_ADC_Start+0x190>)
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f003 031f 	and.w	r3, r3, #31
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d10f      	bne.n	8000d42 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d143      	bne.n	8000db8 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	689a      	ldr	r2, [r3, #8]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	e03a      	b.n	8000db8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a24      	ldr	r2, [pc, #144]	; (8000dd8 <HAL_ADC_Start+0x194>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d10e      	bne.n	8000d6a <HAL_ADC_Start+0x126>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d107      	bne.n	8000d6a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	689a      	ldr	r2, [r3, #8]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000d68:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8000d6a:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <HAL_ADC_Start+0x190>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 0310 	and.w	r3, r3, #16
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d120      	bne.n	8000db8 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a18      	ldr	r2, [pc, #96]	; (8000ddc <HAL_ADC_Start+0x198>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d11b      	bne.n	8000db8 <HAL_ADC_Start+0x174>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d114      	bne.n	8000db8 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	e00b      	b.n	8000db8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	f043 0210 	orr.w	r2, r3, #16
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db0:	f043 0201 	orr.w	r2, r3, #1
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000004 	.word	0x20000004
 8000dcc:	431bde83 	.word	0x431bde83
 8000dd0:	fffff8fe 	.word	0xfffff8fe
 8000dd4:	40012300 	.word	0x40012300
 8000dd8:	40012000 	.word	0x40012000
 8000ddc:	40012200 	.word	0x40012200

08000de0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000df8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dfc:	d113      	bne.n	8000e26 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000e08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e0c:	d10b      	bne.n	8000e26 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	f043 0220 	orr.w	r2, r3, #32
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e063      	b.n	8000eee <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000e26:	f7ff febd 	bl	8000ba4 <HAL_GetTick>
 8000e2a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e2c:	e021      	b.n	8000e72 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e34:	d01d      	beq.n	8000e72 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d007      	beq.n	8000e4c <HAL_ADC_PollForConversion+0x6c>
 8000e3c:	f7ff feb2 	bl	8000ba4 <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	683a      	ldr	r2, [r7, #0]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d212      	bcs.n	8000e72 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d00b      	beq.n	8000e72 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	f043 0204 	orr.w	r2, r3, #4
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e03d      	b.n	8000eee <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f003 0302 	and.w	r3, r3, #2
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d1d6      	bne.n	8000e2e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f06f 0212 	mvn.w	r2, #18
 8000e88:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d123      	bne.n	8000eec <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d11f      	bne.n	8000eec <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d006      	beq.n	8000ec8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d111      	bne.n	8000eec <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ecc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d105      	bne.n	8000eec <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	f043 0201 	orr.w	r2, r3, #1
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d101      	bne.n	8000f2c <HAL_ADC_ConfigChannel+0x1c>
 8000f28:	2302      	movs	r3, #2
 8000f2a:	e136      	b.n	800119a <HAL_ADC_ConfigChannel+0x28a>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2201      	movs	r2, #1
 8000f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b09      	cmp	r3, #9
 8000f3a:	d93a      	bls.n	8000fb2 <HAL_ADC_ConfigChannel+0xa2>
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000f44:	d035      	beq.n	8000fb2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	68d9      	ldr	r1, [r3, #12]
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	461a      	mov	r2, r3
 8000f54:	4613      	mov	r3, r2
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	4413      	add	r3, r2
 8000f5a:	3b1e      	subs	r3, #30
 8000f5c:	2207      	movs	r2, #7
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43da      	mvns	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	400a      	ands	r2, r1
 8000f6a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a8d      	ldr	r2, [pc, #564]	; (80011a8 <HAL_ADC_ConfigChannel+0x298>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d10a      	bne.n	8000f8c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	68d9      	ldr	r1, [r3, #12]
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	061a      	lsls	r2, r3, #24
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	430a      	orrs	r2, r1
 8000f88:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f8a:	e035      	b.n	8000ff8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	68d9      	ldr	r1, [r3, #12]
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	689a      	ldr	r2, [r3, #8]
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	4403      	add	r3, r0
 8000fa4:	3b1e      	subs	r3, #30
 8000fa6:	409a      	lsls	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	430a      	orrs	r2, r1
 8000fae:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000fb0:	e022      	b.n	8000ff8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	6919      	ldr	r1, [r3, #16]
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	4413      	add	r3, r2
 8000fc6:	2207      	movs	r2, #7
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43da      	mvns	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	400a      	ands	r2, r1
 8000fd4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	6919      	ldr	r1, [r3, #16]
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	689a      	ldr	r2, [r3, #8]
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	4603      	mov	r3, r0
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	4403      	add	r3, r0
 8000fee:	409a      	lsls	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2b06      	cmp	r3, #6
 8000ffe:	d824      	bhi.n	800104a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685a      	ldr	r2, [r3, #4]
 800100a:	4613      	mov	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4413      	add	r3, r2
 8001010:	3b05      	subs	r3, #5
 8001012:	221f      	movs	r2, #31
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43da      	mvns	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	400a      	ands	r2, r1
 8001020:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	b29b      	uxth	r3, r3
 800102e:	4618      	mov	r0, r3
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685a      	ldr	r2, [r3, #4]
 8001034:	4613      	mov	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4413      	add	r3, r2
 800103a:	3b05      	subs	r3, #5
 800103c:	fa00 f203 	lsl.w	r2, r0, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	430a      	orrs	r2, r1
 8001046:	635a      	str	r2, [r3, #52]	; 0x34
 8001048:	e04c      	b.n	80010e4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2b0c      	cmp	r3, #12
 8001050:	d824      	bhi.n	800109c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	4613      	mov	r3, r2
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	4413      	add	r3, r2
 8001062:	3b23      	subs	r3, #35	; 0x23
 8001064:	221f      	movs	r2, #31
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43da      	mvns	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	400a      	ands	r2, r1
 8001072:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	b29b      	uxth	r3, r3
 8001080:	4618      	mov	r0, r3
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	4613      	mov	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4413      	add	r3, r2
 800108c:	3b23      	subs	r3, #35	; 0x23
 800108e:	fa00 f203 	lsl.w	r2, r0, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	430a      	orrs	r2, r1
 8001098:	631a      	str	r2, [r3, #48]	; 0x30
 800109a:	e023      	b.n	80010e4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	4613      	mov	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4413      	add	r3, r2
 80010ac:	3b41      	subs	r3, #65	; 0x41
 80010ae:	221f      	movs	r2, #31
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43da      	mvns	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	400a      	ands	r2, r1
 80010bc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	4618      	mov	r0, r3
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	4613      	mov	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4413      	add	r3, r2
 80010d6:	3b41      	subs	r3, #65	; 0x41
 80010d8:	fa00 f203 	lsl.w	r2, r0, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	430a      	orrs	r2, r1
 80010e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a30      	ldr	r2, [pc, #192]	; (80011ac <HAL_ADC_ConfigChannel+0x29c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d10a      	bne.n	8001104 <HAL_ADC_ConfigChannel+0x1f4>
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80010f6:	d105      	bne.n	8001104 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80010f8:	4b2d      	ldr	r3, [pc, #180]	; (80011b0 <HAL_ADC_ConfigChannel+0x2a0>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	4a2c      	ldr	r2, [pc, #176]	; (80011b0 <HAL_ADC_ConfigChannel+0x2a0>)
 80010fe:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001102:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a28      	ldr	r2, [pc, #160]	; (80011ac <HAL_ADC_ConfigChannel+0x29c>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d10f      	bne.n	800112e <HAL_ADC_ConfigChannel+0x21e>
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2b12      	cmp	r3, #18
 8001114:	d10b      	bne.n	800112e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001116:	4b26      	ldr	r3, [pc, #152]	; (80011b0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	4a25      	ldr	r2, [pc, #148]	; (80011b0 <HAL_ADC_ConfigChannel+0x2a0>)
 800111c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001120:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001122:	4b23      	ldr	r3, [pc, #140]	; (80011b0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	4a22      	ldr	r2, [pc, #136]	; (80011b0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001128:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800112c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a1e      	ldr	r2, [pc, #120]	; (80011ac <HAL_ADC_ConfigChannel+0x29c>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d12b      	bne.n	8001190 <HAL_ADC_ConfigChannel+0x280>
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a1a      	ldr	r2, [pc, #104]	; (80011a8 <HAL_ADC_ConfigChannel+0x298>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d003      	beq.n	800114a <HAL_ADC_ConfigChannel+0x23a>
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2b11      	cmp	r3, #17
 8001148:	d122      	bne.n	8001190 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800114a:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <HAL_ADC_ConfigChannel+0x2a0>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	4a18      	ldr	r2, [pc, #96]	; (80011b0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001150:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001154:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001156:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	4a15      	ldr	r2, [pc, #84]	; (80011b0 <HAL_ADC_ConfigChannel+0x2a0>)
 800115c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001160:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a10      	ldr	r2, [pc, #64]	; (80011a8 <HAL_ADC_ConfigChannel+0x298>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d111      	bne.n	8001190 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <HAL_ADC_ConfigChannel+0x2a4>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a11      	ldr	r2, [pc, #68]	; (80011b8 <HAL_ADC_ConfigChannel+0x2a8>)
 8001172:	fba2 2303 	umull	r2, r3, r2, r3
 8001176:	0c9a      	lsrs	r2, r3, #18
 8001178:	4613      	mov	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001182:	e002      	b.n	800118a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	3b01      	subs	r3, #1
 8001188:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1f9      	bne.n	8001184 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	10000012 	.word	0x10000012
 80011ac:	40012000 	.word	0x40012000
 80011b0:	40012300 	.word	0x40012300
 80011b4:	20000004 	.word	0x20000004
 80011b8:	431bde83 	.word	0x431bde83

080011bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80011c4:	4b78      	ldr	r3, [pc, #480]	; (80013a8 <ADC_Init+0x1ec>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	4a77      	ldr	r2, [pc, #476]	; (80013a8 <ADC_Init+0x1ec>)
 80011ca:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80011ce:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80011d0:	4b75      	ldr	r3, [pc, #468]	; (80013a8 <ADC_Init+0x1ec>)
 80011d2:	685a      	ldr	r2, [r3, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	4973      	ldr	r1, [pc, #460]	; (80013a8 <ADC_Init+0x1ec>)
 80011da:	4313      	orrs	r3, r2
 80011dc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	6859      	ldr	r1, [r3, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	691b      	ldr	r3, [r3, #16]
 80011f8:	021a      	lsls	r2, r3, #8
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	430a      	orrs	r2, r1
 8001200:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001210:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	6859      	ldr	r1, [r3, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	430a      	orrs	r2, r1
 8001222:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	689a      	ldr	r2, [r3, #8]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001232:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	6899      	ldr	r1, [r3, #8]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68da      	ldr	r2, [r3, #12]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	430a      	orrs	r2, r1
 8001244:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800124a:	4a58      	ldr	r2, [pc, #352]	; (80013ac <ADC_Init+0x1f0>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d022      	beq.n	8001296 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800125e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6899      	ldr	r1, [r3, #8]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	430a      	orrs	r2, r1
 8001270:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001280:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6899      	ldr	r1, [r3, #8]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	430a      	orrs	r2, r1
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	e00f      	b.n	80012b6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	689a      	ldr	r2, [r3, #8]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f022 0202 	bic.w	r2, r2, #2
 80012c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6899      	ldr	r1, [r3, #8]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	005a      	lsls	r2, r3, #1
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	430a      	orrs	r2, r1
 80012d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d01b      	beq.n	800131c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001302:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	6859      	ldr	r1, [r3, #4]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130e:	3b01      	subs	r3, #1
 8001310:	035a      	lsls	r2, r3, #13
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	430a      	orrs	r2, r1
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	e007      	b.n	800132c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	685a      	ldr	r2, [r3, #4]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800132a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800133a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	3b01      	subs	r3, #1
 8001348:	051a      	lsls	r2, r3, #20
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	430a      	orrs	r2, r1
 8001350:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001360:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6899      	ldr	r1, [r3, #8]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800136e:	025a      	lsls	r2, r3, #9
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	430a      	orrs	r2, r1
 8001376:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001386:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6899      	ldr	r1, [r3, #8]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	029a      	lsls	r2, r3, #10
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	430a      	orrs	r2, r1
 800139a:	609a      	str	r2, [r3, #8]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	40012300 	.word	0x40012300
 80013ac:	0f000001 	.word	0x0f000001

080013b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c0:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <__NVIC_SetPriorityGrouping+0x40>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013c6:	68ba      	ldr	r2, [r7, #8]
 80013c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013cc:	4013      	ands	r3, r2
 80013ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <__NVIC_SetPriorityGrouping+0x44>)
 80013da:	4313      	orrs	r3, r2
 80013dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013de:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <__NVIC_SetPriorityGrouping+0x40>)
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	60d3      	str	r3, [r2, #12]
}
 80013e4:	bf00      	nop
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000ed00 	.word	0xe000ed00
 80013f4:	05fa0000 	.word	0x05fa0000

080013f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013fc:	4b04      	ldr	r3, [pc, #16]	; (8001410 <__NVIC_GetPriorityGrouping+0x18>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	0a1b      	lsrs	r3, r3, #8
 8001402:	f003 0307 	and.w	r3, r3, #7
}
 8001406:	4618      	mov	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	6039      	str	r1, [r7, #0]
 800141e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001424:	2b00      	cmp	r3, #0
 8001426:	db0a      	blt.n	800143e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	b2da      	uxtb	r2, r3
 800142c:	490c      	ldr	r1, [pc, #48]	; (8001460 <__NVIC_SetPriority+0x4c>)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	0112      	lsls	r2, r2, #4
 8001434:	b2d2      	uxtb	r2, r2
 8001436:	440b      	add	r3, r1
 8001438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800143c:	e00a      	b.n	8001454 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	b2da      	uxtb	r2, r3
 8001442:	4908      	ldr	r1, [pc, #32]	; (8001464 <__NVIC_SetPriority+0x50>)
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	f003 030f 	and.w	r3, r3, #15
 800144a:	3b04      	subs	r3, #4
 800144c:	0112      	lsls	r2, r2, #4
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	440b      	add	r3, r1
 8001452:	761a      	strb	r2, [r3, #24]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000e100 	.word	0xe000e100
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001468:	b480      	push	{r7}
 800146a:	b089      	sub	sp, #36	; 0x24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f1c3 0307 	rsb	r3, r3, #7
 8001482:	2b04      	cmp	r3, #4
 8001484:	bf28      	it	cs
 8001486:	2304      	movcs	r3, #4
 8001488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3304      	adds	r3, #4
 800148e:	2b06      	cmp	r3, #6
 8001490:	d902      	bls.n	8001498 <NVIC_EncodePriority+0x30>
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3b03      	subs	r3, #3
 8001496:	e000      	b.n	800149a <NVIC_EncodePriority+0x32>
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43da      	mvns	r2, r3
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	401a      	ands	r2, r3
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ba:	43d9      	mvns	r1, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c0:	4313      	orrs	r3, r2
         );
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3724      	adds	r7, #36	; 0x24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
	...

080014d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3b01      	subs	r3, #1
 80014dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014e0:	d301      	bcc.n	80014e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00f      	b.n	8001506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014e6:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <SysTick_Config+0x40>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ee:	210f      	movs	r1, #15
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014f4:	f7ff ff8e 	bl	8001414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <SysTick_Config+0x40>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014fe:	4b04      	ldr	r3, [pc, #16]	; (8001510 <SysTick_Config+0x40>)
 8001500:	2207      	movs	r2, #7
 8001502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	e000e010 	.word	0xe000e010

08001514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff ff47 	bl	80013b0 <__NVIC_SetPriorityGrouping>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800152a:	b580      	push	{r7, lr}
 800152c:	b086      	sub	sp, #24
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
 8001536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800153c:	f7ff ff5c 	bl	80013f8 <__NVIC_GetPriorityGrouping>
 8001540:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	6978      	ldr	r0, [r7, #20]
 8001548:	f7ff ff8e 	bl	8001468 <NVIC_EncodePriority>
 800154c:	4602      	mov	r2, r0
 800154e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001552:	4611      	mov	r1, r2
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff5d 	bl	8001414 <__NVIC_SetPriority>
}
 800155a:	bf00      	nop
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff ffb0 	bl	80014d0 <SysTick_Config>
 8001570:	4603      	mov	r3, r0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800157c:	b480      	push	{r7}
 800157e:	b089      	sub	sp, #36	; 0x24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001592:	2300      	movs	r3, #0
 8001594:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
 800159a:	e175      	b.n	8001888 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800159c:	2201      	movs	r2, #1
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	4013      	ands	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	f040 8164 	bne.w	8001882 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f003 0303 	and.w	r3, r3, #3
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d005      	beq.n	80015d2 <HAL_GPIO_Init+0x56>
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d130      	bne.n	8001634 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	2203      	movs	r2, #3
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43db      	mvns	r3, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4013      	ands	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	68da      	ldr	r2, [r3, #12]
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001608:	2201      	movs	r2, #1
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	091b      	lsrs	r3, r3, #4
 800161e:	f003 0201 	and.w	r2, r3, #1
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 0303 	and.w	r3, r3, #3
 800163c:	2b03      	cmp	r3, #3
 800163e:	d017      	beq.n	8001670 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	2203      	movs	r2, #3
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 0303 	and.w	r3, r3, #3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d123      	bne.n	80016c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	08da      	lsrs	r2, r3, #3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3208      	adds	r2, #8
 8001684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	220f      	movs	r2, #15
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	691a      	ldr	r2, [r3, #16]
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	08da      	lsrs	r2, r3, #3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	3208      	adds	r2, #8
 80016be:	69b9      	ldr	r1, [r7, #24]
 80016c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	2203      	movs	r2, #3
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4013      	ands	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 0203 	and.w	r2, r3, #3
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 80be 	beq.w	8001882 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001706:	4b66      	ldr	r3, [pc, #408]	; (80018a0 <HAL_GPIO_Init+0x324>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	4a65      	ldr	r2, [pc, #404]	; (80018a0 <HAL_GPIO_Init+0x324>)
 800170c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001710:	6453      	str	r3, [r2, #68]	; 0x44
 8001712:	4b63      	ldr	r3, [pc, #396]	; (80018a0 <HAL_GPIO_Init+0x324>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800171e:	4a61      	ldr	r2, [pc, #388]	; (80018a4 <HAL_GPIO_Init+0x328>)
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	089b      	lsrs	r3, r3, #2
 8001724:	3302      	adds	r3, #2
 8001726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f003 0303 	and.w	r3, r3, #3
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	220f      	movs	r2, #15
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43db      	mvns	r3, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4013      	ands	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a58      	ldr	r2, [pc, #352]	; (80018a8 <HAL_GPIO_Init+0x32c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d037      	beq.n	80017ba <HAL_GPIO_Init+0x23e>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a57      	ldr	r2, [pc, #348]	; (80018ac <HAL_GPIO_Init+0x330>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d031      	beq.n	80017b6 <HAL_GPIO_Init+0x23a>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a56      	ldr	r2, [pc, #344]	; (80018b0 <HAL_GPIO_Init+0x334>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d02b      	beq.n	80017b2 <HAL_GPIO_Init+0x236>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a55      	ldr	r2, [pc, #340]	; (80018b4 <HAL_GPIO_Init+0x338>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d025      	beq.n	80017ae <HAL_GPIO_Init+0x232>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a54      	ldr	r2, [pc, #336]	; (80018b8 <HAL_GPIO_Init+0x33c>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d01f      	beq.n	80017aa <HAL_GPIO_Init+0x22e>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a53      	ldr	r2, [pc, #332]	; (80018bc <HAL_GPIO_Init+0x340>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d019      	beq.n	80017a6 <HAL_GPIO_Init+0x22a>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a52      	ldr	r2, [pc, #328]	; (80018c0 <HAL_GPIO_Init+0x344>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d013      	beq.n	80017a2 <HAL_GPIO_Init+0x226>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a51      	ldr	r2, [pc, #324]	; (80018c4 <HAL_GPIO_Init+0x348>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d00d      	beq.n	800179e <HAL_GPIO_Init+0x222>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a50      	ldr	r2, [pc, #320]	; (80018c8 <HAL_GPIO_Init+0x34c>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d007      	beq.n	800179a <HAL_GPIO_Init+0x21e>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a4f      	ldr	r2, [pc, #316]	; (80018cc <HAL_GPIO_Init+0x350>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d101      	bne.n	8001796 <HAL_GPIO_Init+0x21a>
 8001792:	2309      	movs	r3, #9
 8001794:	e012      	b.n	80017bc <HAL_GPIO_Init+0x240>
 8001796:	230a      	movs	r3, #10
 8001798:	e010      	b.n	80017bc <HAL_GPIO_Init+0x240>
 800179a:	2308      	movs	r3, #8
 800179c:	e00e      	b.n	80017bc <HAL_GPIO_Init+0x240>
 800179e:	2307      	movs	r3, #7
 80017a0:	e00c      	b.n	80017bc <HAL_GPIO_Init+0x240>
 80017a2:	2306      	movs	r3, #6
 80017a4:	e00a      	b.n	80017bc <HAL_GPIO_Init+0x240>
 80017a6:	2305      	movs	r3, #5
 80017a8:	e008      	b.n	80017bc <HAL_GPIO_Init+0x240>
 80017aa:	2304      	movs	r3, #4
 80017ac:	e006      	b.n	80017bc <HAL_GPIO_Init+0x240>
 80017ae:	2303      	movs	r3, #3
 80017b0:	e004      	b.n	80017bc <HAL_GPIO_Init+0x240>
 80017b2:	2302      	movs	r3, #2
 80017b4:	e002      	b.n	80017bc <HAL_GPIO_Init+0x240>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e000      	b.n	80017bc <HAL_GPIO_Init+0x240>
 80017ba:	2300      	movs	r3, #0
 80017bc:	69fa      	ldr	r2, [r7, #28]
 80017be:	f002 0203 	and.w	r2, r2, #3
 80017c2:	0092      	lsls	r2, r2, #2
 80017c4:	4093      	lsls	r3, r2
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80017cc:	4935      	ldr	r1, [pc, #212]	; (80018a4 <HAL_GPIO_Init+0x328>)
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	089b      	lsrs	r3, r3, #2
 80017d2:	3302      	adds	r3, #2
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017da:	4b3d      	ldr	r3, [pc, #244]	; (80018d0 <HAL_GPIO_Init+0x354>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	43db      	mvns	r3, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4013      	ands	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017fe:	4a34      	ldr	r2, [pc, #208]	; (80018d0 <HAL_GPIO_Init+0x354>)
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001804:	4b32      	ldr	r3, [pc, #200]	; (80018d0 <HAL_GPIO_Init+0x354>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	43db      	mvns	r3, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4013      	ands	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001828:	4a29      	ldr	r2, [pc, #164]	; (80018d0 <HAL_GPIO_Init+0x354>)
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800182e:	4b28      	ldr	r3, [pc, #160]	; (80018d0 <HAL_GPIO_Init+0x354>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	43db      	mvns	r3, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4013      	ands	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001852:	4a1f      	ldr	r2, [pc, #124]	; (80018d0 <HAL_GPIO_Init+0x354>)
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001858:	4b1d      	ldr	r3, [pc, #116]	; (80018d0 <HAL_GPIO_Init+0x354>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	4313      	orrs	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800187c:	4a14      	ldr	r2, [pc, #80]	; (80018d0 <HAL_GPIO_Init+0x354>)
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3301      	adds	r3, #1
 8001886:	61fb      	str	r3, [r7, #28]
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	2b0f      	cmp	r3, #15
 800188c:	f67f ae86 	bls.w	800159c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001890:	bf00      	nop
 8001892:	bf00      	nop
 8001894:	3724      	adds	r7, #36	; 0x24
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40013800 	.word	0x40013800
 80018a8:	40020000 	.word	0x40020000
 80018ac:	40020400 	.word	0x40020400
 80018b0:	40020800 	.word	0x40020800
 80018b4:	40020c00 	.word	0x40020c00
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40021400 	.word	0x40021400
 80018c0:	40021800 	.word	0x40021800
 80018c4:	40021c00 	.word	0x40021c00
 80018c8:	40022000 	.word	0x40022000
 80018cc:	40022400 	.word	0x40022400
 80018d0:	40013c00 	.word	0x40013c00

080018d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691a      	ldr	r2, [r3, #16]
 80018e4:	887b      	ldrh	r3, [r7, #2]
 80018e6:	4013      	ands	r3, r2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d002      	beq.n	80018f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018ec:	2301      	movs	r3, #1
 80018ee:	73fb      	strb	r3, [r7, #15]
 80018f0:	e001      	b.n	80018f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018f2:	2300      	movs	r3, #0
 80018f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	807b      	strh	r3, [r7, #2]
 8001910:	4613      	mov	r3, r2
 8001912:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001914:	787b      	ldrb	r3, [r7, #1]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800191a:	887a      	ldrh	r2, [r7, #2]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001920:	e003      	b.n	800192a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001922:	887b      	ldrh	r3, [r7, #2]
 8001924:	041a      	lsls	r2, r3, #16
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	619a      	str	r2, [r3, #24]
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800193e:	2300      	movs	r3, #0
 8001940:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001942:	4b23      	ldr	r3, [pc, #140]	; (80019d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	4a22      	ldr	r2, [pc, #136]	; (80019d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194c:	6413      	str	r3, [r2, #64]	; 0x40
 800194e:	4b20      	ldr	r3, [pc, #128]	; (80019d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800195a:	4b1e      	ldr	r3, [pc, #120]	; (80019d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a1d      	ldr	r2, [pc, #116]	; (80019d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001964:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001966:	f7ff f91d 	bl	8000ba4 <HAL_GetTick>
 800196a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800196c:	e009      	b.n	8001982 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800196e:	f7ff f919 	bl	8000ba4 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800197c:	d901      	bls.n	8001982 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e022      	b.n	80019c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001982:	4b14      	ldr	r3, [pc, #80]	; (80019d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800198a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800198e:	d1ee      	bne.n	800196e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001990:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0f      	ldr	r2, [pc, #60]	; (80019d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800199a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800199c:	f7ff f902 	bl	8000ba4 <HAL_GetTick>
 80019a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80019a2:	e009      	b.n	80019b8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80019a4:	f7ff f8fe 	bl	8000ba4 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019b2:	d901      	bls.n	80019b8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e007      	b.n	80019c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019c4:	d1ee      	bne.n	80019a4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40007000 	.word	0x40007000

080019d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80019e0:	2300      	movs	r3, #0
 80019e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e29b      	b.n	8001f26 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 8087 	beq.w	8001b0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019fc:	4b96      	ldr	r3, [pc, #600]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 030c 	and.w	r3, r3, #12
 8001a04:	2b04      	cmp	r3, #4
 8001a06:	d00c      	beq.n	8001a22 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a08:	4b93      	ldr	r3, [pc, #588]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 030c 	and.w	r3, r3, #12
 8001a10:	2b08      	cmp	r3, #8
 8001a12:	d112      	bne.n	8001a3a <HAL_RCC_OscConfig+0x62>
 8001a14:	4b90      	ldr	r3, [pc, #576]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a20:	d10b      	bne.n	8001a3a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a22:	4b8d      	ldr	r3, [pc, #564]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d06c      	beq.n	8001b08 <HAL_RCC_OscConfig+0x130>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d168      	bne.n	8001b08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e275      	b.n	8001f26 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a42:	d106      	bne.n	8001a52 <HAL_RCC_OscConfig+0x7a>
 8001a44:	4b84      	ldr	r3, [pc, #528]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a83      	ldr	r2, [pc, #524]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	e02e      	b.n	8001ab0 <HAL_RCC_OscConfig+0xd8>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d10c      	bne.n	8001a74 <HAL_RCC_OscConfig+0x9c>
 8001a5a:	4b7f      	ldr	r3, [pc, #508]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a7e      	ldr	r2, [pc, #504]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a64:	6013      	str	r3, [r2, #0]
 8001a66:	4b7c      	ldr	r3, [pc, #496]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a7b      	ldr	r2, [pc, #492]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	e01d      	b.n	8001ab0 <HAL_RCC_OscConfig+0xd8>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a7c:	d10c      	bne.n	8001a98 <HAL_RCC_OscConfig+0xc0>
 8001a7e:	4b76      	ldr	r3, [pc, #472]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a75      	ldr	r2, [pc, #468]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	4b73      	ldr	r3, [pc, #460]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a72      	ldr	r2, [pc, #456]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	e00b      	b.n	8001ab0 <HAL_RCC_OscConfig+0xd8>
 8001a98:	4b6f      	ldr	r3, [pc, #444]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a6e      	ldr	r2, [pc, #440]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aa2:	6013      	str	r3, [r2, #0]
 8001aa4:	4b6c      	ldr	r3, [pc, #432]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a6b      	ldr	r2, [pc, #428]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001aaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d013      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab8:	f7ff f874 	bl	8000ba4 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ac0:	f7ff f870 	bl	8000ba4 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b64      	cmp	r3, #100	; 0x64
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e229      	b.n	8001f26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad2:	4b61      	ldr	r3, [pc, #388]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0f0      	beq.n	8001ac0 <HAL_RCC_OscConfig+0xe8>
 8001ade:	e014      	b.n	8001b0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae0:	f7ff f860 	bl	8000ba4 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae8:	f7ff f85c 	bl	8000ba4 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b64      	cmp	r3, #100	; 0x64
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e215      	b.n	8001f26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001afa:	4b57      	ldr	r3, [pc, #348]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f0      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x110>
 8001b06:	e000      	b.n	8001b0a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d069      	beq.n	8001bea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b16:	4b50      	ldr	r3, [pc, #320]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 030c 	and.w	r3, r3, #12
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00b      	beq.n	8001b3a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b22:	4b4d      	ldr	r3, [pc, #308]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 030c 	and.w	r3, r3, #12
 8001b2a:	2b08      	cmp	r3, #8
 8001b2c:	d11c      	bne.n	8001b68 <HAL_RCC_OscConfig+0x190>
 8001b2e:	4b4a      	ldr	r3, [pc, #296]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d116      	bne.n	8001b68 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b3a:	4b47      	ldr	r3, [pc, #284]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d005      	beq.n	8001b52 <HAL_RCC_OscConfig+0x17a>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d001      	beq.n	8001b52 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e1e9      	b.n	8001f26 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b52:	4b41      	ldr	r3, [pc, #260]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	493d      	ldr	r1, [pc, #244]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b66:	e040      	b.n	8001bea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d023      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b70:	4b39      	ldr	r3, [pc, #228]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a38      	ldr	r2, [pc, #224]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7c:	f7ff f812 	bl	8000ba4 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b84:	f7ff f80e 	bl	8000ba4 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e1c7      	b.n	8001f26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b96:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d0f0      	beq.n	8001b84 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba2:	4b2d      	ldr	r3, [pc, #180]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	4929      	ldr	r1, [pc, #164]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	600b      	str	r3, [r1, #0]
 8001bb6:	e018      	b.n	8001bea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bb8:	4b27      	ldr	r3, [pc, #156]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a26      	ldr	r2, [pc, #152]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001bbe:	f023 0301 	bic.w	r3, r3, #1
 8001bc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc4:	f7fe ffee 	bl	8000ba4 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bcc:	f7fe ffea 	bl	8000ba4 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e1a3      	b.n	8001f26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bde:	4b1e      	ldr	r3, [pc, #120]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d038      	beq.n	8001c68 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d019      	beq.n	8001c32 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bfe:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c02:	4a15      	ldr	r2, [pc, #84]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0a:	f7fe ffcb 	bl	8000ba4 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c12:	f7fe ffc7 	bl	8000ba4 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e180      	b.n	8001f26 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0f0      	beq.n	8001c12 <HAL_RCC_OscConfig+0x23a>
 8001c30:	e01a      	b.n	8001c68 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c32:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c36:	4a08      	ldr	r2, [pc, #32]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001c38:	f023 0301 	bic.w	r3, r3, #1
 8001c3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c3e:	f7fe ffb1 	bl	8000ba4 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c44:	e00a      	b.n	8001c5c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c46:	f7fe ffad 	bl	8000ba4 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d903      	bls.n	8001c5c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e166      	b.n	8001f26 <HAL_RCC_OscConfig+0x54e>
 8001c58:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c5c:	4b92      	ldr	r3, [pc, #584]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1ee      	bne.n	8001c46 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 80a4 	beq.w	8001dbe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c76:	4b8c      	ldr	r3, [pc, #560]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10d      	bne.n	8001c9e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c82:	4b89      	ldr	r3, [pc, #548]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	4a88      	ldr	r2, [pc, #544]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8e:	4b86      	ldr	r3, [pc, #536]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c9e:	4b83      	ldr	r3, [pc, #524]	; (8001eac <HAL_RCC_OscConfig+0x4d4>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d118      	bne.n	8001cdc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001caa:	4b80      	ldr	r3, [pc, #512]	; (8001eac <HAL_RCC_OscConfig+0x4d4>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a7f      	ldr	r2, [pc, #508]	; (8001eac <HAL_RCC_OscConfig+0x4d4>)
 8001cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cb6:	f7fe ff75 	bl	8000ba4 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cbe:	f7fe ff71 	bl	8000ba4 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b64      	cmp	r3, #100	; 0x64
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e12a      	b.n	8001f26 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cd0:	4b76      	ldr	r3, [pc, #472]	; (8001eac <HAL_RCC_OscConfig+0x4d4>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0f0      	beq.n	8001cbe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d106      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x31a>
 8001ce4:	4b70      	ldr	r3, [pc, #448]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce8:	4a6f      	ldr	r2, [pc, #444]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf0:	e02d      	b.n	8001d4e <HAL_RCC_OscConfig+0x376>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10c      	bne.n	8001d14 <HAL_RCC_OscConfig+0x33c>
 8001cfa:	4b6b      	ldr	r3, [pc, #428]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfe:	4a6a      	ldr	r2, [pc, #424]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001d00:	f023 0301 	bic.w	r3, r3, #1
 8001d04:	6713      	str	r3, [r2, #112]	; 0x70
 8001d06:	4b68      	ldr	r3, [pc, #416]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0a:	4a67      	ldr	r2, [pc, #412]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001d0c:	f023 0304 	bic.w	r3, r3, #4
 8001d10:	6713      	str	r3, [r2, #112]	; 0x70
 8001d12:	e01c      	b.n	8001d4e <HAL_RCC_OscConfig+0x376>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2b05      	cmp	r3, #5
 8001d1a:	d10c      	bne.n	8001d36 <HAL_RCC_OscConfig+0x35e>
 8001d1c:	4b62      	ldr	r3, [pc, #392]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d20:	4a61      	ldr	r2, [pc, #388]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001d22:	f043 0304 	orr.w	r3, r3, #4
 8001d26:	6713      	str	r3, [r2, #112]	; 0x70
 8001d28:	4b5f      	ldr	r3, [pc, #380]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2c:	4a5e      	ldr	r2, [pc, #376]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	6713      	str	r3, [r2, #112]	; 0x70
 8001d34:	e00b      	b.n	8001d4e <HAL_RCC_OscConfig+0x376>
 8001d36:	4b5c      	ldr	r3, [pc, #368]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3a:	4a5b      	ldr	r2, [pc, #364]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001d3c:	f023 0301 	bic.w	r3, r3, #1
 8001d40:	6713      	str	r3, [r2, #112]	; 0x70
 8001d42:	4b59      	ldr	r3, [pc, #356]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d46:	4a58      	ldr	r2, [pc, #352]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001d48:	f023 0304 	bic.w	r3, r3, #4
 8001d4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d015      	beq.n	8001d82 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d56:	f7fe ff25 	bl	8000ba4 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5c:	e00a      	b.n	8001d74 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5e:	f7fe ff21 	bl	8000ba4 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e0d8      	b.n	8001f26 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d74:	4b4c      	ldr	r3, [pc, #304]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0ee      	beq.n	8001d5e <HAL_RCC_OscConfig+0x386>
 8001d80:	e014      	b.n	8001dac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d82:	f7fe ff0f 	bl	8000ba4 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d88:	e00a      	b.n	8001da0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d8a:	f7fe ff0b 	bl	8000ba4 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e0c2      	b.n	8001f26 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da0:	4b41      	ldr	r3, [pc, #260]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1ee      	bne.n	8001d8a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001dac:	7dfb      	ldrb	r3, [r7, #23]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d105      	bne.n	8001dbe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db2:	4b3d      	ldr	r3, [pc, #244]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	4a3c      	ldr	r2, [pc, #240]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001db8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 80ae 	beq.w	8001f24 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dc8:	4b37      	ldr	r3, [pc, #220]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d06d      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d14b      	bne.n	8001e74 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ddc:	4b32      	ldr	r3, [pc, #200]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a31      	ldr	r2, [pc, #196]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001de2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de8:	f7fe fedc 	bl	8000ba4 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df0:	f7fe fed8 	bl	8000ba4 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e091      	b.n	8001f26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e02:	4b29      	ldr	r3, [pc, #164]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f0      	bne.n	8001df0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69da      	ldr	r2, [r3, #28]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	019b      	lsls	r3, r3, #6
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e24:	085b      	lsrs	r3, r3, #1
 8001e26:	3b01      	subs	r3, #1
 8001e28:	041b      	lsls	r3, r3, #16
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e30:	061b      	lsls	r3, r3, #24
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e38:	071b      	lsls	r3, r3, #28
 8001e3a:	491b      	ldr	r1, [pc, #108]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e40:	4b19      	ldr	r3, [pc, #100]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a18      	ldr	r2, [pc, #96]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4c:	f7fe feaa 	bl	8000ba4 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e54:	f7fe fea6 	bl	8000ba4 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e05f      	b.n	8001f26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e66:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0f0      	beq.n	8001e54 <HAL_RCC_OscConfig+0x47c>
 8001e72:	e057      	b.n	8001f24 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e74:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a0b      	ldr	r2, [pc, #44]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001e7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e80:	f7fe fe90 	bl	8000ba4 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e88:	f7fe fe8c 	bl	8000ba4 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e045      	b.n	8001f26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e9a:	4b03      	ldr	r3, [pc, #12]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0x4b0>
 8001ea6:	e03d      	b.n	8001f24 <HAL_RCC_OscConfig+0x54c>
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001eb0:	4b1f      	ldr	r3, [pc, #124]	; (8001f30 <HAL_RCC_OscConfig+0x558>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d030      	beq.n	8001f20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d129      	bne.n	8001f20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d122      	bne.n	8001f20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ee6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d119      	bne.n	8001f20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef6:	085b      	lsrs	r3, r3, #1
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d10f      	bne.n	8001f20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d107      	bne.n	8001f20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d001      	beq.n	8001f24 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e000      	b.n	8001f26 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40023800 	.word	0x40023800

08001f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e0d0      	b.n	80020ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f4c:	4b6a      	ldr	r3, [pc, #424]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 030f 	and.w	r3, r3, #15
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d910      	bls.n	8001f7c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5a:	4b67      	ldr	r3, [pc, #412]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f023 020f 	bic.w	r2, r3, #15
 8001f62:	4965      	ldr	r1, [pc, #404]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6a:	4b63      	ldr	r3, [pc, #396]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d001      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e0b8      	b.n	80020ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d020      	beq.n	8001fca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d005      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f94:	4b59      	ldr	r3, [pc, #356]	; (80020fc <HAL_RCC_ClockConfig+0x1c8>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	4a58      	ldr	r2, [pc, #352]	; (80020fc <HAL_RCC_ClockConfig+0x1c8>)
 8001f9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0308 	and.w	r3, r3, #8
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d005      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fac:	4b53      	ldr	r3, [pc, #332]	; (80020fc <HAL_RCC_ClockConfig+0x1c8>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	4a52      	ldr	r2, [pc, #328]	; (80020fc <HAL_RCC_ClockConfig+0x1c8>)
 8001fb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fb6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb8:	4b50      	ldr	r3, [pc, #320]	; (80020fc <HAL_RCC_ClockConfig+0x1c8>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	494d      	ldr	r1, [pc, #308]	; (80020fc <HAL_RCC_ClockConfig+0x1c8>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d040      	beq.n	8002058 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d107      	bne.n	8001fee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fde:	4b47      	ldr	r3, [pc, #284]	; (80020fc <HAL_RCC_ClockConfig+0x1c8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d115      	bne.n	8002016 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e07f      	b.n	80020ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d107      	bne.n	8002006 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff6:	4b41      	ldr	r3, [pc, #260]	; (80020fc <HAL_RCC_ClockConfig+0x1c8>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d109      	bne.n	8002016 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e073      	b.n	80020ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002006:	4b3d      	ldr	r3, [pc, #244]	; (80020fc <HAL_RCC_ClockConfig+0x1c8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e06b      	b.n	80020ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002016:	4b39      	ldr	r3, [pc, #228]	; (80020fc <HAL_RCC_ClockConfig+0x1c8>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f023 0203 	bic.w	r2, r3, #3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	4936      	ldr	r1, [pc, #216]	; (80020fc <HAL_RCC_ClockConfig+0x1c8>)
 8002024:	4313      	orrs	r3, r2
 8002026:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002028:	f7fe fdbc 	bl	8000ba4 <HAL_GetTick>
 800202c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202e:	e00a      	b.n	8002046 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002030:	f7fe fdb8 	bl	8000ba4 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	f241 3288 	movw	r2, #5000	; 0x1388
 800203e:	4293      	cmp	r3, r2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e053      	b.n	80020ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002046:	4b2d      	ldr	r3, [pc, #180]	; (80020fc <HAL_RCC_ClockConfig+0x1c8>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 020c 	and.w	r2, r3, #12
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	429a      	cmp	r2, r3
 8002056:	d1eb      	bne.n	8002030 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002058:	4b27      	ldr	r3, [pc, #156]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 030f 	and.w	r3, r3, #15
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	d210      	bcs.n	8002088 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002066:	4b24      	ldr	r3, [pc, #144]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f023 020f 	bic.w	r2, r3, #15
 800206e:	4922      	ldr	r1, [pc, #136]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	4313      	orrs	r3, r2
 8002074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002076:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	429a      	cmp	r2, r3
 8002082:	d001      	beq.n	8002088 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e032      	b.n	80020ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	2b00      	cmp	r3, #0
 8002092:	d008      	beq.n	80020a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002094:	4b19      	ldr	r3, [pc, #100]	; (80020fc <HAL_RCC_ClockConfig+0x1c8>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	4916      	ldr	r1, [pc, #88]	; (80020fc <HAL_RCC_ClockConfig+0x1c8>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d009      	beq.n	80020c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020b2:	4b12      	ldr	r3, [pc, #72]	; (80020fc <HAL_RCC_ClockConfig+0x1c8>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	490e      	ldr	r1, [pc, #56]	; (80020fc <HAL_RCC_ClockConfig+0x1c8>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020c6:	f000 f821 	bl	800210c <HAL_RCC_GetSysClockFreq>
 80020ca:	4602      	mov	r2, r0
 80020cc:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <HAL_RCC_ClockConfig+0x1c8>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	091b      	lsrs	r3, r3, #4
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	490a      	ldr	r1, [pc, #40]	; (8002100 <HAL_RCC_ClockConfig+0x1cc>)
 80020d8:	5ccb      	ldrb	r3, [r1, r3]
 80020da:	fa22 f303 	lsr.w	r3, r2, r3
 80020de:	4a09      	ldr	r2, [pc, #36]	; (8002104 <HAL_RCC_ClockConfig+0x1d0>)
 80020e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <HAL_RCC_ClockConfig+0x1d4>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe fd18 	bl	8000b1c <HAL_InitTick>

  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40023c00 	.word	0x40023c00
 80020fc:	40023800 	.word	0x40023800
 8002100:	08003018 	.word	0x08003018
 8002104:	20000004 	.word	0x20000004
 8002108:	20000008 	.word	0x20000008

0800210c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800210c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002110:	b090      	sub	sp, #64	; 0x40
 8002112:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002114:	2300      	movs	r3, #0
 8002116:	637b      	str	r3, [r7, #52]	; 0x34
 8002118:	2300      	movs	r3, #0
 800211a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800211c:	2300      	movs	r3, #0
 800211e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002120:	2300      	movs	r3, #0
 8002122:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002124:	4b59      	ldr	r3, [pc, #356]	; (800228c <HAL_RCC_GetSysClockFreq+0x180>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f003 030c 	and.w	r3, r3, #12
 800212c:	2b08      	cmp	r3, #8
 800212e:	d00d      	beq.n	800214c <HAL_RCC_GetSysClockFreq+0x40>
 8002130:	2b08      	cmp	r3, #8
 8002132:	f200 80a1 	bhi.w	8002278 <HAL_RCC_GetSysClockFreq+0x16c>
 8002136:	2b00      	cmp	r3, #0
 8002138:	d002      	beq.n	8002140 <HAL_RCC_GetSysClockFreq+0x34>
 800213a:	2b04      	cmp	r3, #4
 800213c:	d003      	beq.n	8002146 <HAL_RCC_GetSysClockFreq+0x3a>
 800213e:	e09b      	b.n	8002278 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002140:	4b53      	ldr	r3, [pc, #332]	; (8002290 <HAL_RCC_GetSysClockFreq+0x184>)
 8002142:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002144:	e09b      	b.n	800227e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002146:	4b53      	ldr	r3, [pc, #332]	; (8002294 <HAL_RCC_GetSysClockFreq+0x188>)
 8002148:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800214a:	e098      	b.n	800227e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800214c:	4b4f      	ldr	r3, [pc, #316]	; (800228c <HAL_RCC_GetSysClockFreq+0x180>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002154:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002156:	4b4d      	ldr	r3, [pc, #308]	; (800228c <HAL_RCC_GetSysClockFreq+0x180>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d028      	beq.n	80021b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002162:	4b4a      	ldr	r3, [pc, #296]	; (800228c <HAL_RCC_GetSysClockFreq+0x180>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	099b      	lsrs	r3, r3, #6
 8002168:	2200      	movs	r2, #0
 800216a:	623b      	str	r3, [r7, #32]
 800216c:	627a      	str	r2, [r7, #36]	; 0x24
 800216e:	6a3b      	ldr	r3, [r7, #32]
 8002170:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002174:	2100      	movs	r1, #0
 8002176:	4b47      	ldr	r3, [pc, #284]	; (8002294 <HAL_RCC_GetSysClockFreq+0x188>)
 8002178:	fb03 f201 	mul.w	r2, r3, r1
 800217c:	2300      	movs	r3, #0
 800217e:	fb00 f303 	mul.w	r3, r0, r3
 8002182:	4413      	add	r3, r2
 8002184:	4a43      	ldr	r2, [pc, #268]	; (8002294 <HAL_RCC_GetSysClockFreq+0x188>)
 8002186:	fba0 1202 	umull	r1, r2, r0, r2
 800218a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800218c:	460a      	mov	r2, r1
 800218e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002192:	4413      	add	r3, r2
 8002194:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002198:	2200      	movs	r2, #0
 800219a:	61bb      	str	r3, [r7, #24]
 800219c:	61fa      	str	r2, [r7, #28]
 800219e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80021a6:	f7fe f847 	bl	8000238 <__aeabi_uldivmod>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	4613      	mov	r3, r2
 80021b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021b2:	e053      	b.n	800225c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021b4:	4b35      	ldr	r3, [pc, #212]	; (800228c <HAL_RCC_GetSysClockFreq+0x180>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	099b      	lsrs	r3, r3, #6
 80021ba:	2200      	movs	r2, #0
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	617a      	str	r2, [r7, #20]
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80021c6:	f04f 0b00 	mov.w	fp, #0
 80021ca:	4652      	mov	r2, sl
 80021cc:	465b      	mov	r3, fp
 80021ce:	f04f 0000 	mov.w	r0, #0
 80021d2:	f04f 0100 	mov.w	r1, #0
 80021d6:	0159      	lsls	r1, r3, #5
 80021d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021dc:	0150      	lsls	r0, r2, #5
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	ebb2 080a 	subs.w	r8, r2, sl
 80021e6:	eb63 090b 	sbc.w	r9, r3, fp
 80021ea:	f04f 0200 	mov.w	r2, #0
 80021ee:	f04f 0300 	mov.w	r3, #0
 80021f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80021f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80021fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80021fe:	ebb2 0408 	subs.w	r4, r2, r8
 8002202:	eb63 0509 	sbc.w	r5, r3, r9
 8002206:	f04f 0200 	mov.w	r2, #0
 800220a:	f04f 0300 	mov.w	r3, #0
 800220e:	00eb      	lsls	r3, r5, #3
 8002210:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002214:	00e2      	lsls	r2, r4, #3
 8002216:	4614      	mov	r4, r2
 8002218:	461d      	mov	r5, r3
 800221a:	eb14 030a 	adds.w	r3, r4, sl
 800221e:	603b      	str	r3, [r7, #0]
 8002220:	eb45 030b 	adc.w	r3, r5, fp
 8002224:	607b      	str	r3, [r7, #4]
 8002226:	f04f 0200 	mov.w	r2, #0
 800222a:	f04f 0300 	mov.w	r3, #0
 800222e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002232:	4629      	mov	r1, r5
 8002234:	028b      	lsls	r3, r1, #10
 8002236:	4621      	mov	r1, r4
 8002238:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800223c:	4621      	mov	r1, r4
 800223e:	028a      	lsls	r2, r1, #10
 8002240:	4610      	mov	r0, r2
 8002242:	4619      	mov	r1, r3
 8002244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002246:	2200      	movs	r2, #0
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	60fa      	str	r2, [r7, #12]
 800224c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002250:	f7fd fff2 	bl	8000238 <__aeabi_uldivmod>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4613      	mov	r3, r2
 800225a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800225c:	4b0b      	ldr	r3, [pc, #44]	; (800228c <HAL_RCC_GetSysClockFreq+0x180>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	0c1b      	lsrs	r3, r3, #16
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	3301      	adds	r3, #1
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800226c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800226e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002270:	fbb2 f3f3 	udiv	r3, r2, r3
 8002274:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002276:	e002      	b.n	800227e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002278:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_RCC_GetSysClockFreq+0x184>)
 800227a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800227c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800227e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002280:	4618      	mov	r0, r3
 8002282:	3740      	adds	r7, #64	; 0x40
 8002284:	46bd      	mov	sp, r7
 8002286:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800228a:	bf00      	nop
 800228c:	40023800 	.word	0x40023800
 8002290:	00f42400 	.word	0x00f42400
 8002294:	017d7840 	.word	0x017d7840

08002298 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d001      	beq.n	80022b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e04c      	b.n	800234a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2202      	movs	r2, #2
 80022b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a26      	ldr	r2, [pc, #152]	; (8002358 <HAL_TIM_Base_Start+0xc0>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d022      	beq.n	8002308 <HAL_TIM_Base_Start+0x70>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ca:	d01d      	beq.n	8002308 <HAL_TIM_Base_Start+0x70>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a22      	ldr	r2, [pc, #136]	; (800235c <HAL_TIM_Base_Start+0xc4>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d018      	beq.n	8002308 <HAL_TIM_Base_Start+0x70>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a21      	ldr	r2, [pc, #132]	; (8002360 <HAL_TIM_Base_Start+0xc8>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d013      	beq.n	8002308 <HAL_TIM_Base_Start+0x70>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a1f      	ldr	r2, [pc, #124]	; (8002364 <HAL_TIM_Base_Start+0xcc>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d00e      	beq.n	8002308 <HAL_TIM_Base_Start+0x70>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a1e      	ldr	r2, [pc, #120]	; (8002368 <HAL_TIM_Base_Start+0xd0>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d009      	beq.n	8002308 <HAL_TIM_Base_Start+0x70>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a1c      	ldr	r2, [pc, #112]	; (800236c <HAL_TIM_Base_Start+0xd4>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d004      	beq.n	8002308 <HAL_TIM_Base_Start+0x70>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a1b      	ldr	r2, [pc, #108]	; (8002370 <HAL_TIM_Base_Start+0xd8>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d115      	bne.n	8002334 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	4b19      	ldr	r3, [pc, #100]	; (8002374 <HAL_TIM_Base_Start+0xdc>)
 8002310:	4013      	ands	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2b06      	cmp	r3, #6
 8002318:	d015      	beq.n	8002346 <HAL_TIM_Base_Start+0xae>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002320:	d011      	beq.n	8002346 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f042 0201 	orr.w	r2, r2, #1
 8002330:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002332:	e008      	b.n	8002346 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f042 0201 	orr.w	r2, r2, #1
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	e000      	b.n	8002348 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002346:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	40010000 	.word	0x40010000
 800235c:	40000400 	.word	0x40000400
 8002360:	40000800 	.word	0x40000800
 8002364:	40000c00 	.word	0x40000c00
 8002368:	40010400 	.word	0x40010400
 800236c:	40014000 	.word	0x40014000
 8002370:	40001800 	.word	0x40001800
 8002374:	00010007 	.word	0x00010007

08002378 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e049      	b.n	800241e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d106      	bne.n	80023a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7fe fb32 	bl	8000a08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2202      	movs	r2, #2
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3304      	adds	r3, #4
 80023b4:	4619      	mov	r1, r3
 80023b6:	4610      	mov	r0, r2
 80023b8:	f000 fa44 	bl	8002844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
	...

08002428 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d109      	bne.n	800244c <HAL_TIM_PWM_Start+0x24>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b01      	cmp	r3, #1
 8002442:	bf14      	ite	ne
 8002444:	2301      	movne	r3, #1
 8002446:	2300      	moveq	r3, #0
 8002448:	b2db      	uxtb	r3, r3
 800244a:	e03c      	b.n	80024c6 <HAL_TIM_PWM_Start+0x9e>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	2b04      	cmp	r3, #4
 8002450:	d109      	bne.n	8002466 <HAL_TIM_PWM_Start+0x3e>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b01      	cmp	r3, #1
 800245c:	bf14      	ite	ne
 800245e:	2301      	movne	r3, #1
 8002460:	2300      	moveq	r3, #0
 8002462:	b2db      	uxtb	r3, r3
 8002464:	e02f      	b.n	80024c6 <HAL_TIM_PWM_Start+0x9e>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	2b08      	cmp	r3, #8
 800246a:	d109      	bne.n	8002480 <HAL_TIM_PWM_Start+0x58>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b01      	cmp	r3, #1
 8002476:	bf14      	ite	ne
 8002478:	2301      	movne	r3, #1
 800247a:	2300      	moveq	r3, #0
 800247c:	b2db      	uxtb	r3, r3
 800247e:	e022      	b.n	80024c6 <HAL_TIM_PWM_Start+0x9e>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	2b0c      	cmp	r3, #12
 8002484:	d109      	bne.n	800249a <HAL_TIM_PWM_Start+0x72>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b01      	cmp	r3, #1
 8002490:	bf14      	ite	ne
 8002492:	2301      	movne	r3, #1
 8002494:	2300      	moveq	r3, #0
 8002496:	b2db      	uxtb	r3, r3
 8002498:	e015      	b.n	80024c6 <HAL_TIM_PWM_Start+0x9e>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	2b10      	cmp	r3, #16
 800249e:	d109      	bne.n	80024b4 <HAL_TIM_PWM_Start+0x8c>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	bf14      	ite	ne
 80024ac:	2301      	movne	r3, #1
 80024ae:	2300      	moveq	r3, #0
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	e008      	b.n	80024c6 <HAL_TIM_PWM_Start+0x9e>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b01      	cmp	r3, #1
 80024be:	bf14      	ite	ne
 80024c0:	2301      	movne	r3, #1
 80024c2:	2300      	moveq	r3, #0
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e092      	b.n	80025f4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d104      	bne.n	80024de <HAL_TIM_PWM_Start+0xb6>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2202      	movs	r2, #2
 80024d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024dc:	e023      	b.n	8002526 <HAL_TIM_PWM_Start+0xfe>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d104      	bne.n	80024ee <HAL_TIM_PWM_Start+0xc6>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024ec:	e01b      	b.n	8002526 <HAL_TIM_PWM_Start+0xfe>
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d104      	bne.n	80024fe <HAL_TIM_PWM_Start+0xd6>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2202      	movs	r2, #2
 80024f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024fc:	e013      	b.n	8002526 <HAL_TIM_PWM_Start+0xfe>
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	2b0c      	cmp	r3, #12
 8002502:	d104      	bne.n	800250e <HAL_TIM_PWM_Start+0xe6>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2202      	movs	r2, #2
 8002508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800250c:	e00b      	b.n	8002526 <HAL_TIM_PWM_Start+0xfe>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	2b10      	cmp	r3, #16
 8002512:	d104      	bne.n	800251e <HAL_TIM_PWM_Start+0xf6>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2202      	movs	r2, #2
 8002518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800251c:	e003      	b.n	8002526 <HAL_TIM_PWM_Start+0xfe>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2202      	movs	r2, #2
 8002522:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2201      	movs	r2, #1
 800252c:	6839      	ldr	r1, [r7, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f000 fc86 	bl	8002e40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a30      	ldr	r2, [pc, #192]	; (80025fc <HAL_TIM_PWM_Start+0x1d4>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d004      	beq.n	8002548 <HAL_TIM_PWM_Start+0x120>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a2f      	ldr	r2, [pc, #188]	; (8002600 <HAL_TIM_PWM_Start+0x1d8>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d101      	bne.n	800254c <HAL_TIM_PWM_Start+0x124>
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <HAL_TIM_PWM_Start+0x126>
 800254c:	2300      	movs	r3, #0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d007      	beq.n	8002562 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002560:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a25      	ldr	r2, [pc, #148]	; (80025fc <HAL_TIM_PWM_Start+0x1d4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d022      	beq.n	80025b2 <HAL_TIM_PWM_Start+0x18a>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002574:	d01d      	beq.n	80025b2 <HAL_TIM_PWM_Start+0x18a>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a22      	ldr	r2, [pc, #136]	; (8002604 <HAL_TIM_PWM_Start+0x1dc>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d018      	beq.n	80025b2 <HAL_TIM_PWM_Start+0x18a>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a20      	ldr	r2, [pc, #128]	; (8002608 <HAL_TIM_PWM_Start+0x1e0>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d013      	beq.n	80025b2 <HAL_TIM_PWM_Start+0x18a>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a1f      	ldr	r2, [pc, #124]	; (800260c <HAL_TIM_PWM_Start+0x1e4>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d00e      	beq.n	80025b2 <HAL_TIM_PWM_Start+0x18a>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a19      	ldr	r2, [pc, #100]	; (8002600 <HAL_TIM_PWM_Start+0x1d8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d009      	beq.n	80025b2 <HAL_TIM_PWM_Start+0x18a>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a1b      	ldr	r2, [pc, #108]	; (8002610 <HAL_TIM_PWM_Start+0x1e8>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d004      	beq.n	80025b2 <HAL_TIM_PWM_Start+0x18a>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a19      	ldr	r2, [pc, #100]	; (8002614 <HAL_TIM_PWM_Start+0x1ec>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d115      	bne.n	80025de <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	4b17      	ldr	r3, [pc, #92]	; (8002618 <HAL_TIM_PWM_Start+0x1f0>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2b06      	cmp	r3, #6
 80025c2:	d015      	beq.n	80025f0 <HAL_TIM_PWM_Start+0x1c8>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ca:	d011      	beq.n	80025f0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0201 	orr.w	r2, r2, #1
 80025da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025dc:	e008      	b.n	80025f0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f042 0201 	orr.w	r2, r2, #1
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	e000      	b.n	80025f2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40010000 	.word	0x40010000
 8002600:	40010400 	.word	0x40010400
 8002604:	40000400 	.word	0x40000400
 8002608:	40000800 	.word	0x40000800
 800260c:	40000c00 	.word	0x40000c00
 8002610:	40014000 	.word	0x40014000
 8002614:	40001800 	.word	0x40001800
 8002618:	00010007 	.word	0x00010007

0800261c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002628:	2300      	movs	r3, #0
 800262a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002636:	2302      	movs	r3, #2
 8002638:	e0ff      	b.n	800283a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b14      	cmp	r3, #20
 8002646:	f200 80f0 	bhi.w	800282a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800264a:	a201      	add	r2, pc, #4	; (adr r2, 8002650 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800264c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002650:	080026a5 	.word	0x080026a5
 8002654:	0800282b 	.word	0x0800282b
 8002658:	0800282b 	.word	0x0800282b
 800265c:	0800282b 	.word	0x0800282b
 8002660:	080026e5 	.word	0x080026e5
 8002664:	0800282b 	.word	0x0800282b
 8002668:	0800282b 	.word	0x0800282b
 800266c:	0800282b 	.word	0x0800282b
 8002670:	08002727 	.word	0x08002727
 8002674:	0800282b 	.word	0x0800282b
 8002678:	0800282b 	.word	0x0800282b
 800267c:	0800282b 	.word	0x0800282b
 8002680:	08002767 	.word	0x08002767
 8002684:	0800282b 	.word	0x0800282b
 8002688:	0800282b 	.word	0x0800282b
 800268c:	0800282b 	.word	0x0800282b
 8002690:	080027a9 	.word	0x080027a9
 8002694:	0800282b 	.word	0x0800282b
 8002698:	0800282b 	.word	0x0800282b
 800269c:	0800282b 	.word	0x0800282b
 80026a0:	080027e9 	.word	0x080027e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68b9      	ldr	r1, [r7, #8]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 f96a 	bl	8002984 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	699a      	ldr	r2, [r3, #24]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0208 	orr.w	r2, r2, #8
 80026be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699a      	ldr	r2, [r3, #24]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0204 	bic.w	r2, r2, #4
 80026ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6999      	ldr	r1, [r3, #24]
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	691a      	ldr	r2, [r3, #16]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	619a      	str	r2, [r3, #24]
      break;
 80026e2:	e0a5      	b.n	8002830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68b9      	ldr	r1, [r7, #8]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 f9bc 	bl	8002a68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	699a      	ldr	r2, [r3, #24]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699a      	ldr	r2, [r3, #24]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800270e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6999      	ldr	r1, [r3, #24]
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	021a      	lsls	r2, r3, #8
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	430a      	orrs	r2, r1
 8002722:	619a      	str	r2, [r3, #24]
      break;
 8002724:	e084      	b.n	8002830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68b9      	ldr	r1, [r7, #8]
 800272c:	4618      	mov	r0, r3
 800272e:	f000 fa13 	bl	8002b58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	69da      	ldr	r2, [r3, #28]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f042 0208 	orr.w	r2, r2, #8
 8002740:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	69da      	ldr	r2, [r3, #28]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0204 	bic.w	r2, r2, #4
 8002750:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	69d9      	ldr	r1, [r3, #28]
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	691a      	ldr	r2, [r3, #16]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	61da      	str	r2, [r3, #28]
      break;
 8002764:	e064      	b.n	8002830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68b9      	ldr	r1, [r7, #8]
 800276c:	4618      	mov	r0, r3
 800276e:	f000 fa69 	bl	8002c44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	69da      	ldr	r2, [r3, #28]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002780:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	69da      	ldr	r2, [r3, #28]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002790:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	69d9      	ldr	r1, [r3, #28]
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	021a      	lsls	r2, r3, #8
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	61da      	str	r2, [r3, #28]
      break;
 80027a6:	e043      	b.n	8002830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68b9      	ldr	r1, [r7, #8]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 faa0 	bl	8002cf4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0208 	orr.w	r2, r2, #8
 80027c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 0204 	bic.w	r2, r2, #4
 80027d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	691a      	ldr	r2, [r3, #16]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80027e6:	e023      	b.n	8002830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68b9      	ldr	r1, [r7, #8]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 fad2 	bl	8002d98 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002802:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002812:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	021a      	lsls	r2, r3, #8
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002828:	e002      	b.n	8002830 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	75fb      	strb	r3, [r7, #23]
      break;
 800282e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002838:	7dfb      	ldrb	r3, [r7, #23]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop

08002844 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a40      	ldr	r2, [pc, #256]	; (8002958 <TIM_Base_SetConfig+0x114>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d013      	beq.n	8002884 <TIM_Base_SetConfig+0x40>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002862:	d00f      	beq.n	8002884 <TIM_Base_SetConfig+0x40>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a3d      	ldr	r2, [pc, #244]	; (800295c <TIM_Base_SetConfig+0x118>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d00b      	beq.n	8002884 <TIM_Base_SetConfig+0x40>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a3c      	ldr	r2, [pc, #240]	; (8002960 <TIM_Base_SetConfig+0x11c>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d007      	beq.n	8002884 <TIM_Base_SetConfig+0x40>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a3b      	ldr	r2, [pc, #236]	; (8002964 <TIM_Base_SetConfig+0x120>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d003      	beq.n	8002884 <TIM_Base_SetConfig+0x40>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a3a      	ldr	r2, [pc, #232]	; (8002968 <TIM_Base_SetConfig+0x124>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d108      	bne.n	8002896 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800288a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	4313      	orrs	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a2f      	ldr	r2, [pc, #188]	; (8002958 <TIM_Base_SetConfig+0x114>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d02b      	beq.n	80028f6 <TIM_Base_SetConfig+0xb2>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a4:	d027      	beq.n	80028f6 <TIM_Base_SetConfig+0xb2>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a2c      	ldr	r2, [pc, #176]	; (800295c <TIM_Base_SetConfig+0x118>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d023      	beq.n	80028f6 <TIM_Base_SetConfig+0xb2>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a2b      	ldr	r2, [pc, #172]	; (8002960 <TIM_Base_SetConfig+0x11c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d01f      	beq.n	80028f6 <TIM_Base_SetConfig+0xb2>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a2a      	ldr	r2, [pc, #168]	; (8002964 <TIM_Base_SetConfig+0x120>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d01b      	beq.n	80028f6 <TIM_Base_SetConfig+0xb2>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a29      	ldr	r2, [pc, #164]	; (8002968 <TIM_Base_SetConfig+0x124>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d017      	beq.n	80028f6 <TIM_Base_SetConfig+0xb2>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a28      	ldr	r2, [pc, #160]	; (800296c <TIM_Base_SetConfig+0x128>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d013      	beq.n	80028f6 <TIM_Base_SetConfig+0xb2>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a27      	ldr	r2, [pc, #156]	; (8002970 <TIM_Base_SetConfig+0x12c>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d00f      	beq.n	80028f6 <TIM_Base_SetConfig+0xb2>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a26      	ldr	r2, [pc, #152]	; (8002974 <TIM_Base_SetConfig+0x130>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d00b      	beq.n	80028f6 <TIM_Base_SetConfig+0xb2>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a25      	ldr	r2, [pc, #148]	; (8002978 <TIM_Base_SetConfig+0x134>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d007      	beq.n	80028f6 <TIM_Base_SetConfig+0xb2>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a24      	ldr	r2, [pc, #144]	; (800297c <TIM_Base_SetConfig+0x138>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d003      	beq.n	80028f6 <TIM_Base_SetConfig+0xb2>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a23      	ldr	r2, [pc, #140]	; (8002980 <TIM_Base_SetConfig+0x13c>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d108      	bne.n	8002908 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	4313      	orrs	r3, r2
 8002906:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	4313      	orrs	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a0a      	ldr	r2, [pc, #40]	; (8002958 <TIM_Base_SetConfig+0x114>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d003      	beq.n	800293c <TIM_Base_SetConfig+0xf8>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a0c      	ldr	r2, [pc, #48]	; (8002968 <TIM_Base_SetConfig+0x124>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d103      	bne.n	8002944 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	691a      	ldr	r2, [r3, #16]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	615a      	str	r2, [r3, #20]
}
 800294a:	bf00      	nop
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	40010000 	.word	0x40010000
 800295c:	40000400 	.word	0x40000400
 8002960:	40000800 	.word	0x40000800
 8002964:	40000c00 	.word	0x40000c00
 8002968:	40010400 	.word	0x40010400
 800296c:	40014000 	.word	0x40014000
 8002970:	40014400 	.word	0x40014400
 8002974:	40014800 	.word	0x40014800
 8002978:	40001800 	.word	0x40001800
 800297c:	40001c00 	.word	0x40001c00
 8002980:	40002000 	.word	0x40002000

08002984 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002984:	b480      	push	{r7}
 8002986:	b087      	sub	sp, #28
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	f023 0201 	bic.w	r2, r3, #1
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	4b2b      	ldr	r3, [pc, #172]	; (8002a5c <TIM_OC1_SetConfig+0xd8>)
 80029b0:	4013      	ands	r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f023 0303 	bic.w	r3, r3, #3
 80029ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f023 0302 	bic.w	r3, r3, #2
 80029cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a21      	ldr	r2, [pc, #132]	; (8002a60 <TIM_OC1_SetConfig+0xdc>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d003      	beq.n	80029e8 <TIM_OC1_SetConfig+0x64>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a20      	ldr	r2, [pc, #128]	; (8002a64 <TIM_OC1_SetConfig+0xe0>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d10c      	bne.n	8002a02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f023 0308 	bic.w	r3, r3, #8
 80029ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f023 0304 	bic.w	r3, r3, #4
 8002a00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a16      	ldr	r2, [pc, #88]	; (8002a60 <TIM_OC1_SetConfig+0xdc>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d003      	beq.n	8002a12 <TIM_OC1_SetConfig+0x8e>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a15      	ldr	r2, [pc, #84]	; (8002a64 <TIM_OC1_SetConfig+0xe0>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d111      	bne.n	8002a36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	621a      	str	r2, [r3, #32]
}
 8002a50:	bf00      	nop
 8002a52:	371c      	adds	r7, #28
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	fffeff8f 	.word	0xfffeff8f
 8002a60:	40010000 	.word	0x40010000
 8002a64:	40010400 	.word	0x40010400

08002a68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b087      	sub	sp, #28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	f023 0210 	bic.w	r2, r3, #16
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	4b2e      	ldr	r3, [pc, #184]	; (8002b4c <TIM_OC2_SetConfig+0xe4>)
 8002a94:	4013      	ands	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	021b      	lsls	r3, r3, #8
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f023 0320 	bic.w	r3, r3, #32
 8002ab2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	011b      	lsls	r3, r3, #4
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a23      	ldr	r2, [pc, #140]	; (8002b50 <TIM_OC2_SetConfig+0xe8>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d003      	beq.n	8002ad0 <TIM_OC2_SetConfig+0x68>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a22      	ldr	r2, [pc, #136]	; (8002b54 <TIM_OC2_SetConfig+0xec>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d10d      	bne.n	8002aec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ad6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	011b      	lsls	r3, r3, #4
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002aea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a18      	ldr	r2, [pc, #96]	; (8002b50 <TIM_OC2_SetConfig+0xe8>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d003      	beq.n	8002afc <TIM_OC2_SetConfig+0x94>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a17      	ldr	r2, [pc, #92]	; (8002b54 <TIM_OC2_SetConfig+0xec>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d113      	bne.n	8002b24 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	621a      	str	r2, [r3, #32]
}
 8002b3e:	bf00      	nop
 8002b40:	371c      	adds	r7, #28
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	feff8fff 	.word	0xfeff8fff
 8002b50:	40010000 	.word	0x40010000
 8002b54:	40010400 	.word	0x40010400

08002b58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b087      	sub	sp, #28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	4b2d      	ldr	r3, [pc, #180]	; (8002c38 <TIM_OC3_SetConfig+0xe0>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f023 0303 	bic.w	r3, r3, #3
 8002b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	021b      	lsls	r3, r3, #8
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a22      	ldr	r2, [pc, #136]	; (8002c3c <TIM_OC3_SetConfig+0xe4>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d003      	beq.n	8002bbe <TIM_OC3_SetConfig+0x66>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a21      	ldr	r2, [pc, #132]	; (8002c40 <TIM_OC3_SetConfig+0xe8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d10d      	bne.n	8002bda <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	021b      	lsls	r3, r3, #8
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a17      	ldr	r2, [pc, #92]	; (8002c3c <TIM_OC3_SetConfig+0xe4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d003      	beq.n	8002bea <TIM_OC3_SetConfig+0x92>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a16      	ldr	r2, [pc, #88]	; (8002c40 <TIM_OC3_SetConfig+0xe8>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d113      	bne.n	8002c12 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	011b      	lsls	r3, r3, #4
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	621a      	str	r2, [r3, #32]
}
 8002c2c:	bf00      	nop
 8002c2e:	371c      	adds	r7, #28
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	fffeff8f 	.word	0xfffeff8f
 8002c3c:	40010000 	.word	0x40010000
 8002c40:	40010400 	.word	0x40010400

08002c44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b087      	sub	sp, #28
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	4b1e      	ldr	r3, [pc, #120]	; (8002ce8 <TIM_OC4_SetConfig+0xa4>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	021b      	lsls	r3, r3, #8
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	031b      	lsls	r3, r3, #12
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a13      	ldr	r2, [pc, #76]	; (8002cec <TIM_OC4_SetConfig+0xa8>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d003      	beq.n	8002cac <TIM_OC4_SetConfig+0x68>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a12      	ldr	r2, [pc, #72]	; (8002cf0 <TIM_OC4_SetConfig+0xac>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d109      	bne.n	8002cc0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	019b      	lsls	r3, r3, #6
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	621a      	str	r2, [r3, #32]
}
 8002cda:	bf00      	nop
 8002cdc:	371c      	adds	r7, #28
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	feff8fff 	.word	0xfeff8fff
 8002cec:	40010000 	.word	0x40010000
 8002cf0:	40010400 	.word	0x40010400

08002cf4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b087      	sub	sp, #28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4b1b      	ldr	r3, [pc, #108]	; (8002d8c <TIM_OC5_SetConfig+0x98>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002d34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	041b      	lsls	r3, r3, #16
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a12      	ldr	r2, [pc, #72]	; (8002d90 <TIM_OC5_SetConfig+0x9c>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d003      	beq.n	8002d52 <TIM_OC5_SetConfig+0x5e>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a11      	ldr	r2, [pc, #68]	; (8002d94 <TIM_OC5_SetConfig+0xa0>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d109      	bne.n	8002d66 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	021b      	lsls	r3, r3, #8
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	621a      	str	r2, [r3, #32]
}
 8002d80:	bf00      	nop
 8002d82:	371c      	adds	r7, #28
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	fffeff8f 	.word	0xfffeff8f
 8002d90:	40010000 	.word	0x40010000
 8002d94:	40010400 	.word	0x40010400

08002d98 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	4b1c      	ldr	r3, [pc, #112]	; (8002e34 <TIM_OC6_SetConfig+0x9c>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	021b      	lsls	r3, r3, #8
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002dda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	051b      	lsls	r3, r3, #20
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a13      	ldr	r2, [pc, #76]	; (8002e38 <TIM_OC6_SetConfig+0xa0>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d003      	beq.n	8002df8 <TIM_OC6_SetConfig+0x60>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a12      	ldr	r2, [pc, #72]	; (8002e3c <TIM_OC6_SetConfig+0xa4>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d109      	bne.n	8002e0c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dfe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	029b      	lsls	r3, r3, #10
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	621a      	str	r2, [r3, #32]
}
 8002e26:	bf00      	nop
 8002e28:	371c      	adds	r7, #28
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	feff8fff 	.word	0xfeff8fff
 8002e38:	40010000 	.word	0x40010000
 8002e3c:	40010400 	.word	0x40010400

08002e40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b087      	sub	sp, #28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	f003 031f 	and.w	r3, r3, #31
 8002e52:	2201      	movs	r2, #1
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6a1a      	ldr	r2, [r3, #32]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	43db      	mvns	r3, r3
 8002e62:	401a      	ands	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6a1a      	ldr	r2, [r3, #32]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f003 031f 	and.w	r3, r3, #31
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	fa01 f303 	lsl.w	r3, r1, r3
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	621a      	str	r2, [r3, #32]
}
 8002e7e:	bf00      	nop
 8002e80:	371c      	adds	r7, #28
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
	...

08002e8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d101      	bne.n	8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	e06d      	b.n	8002f80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2202      	movs	r2, #2
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a30      	ldr	r2, [pc, #192]	; (8002f8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d004      	beq.n	8002ed8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a2f      	ldr	r2, [pc, #188]	; (8002f90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d108      	bne.n	8002eea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002ede:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ef0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a20      	ldr	r2, [pc, #128]	; (8002f8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d022      	beq.n	8002f54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f16:	d01d      	beq.n	8002f54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a1d      	ldr	r2, [pc, #116]	; (8002f94 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d018      	beq.n	8002f54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a1c      	ldr	r2, [pc, #112]	; (8002f98 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d013      	beq.n	8002f54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a1a      	ldr	r2, [pc, #104]	; (8002f9c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d00e      	beq.n	8002f54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a15      	ldr	r2, [pc, #84]	; (8002f90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d009      	beq.n	8002f54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a16      	ldr	r2, [pc, #88]	; (8002fa0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d004      	beq.n	8002f54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a15      	ldr	r2, [pc, #84]	; (8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d10c      	bne.n	8002f6e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	40010000 	.word	0x40010000
 8002f90:	40010400 	.word	0x40010400
 8002f94:	40000400 	.word	0x40000400
 8002f98:	40000800 	.word	0x40000800
 8002f9c:	40000c00 	.word	0x40000c00
 8002fa0:	40014000 	.word	0x40014000
 8002fa4:	40001800 	.word	0x40001800

08002fa8 <memset>:
 8002fa8:	4402      	add	r2, r0
 8002faa:	4603      	mov	r3, r0
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d100      	bne.n	8002fb2 <memset+0xa>
 8002fb0:	4770      	bx	lr
 8002fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8002fb6:	e7f9      	b.n	8002fac <memset+0x4>

08002fb8 <__libc_init_array>:
 8002fb8:	b570      	push	{r4, r5, r6, lr}
 8002fba:	4d0d      	ldr	r5, [pc, #52]	; (8002ff0 <__libc_init_array+0x38>)
 8002fbc:	4c0d      	ldr	r4, [pc, #52]	; (8002ff4 <__libc_init_array+0x3c>)
 8002fbe:	1b64      	subs	r4, r4, r5
 8002fc0:	10a4      	asrs	r4, r4, #2
 8002fc2:	2600      	movs	r6, #0
 8002fc4:	42a6      	cmp	r6, r4
 8002fc6:	d109      	bne.n	8002fdc <__libc_init_array+0x24>
 8002fc8:	4d0b      	ldr	r5, [pc, #44]	; (8002ff8 <__libc_init_array+0x40>)
 8002fca:	4c0c      	ldr	r4, [pc, #48]	; (8002ffc <__libc_init_array+0x44>)
 8002fcc:	f000 f818 	bl	8003000 <_init>
 8002fd0:	1b64      	subs	r4, r4, r5
 8002fd2:	10a4      	asrs	r4, r4, #2
 8002fd4:	2600      	movs	r6, #0
 8002fd6:	42a6      	cmp	r6, r4
 8002fd8:	d105      	bne.n	8002fe6 <__libc_init_array+0x2e>
 8002fda:	bd70      	pop	{r4, r5, r6, pc}
 8002fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fe0:	4798      	blx	r3
 8002fe2:	3601      	adds	r6, #1
 8002fe4:	e7ee      	b.n	8002fc4 <__libc_init_array+0xc>
 8002fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fea:	4798      	blx	r3
 8002fec:	3601      	adds	r6, #1
 8002fee:	e7f2      	b.n	8002fd6 <__libc_init_array+0x1e>
 8002ff0:	08003030 	.word	0x08003030
 8002ff4:	08003030 	.word	0x08003030
 8002ff8:	08003030 	.word	0x08003030
 8002ffc:	08003034 	.word	0x08003034

08003000 <_init>:
 8003000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003002:	bf00      	nop
 8003004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003006:	bc08      	pop	{r3}
 8003008:	469e      	mov	lr, r3
 800300a:	4770      	bx	lr

0800300c <_fini>:
 800300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300e:	bf00      	nop
 8003010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003012:	bc08      	pop	{r3}
 8003014:	469e      	mov	lr, r3
 8003016:	4770      	bx	lr
