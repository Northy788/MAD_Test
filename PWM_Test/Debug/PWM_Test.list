
PWM_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f38  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08009138  08009138  00019138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095a8  080095a8  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  080095a8  080095a8  000195a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095b0  080095b0  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095b0  080095b0  000195b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095b4  080095b4  000195b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080095b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  200001d4  0800978c  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000470  0800978c  00020470  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020202  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010103  00000000  00000000  00020245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002450  00000000  00000000  00030348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e50  00000000  00000000  00032798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b1d  00000000  00000000  000335e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029819  00000000  00000000  00034105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001244d  00000000  00000000  0005d91e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001021d7  00000000  00000000  0006fd6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e88  00000000  00000000  00171f44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00176dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d4 	.word	0x200001d4
 800021c:	00000000 	.word	0x00000000
 8000220:	08009120 	.word	0x08009120

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d8 	.word	0x200001d8
 800023c:	08009120 	.word	0x08009120

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000678:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800067c:	f000 b9a8 	b.w	80009d0 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9e08      	ldr	r6, [sp, #32]
 800070e:	460d      	mov	r5, r1
 8000710:	4604      	mov	r4, r0
 8000712:	460f      	mov	r7, r1
 8000714:	2b00      	cmp	r3, #0
 8000716:	d14a      	bne.n	80007ae <__udivmoddi4+0xa6>
 8000718:	428a      	cmp	r2, r1
 800071a:	4694      	mov	ip, r2
 800071c:	d965      	bls.n	80007ea <__udivmoddi4+0xe2>
 800071e:	fab2 f382 	clz	r3, r2
 8000722:	b143      	cbz	r3, 8000736 <__udivmoddi4+0x2e>
 8000724:	fa02 fc03 	lsl.w	ip, r2, r3
 8000728:	f1c3 0220 	rsb	r2, r3, #32
 800072c:	409f      	lsls	r7, r3
 800072e:	fa20 f202 	lsr.w	r2, r0, r2
 8000732:	4317      	orrs	r7, r2
 8000734:	409c      	lsls	r4, r3
 8000736:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800073a:	fa1f f58c 	uxth.w	r5, ip
 800073e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000742:	0c22      	lsrs	r2, r4, #16
 8000744:	fb0e 7711 	mls	r7, lr, r1, r7
 8000748:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800074c:	fb01 f005 	mul.w	r0, r1, r5
 8000750:	4290      	cmp	r0, r2
 8000752:	d90a      	bls.n	800076a <__udivmoddi4+0x62>
 8000754:	eb1c 0202 	adds.w	r2, ip, r2
 8000758:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800075c:	f080 811c 	bcs.w	8000998 <__udivmoddi4+0x290>
 8000760:	4290      	cmp	r0, r2
 8000762:	f240 8119 	bls.w	8000998 <__udivmoddi4+0x290>
 8000766:	3902      	subs	r1, #2
 8000768:	4462      	add	r2, ip
 800076a:	1a12      	subs	r2, r2, r0
 800076c:	b2a4      	uxth	r4, r4
 800076e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000772:	fb0e 2210 	mls	r2, lr, r0, r2
 8000776:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800077a:	fb00 f505 	mul.w	r5, r0, r5
 800077e:	42a5      	cmp	r5, r4
 8000780:	d90a      	bls.n	8000798 <__udivmoddi4+0x90>
 8000782:	eb1c 0404 	adds.w	r4, ip, r4
 8000786:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800078a:	f080 8107 	bcs.w	800099c <__udivmoddi4+0x294>
 800078e:	42a5      	cmp	r5, r4
 8000790:	f240 8104 	bls.w	800099c <__udivmoddi4+0x294>
 8000794:	4464      	add	r4, ip
 8000796:	3802      	subs	r0, #2
 8000798:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800079c:	1b64      	subs	r4, r4, r5
 800079e:	2100      	movs	r1, #0
 80007a0:	b11e      	cbz	r6, 80007aa <__udivmoddi4+0xa2>
 80007a2:	40dc      	lsrs	r4, r3
 80007a4:	2300      	movs	r3, #0
 80007a6:	e9c6 4300 	strd	r4, r3, [r6]
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d908      	bls.n	80007c4 <__udivmoddi4+0xbc>
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	f000 80ed 	beq.w	8000992 <__udivmoddi4+0x28a>
 80007b8:	2100      	movs	r1, #0
 80007ba:	e9c6 0500 	strd	r0, r5, [r6]
 80007be:	4608      	mov	r0, r1
 80007c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007c4:	fab3 f183 	clz	r1, r3
 80007c8:	2900      	cmp	r1, #0
 80007ca:	d149      	bne.n	8000860 <__udivmoddi4+0x158>
 80007cc:	42ab      	cmp	r3, r5
 80007ce:	d302      	bcc.n	80007d6 <__udivmoddi4+0xce>
 80007d0:	4282      	cmp	r2, r0
 80007d2:	f200 80f8 	bhi.w	80009c6 <__udivmoddi4+0x2be>
 80007d6:	1a84      	subs	r4, r0, r2
 80007d8:	eb65 0203 	sbc.w	r2, r5, r3
 80007dc:	2001      	movs	r0, #1
 80007de:	4617      	mov	r7, r2
 80007e0:	2e00      	cmp	r6, #0
 80007e2:	d0e2      	beq.n	80007aa <__udivmoddi4+0xa2>
 80007e4:	e9c6 4700 	strd	r4, r7, [r6]
 80007e8:	e7df      	b.n	80007aa <__udivmoddi4+0xa2>
 80007ea:	b902      	cbnz	r2, 80007ee <__udivmoddi4+0xe6>
 80007ec:	deff      	udf	#255	; 0xff
 80007ee:	fab2 f382 	clz	r3, r2
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	f040 8090 	bne.w	8000918 <__udivmoddi4+0x210>
 80007f8:	1a8a      	subs	r2, r1, r2
 80007fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007fe:	fa1f fe8c 	uxth.w	lr, ip
 8000802:	2101      	movs	r1, #1
 8000804:	fbb2 f5f7 	udiv	r5, r2, r7
 8000808:	fb07 2015 	mls	r0, r7, r5, r2
 800080c:	0c22      	lsrs	r2, r4, #16
 800080e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000812:	fb0e f005 	mul.w	r0, lr, r5
 8000816:	4290      	cmp	r0, r2
 8000818:	d908      	bls.n	800082c <__udivmoddi4+0x124>
 800081a:	eb1c 0202 	adds.w	r2, ip, r2
 800081e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000822:	d202      	bcs.n	800082a <__udivmoddi4+0x122>
 8000824:	4290      	cmp	r0, r2
 8000826:	f200 80cb 	bhi.w	80009c0 <__udivmoddi4+0x2b8>
 800082a:	4645      	mov	r5, r8
 800082c:	1a12      	subs	r2, r2, r0
 800082e:	b2a4      	uxth	r4, r4
 8000830:	fbb2 f0f7 	udiv	r0, r2, r7
 8000834:	fb07 2210 	mls	r2, r7, r0, r2
 8000838:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800083c:	fb0e fe00 	mul.w	lr, lr, r0
 8000840:	45a6      	cmp	lr, r4
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0x14e>
 8000844:	eb1c 0404 	adds.w	r4, ip, r4
 8000848:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800084c:	d202      	bcs.n	8000854 <__udivmoddi4+0x14c>
 800084e:	45a6      	cmp	lr, r4
 8000850:	f200 80bb 	bhi.w	80009ca <__udivmoddi4+0x2c2>
 8000854:	4610      	mov	r0, r2
 8000856:	eba4 040e 	sub.w	r4, r4, lr
 800085a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800085e:	e79f      	b.n	80007a0 <__udivmoddi4+0x98>
 8000860:	f1c1 0720 	rsb	r7, r1, #32
 8000864:	408b      	lsls	r3, r1
 8000866:	fa22 fc07 	lsr.w	ip, r2, r7
 800086a:	ea4c 0c03 	orr.w	ip, ip, r3
 800086e:	fa05 f401 	lsl.w	r4, r5, r1
 8000872:	fa20 f307 	lsr.w	r3, r0, r7
 8000876:	40fd      	lsrs	r5, r7
 8000878:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800087c:	4323      	orrs	r3, r4
 800087e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000882:	fa1f fe8c 	uxth.w	lr, ip
 8000886:	fb09 5518 	mls	r5, r9, r8, r5
 800088a:	0c1c      	lsrs	r4, r3, #16
 800088c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000890:	fb08 f50e 	mul.w	r5, r8, lr
 8000894:	42a5      	cmp	r5, r4
 8000896:	fa02 f201 	lsl.w	r2, r2, r1
 800089a:	fa00 f001 	lsl.w	r0, r0, r1
 800089e:	d90b      	bls.n	80008b8 <__udivmoddi4+0x1b0>
 80008a0:	eb1c 0404 	adds.w	r4, ip, r4
 80008a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80008a8:	f080 8088 	bcs.w	80009bc <__udivmoddi4+0x2b4>
 80008ac:	42a5      	cmp	r5, r4
 80008ae:	f240 8085 	bls.w	80009bc <__udivmoddi4+0x2b4>
 80008b2:	f1a8 0802 	sub.w	r8, r8, #2
 80008b6:	4464      	add	r4, ip
 80008b8:	1b64      	subs	r4, r4, r5
 80008ba:	b29d      	uxth	r5, r3
 80008bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80008c0:	fb09 4413 	mls	r4, r9, r3, r4
 80008c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008cc:	45a6      	cmp	lr, r4
 80008ce:	d908      	bls.n	80008e2 <__udivmoddi4+0x1da>
 80008d0:	eb1c 0404 	adds.w	r4, ip, r4
 80008d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80008d8:	d26c      	bcs.n	80009b4 <__udivmoddi4+0x2ac>
 80008da:	45a6      	cmp	lr, r4
 80008dc:	d96a      	bls.n	80009b4 <__udivmoddi4+0x2ac>
 80008de:	3b02      	subs	r3, #2
 80008e0:	4464      	add	r4, ip
 80008e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008e6:	fba3 9502 	umull	r9, r5, r3, r2
 80008ea:	eba4 040e 	sub.w	r4, r4, lr
 80008ee:	42ac      	cmp	r4, r5
 80008f0:	46c8      	mov	r8, r9
 80008f2:	46ae      	mov	lr, r5
 80008f4:	d356      	bcc.n	80009a4 <__udivmoddi4+0x29c>
 80008f6:	d053      	beq.n	80009a0 <__udivmoddi4+0x298>
 80008f8:	b156      	cbz	r6, 8000910 <__udivmoddi4+0x208>
 80008fa:	ebb0 0208 	subs.w	r2, r0, r8
 80008fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000902:	fa04 f707 	lsl.w	r7, r4, r7
 8000906:	40ca      	lsrs	r2, r1
 8000908:	40cc      	lsrs	r4, r1
 800090a:	4317      	orrs	r7, r2
 800090c:	e9c6 7400 	strd	r7, r4, [r6]
 8000910:	4618      	mov	r0, r3
 8000912:	2100      	movs	r1, #0
 8000914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000918:	f1c3 0120 	rsb	r1, r3, #32
 800091c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000920:	fa20 f201 	lsr.w	r2, r0, r1
 8000924:	fa25 f101 	lsr.w	r1, r5, r1
 8000928:	409d      	lsls	r5, r3
 800092a:	432a      	orrs	r2, r5
 800092c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fbb1 f0f7 	udiv	r0, r1, r7
 8000938:	fb07 1510 	mls	r5, r7, r0, r1
 800093c:	0c11      	lsrs	r1, r2, #16
 800093e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000942:	fb00 f50e 	mul.w	r5, r0, lr
 8000946:	428d      	cmp	r5, r1
 8000948:	fa04 f403 	lsl.w	r4, r4, r3
 800094c:	d908      	bls.n	8000960 <__udivmoddi4+0x258>
 800094e:	eb1c 0101 	adds.w	r1, ip, r1
 8000952:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000956:	d22f      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 8000958:	428d      	cmp	r5, r1
 800095a:	d92d      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800095c:	3802      	subs	r0, #2
 800095e:	4461      	add	r1, ip
 8000960:	1b49      	subs	r1, r1, r5
 8000962:	b292      	uxth	r2, r2
 8000964:	fbb1 f5f7 	udiv	r5, r1, r7
 8000968:	fb07 1115 	mls	r1, r7, r5, r1
 800096c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000970:	fb05 f10e 	mul.w	r1, r5, lr
 8000974:	4291      	cmp	r1, r2
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x282>
 8000978:	eb1c 0202 	adds.w	r2, ip, r2
 800097c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000980:	d216      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 8000982:	4291      	cmp	r1, r2
 8000984:	d914      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000986:	3d02      	subs	r5, #2
 8000988:	4462      	add	r2, ip
 800098a:	1a52      	subs	r2, r2, r1
 800098c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000990:	e738      	b.n	8000804 <__udivmoddi4+0xfc>
 8000992:	4631      	mov	r1, r6
 8000994:	4630      	mov	r0, r6
 8000996:	e708      	b.n	80007aa <__udivmoddi4+0xa2>
 8000998:	4639      	mov	r1, r7
 800099a:	e6e6      	b.n	800076a <__udivmoddi4+0x62>
 800099c:	4610      	mov	r0, r2
 800099e:	e6fb      	b.n	8000798 <__udivmoddi4+0x90>
 80009a0:	4548      	cmp	r0, r9
 80009a2:	d2a9      	bcs.n	80008f8 <__udivmoddi4+0x1f0>
 80009a4:	ebb9 0802 	subs.w	r8, r9, r2
 80009a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80009ac:	3b01      	subs	r3, #1
 80009ae:	e7a3      	b.n	80008f8 <__udivmoddi4+0x1f0>
 80009b0:	4645      	mov	r5, r8
 80009b2:	e7ea      	b.n	800098a <__udivmoddi4+0x282>
 80009b4:	462b      	mov	r3, r5
 80009b6:	e794      	b.n	80008e2 <__udivmoddi4+0x1da>
 80009b8:	4640      	mov	r0, r8
 80009ba:	e7d1      	b.n	8000960 <__udivmoddi4+0x258>
 80009bc:	46d0      	mov	r8, sl
 80009be:	e77b      	b.n	80008b8 <__udivmoddi4+0x1b0>
 80009c0:	3d02      	subs	r5, #2
 80009c2:	4462      	add	r2, ip
 80009c4:	e732      	b.n	800082c <__udivmoddi4+0x124>
 80009c6:	4608      	mov	r0, r1
 80009c8:	e70a      	b.n	80007e0 <__udivmoddi4+0xd8>
 80009ca:	4464      	add	r4, ip
 80009cc:	3802      	subs	r0, #2
 80009ce:	e742      	b.n	8000856 <__udivmoddi4+0x14e>

080009d0 <__aeabi_idiv0>:
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop

080009d4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009da:	463b      	mov	r3, r7
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009e6:	4b28      	ldr	r3, [pc, #160]	; (8000a88 <MX_ADC1_Init+0xb4>)
 80009e8:	4a28      	ldr	r2, [pc, #160]	; (8000a8c <MX_ADC1_Init+0xb8>)
 80009ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009ec:	4b26      	ldr	r3, [pc, #152]	; (8000a88 <MX_ADC1_Init+0xb4>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009f2:	4b25      	ldr	r3, [pc, #148]	; (8000a88 <MX_ADC1_Init+0xb4>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009f8:	4b23      	ldr	r3, [pc, #140]	; (8000a88 <MX_ADC1_Init+0xb4>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009fe:	4b22      	ldr	r3, [pc, #136]	; (8000a88 <MX_ADC1_Init+0xb4>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a04:	4b20      	ldr	r3, [pc, #128]	; (8000a88 <MX_ADC1_Init+0xb4>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a0c:	4b1e      	ldr	r3, [pc, #120]	; (8000a88 <MX_ADC1_Init+0xb4>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a12:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <MX_ADC1_Init+0xb4>)
 8000a14:	4a1e      	ldr	r2, [pc, #120]	; (8000a90 <MX_ADC1_Init+0xbc>)
 8000a16:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a18:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <MX_ADC1_Init+0xb4>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <MX_ADC1_Init+0xb4>)
 8000a20:	2202      	movs	r2, #2
 8000a22:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a24:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <MX_ADC1_Init+0xb4>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a2c:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <MX_ADC1_Init+0xb4>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a32:	4815      	ldr	r0, [pc, #84]	; (8000a88 <MX_ADC1_Init+0xb4>)
 8000a34:	f000 fd12 	bl	800145c <HAL_ADC_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000a3e:	f000 f983 	bl	8000d48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a42:	2303      	movs	r3, #3
 8000a44:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a46:	2301      	movs	r3, #1
 8000a48:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a4e:	463b      	mov	r3, r7
 8000a50:	4619      	mov	r1, r3
 8000a52:	480d      	ldr	r0, [pc, #52]	; (8000a88 <MX_ADC1_Init+0xb4>)
 8000a54:	f000 fee0 	bl	8001818 <HAL_ADC_ConfigChannel>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000a5e:	f000 f973 	bl	8000d48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a62:	230a      	movs	r3, #10
 8000a64:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a66:	2302      	movs	r3, #2
 8000a68:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a6a:	463b      	mov	r3, r7
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4806      	ldr	r0, [pc, #24]	; (8000a88 <MX_ADC1_Init+0xb4>)
 8000a70:	f000 fed2 	bl	8001818 <HAL_ADC_ConfigChannel>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000a7a:	f000 f965 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	3710      	adds	r7, #16
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	200001f0 	.word	0x200001f0
 8000a8c:	40012000 	.word	0x40012000
 8000a90:	0f000001 	.word	0x0f000001

08000a94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	; 0x28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a21      	ldr	r2, [pc, #132]	; (8000b38 <HAL_ADC_MspInit+0xa4>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d13b      	bne.n	8000b2e <HAL_ADC_MspInit+0x9a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ab6:	4b21      	ldr	r3, [pc, #132]	; (8000b3c <HAL_ADC_MspInit+0xa8>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aba:	4a20      	ldr	r2, [pc, #128]	; (8000b3c <HAL_ADC_MspInit+0xa8>)
 8000abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac2:	4b1e      	ldr	r3, [pc, #120]	; (8000b3c <HAL_ADC_MspInit+0xa8>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ace:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <HAL_ADC_MspInit+0xa8>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a1a      	ldr	r2, [pc, #104]	; (8000b3c <HAL_ADC_MspInit+0xa8>)
 8000ad4:	f043 0304 	orr.w	r3, r3, #4
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <HAL_ADC_MspInit+0xa8>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0304 	and.w	r3, r3, #4
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <HAL_ADC_MspInit+0xa8>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a14      	ldr	r2, [pc, #80]	; (8000b3c <HAL_ADC_MspInit+0xa8>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_ADC_MspInit+0xa8>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000afe:	2301      	movs	r3, #1
 8000b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b02:	2303      	movs	r3, #3
 8000b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4619      	mov	r1, r3
 8000b10:	480b      	ldr	r0, [pc, #44]	; (8000b40 <HAL_ADC_MspInit+0xac>)
 8000b12:	f001 f9b7 	bl	8001e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b16:	2308      	movs	r3, #8
 8000b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	4806      	ldr	r0, [pc, #24]	; (8000b44 <HAL_ADC_MspInit+0xb0>)
 8000b2a:	f001 f9ab 	bl	8001e84 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b2e:	bf00      	nop
 8000b30:	3728      	adds	r7, #40	; 0x28
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40012000 	.word	0x40012000
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40020800 	.word	0x40020800
 8000b44:	40020000 	.word	0x40020000

08000b48 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4e:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <MX_GPIO_Init+0x74>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a1a      	ldr	r2, [pc, #104]	; (8000bbc <MX_GPIO_Init+0x74>)
 8000b54:	f043 0304 	orr.w	r3, r3, #4
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <MX_GPIO_Init+0x74>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0304 	and.w	r3, r3, #4
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <MX_GPIO_Init+0x74>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a14      	ldr	r2, [pc, #80]	; (8000bbc <MX_GPIO_Init+0x74>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <MX_GPIO_Init+0x74>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <MX_GPIO_Init+0x74>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <MX_GPIO_Init+0x74>)
 8000b84:	f043 0310 	orr.w	r3, r3, #16
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <MX_GPIO_Init+0x74>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0310 	and.w	r3, r3, #16
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <MX_GPIO_Init+0x74>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a08      	ldr	r2, [pc, #32]	; (8000bbc <MX_GPIO_Init+0x74>)
 8000b9c:	f043 0308 	orr.w	r3, r3, #8
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <MX_GPIO_Init+0x74>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0308 	and.w	r3, r3, #8
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]

}
 8000bae:	bf00      	nop
 8000bb0:	3714      	adds	r7, #20
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	40023800 	.word	0x40023800

08000bc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b09c      	sub	sp, #112	; 0x70
 8000bc4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc6:	f000 fbc8 	bl	800135a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bca:	f000 f861 	bl	8000c90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bce:	f7ff ffbb 	bl	8000b48 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000bd2:	f7ff feff 	bl	80009d4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000bd6:	f000 f9e3 	bl	8000fa0 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000bda:	f000 fb05 	bl	80011e8 <MX_USART3_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t buf[100];
	  HAL_ADC_Start(&hadc1);
 8000bde:	4827      	ldr	r0, [pc, #156]	; (8000c7c <main+0xbc>)
 8000be0:	f000 fc80 	bl	80014e4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000be4:	2164      	movs	r1, #100	; 0x64
 8000be6:	4825      	ldr	r0, [pc, #148]	; (8000c7c <main+0xbc>)
 8000be8:	f000 fd7e 	bl	80016e8 <HAL_ADC_PollForConversion>
	  adc_val[0] = HAL_ADC_GetValue(&hadc1);
 8000bec:	4823      	ldr	r0, [pc, #140]	; (8000c7c <main+0xbc>)
 8000bee:	f000 fe06 	bl	80017fe <HAL_ADC_GetValue>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	4a22      	ldr	r2, [pc, #136]	; (8000c80 <main+0xc0>)
 8000bf6:	6013      	str	r3, [r2, #0]

	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000bf8:	2164      	movs	r1, #100	; 0x64
 8000bfa:	4820      	ldr	r0, [pc, #128]	; (8000c7c <main+0xbc>)
 8000bfc:	f000 fd74 	bl	80016e8 <HAL_ADC_PollForConversion>
	  adc_val[1] = HAL_ADC_GetValue(&hadc1);
 8000c00:	481e      	ldr	r0, [pc, #120]	; (8000c7c <main+0xbc>)
 8000c02:	f000 fdfc 	bl	80017fe <HAL_ADC_GetValue>
 8000c06:	4603      	mov	r3, r0
 8000c08:	4a1d      	ldr	r2, [pc, #116]	; (8000c80 <main+0xc0>)
 8000c0a:	6053      	str	r3, [r2, #4]
	  HAL_ADC_Stop(&hadc1);
 8000c0c:	481b      	ldr	r0, [pc, #108]	; (8000c7c <main+0xbc>)
 8000c0e:	f000 fd37 	bl	8001680 <HAL_ADC_Stop>
	  dutyCycle[0] = ((float)adc_val[0]);
 8000c12:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <main+0xc0>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	ee07 3a90 	vmov	s15, r3
 8000c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c1e:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <main+0xc4>)
 8000c20:	edc3 7a00 	vstr	s15, [r3]
	  dutyCycle[1] = ((float)adc_val[1]);
 8000c24:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <main+0xc0>)
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	ee07 3a90 	vmov	s15, r3
 8000c2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <main+0xc4>)
 8000c32:	edc3 7a01 	vstr	s15, [r3, #4]
	  sprintf(buf, "dutyCycle1 is %.2f , dutyCycle2 is %.2f\n\r", dutyCycle[0], dutyCycle[1]);
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <main+0xc4>)
 8000c38:	edd3 7a00 	vldr	s15, [r3]
 8000c3c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000c40:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <main+0xc4>)
 8000c42:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c46:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c4a:	1d38      	adds	r0, r7, #4
 8000c4c:	ed8d 7b00 	vstr	d7, [sp]
 8000c50:	ec53 2b16 	vmov	r2, r3, d6
 8000c54:	490c      	ldr	r1, [pc, #48]	; (8000c88 <main+0xc8>)
 8000c56:	f004 fe91 	bl	800597c <siprintf>
	  HAL_UART_Transmit(&huart3, buf, strlen(buf), 100);
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fb3f 	bl	80002e0 <strlen>
 8000c62:	4603      	mov	r3, r0
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	1d39      	adds	r1, r7, #4
 8000c68:	2364      	movs	r3, #100	; 0x64
 8000c6a:	4808      	ldr	r0, [pc, #32]	; (8000c8c <main+0xcc>)
 8000c6c:	f003 fafa 	bl	8004264 <HAL_UART_Transmit>
	  HAL_Delay(400);
 8000c70:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000c74:	f000 fbce 	bl	8001414 <HAL_Delay>
  {
 8000c78:	e7b1      	b.n	8000bde <main+0x1e>
 8000c7a:	bf00      	nop
 8000c7c:	200001f0 	.word	0x200001f0
 8000c80:	20000240 	.word	0x20000240
 8000c84:	20000238 	.word	0x20000238
 8000c88:	08009138 	.word	0x08009138
 8000c8c:	20000298 	.word	0x20000298

08000c90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b094      	sub	sp, #80	; 0x50
 8000c94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	2234      	movs	r2, #52	; 0x34
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f004 fecf 	bl	8005a42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca4:	f107 0308 	add.w	r3, r7, #8
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb4:	4b22      	ldr	r3, [pc, #136]	; (8000d40 <SystemClock_Config+0xb0>)
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb8:	4a21      	ldr	r2, [pc, #132]	; (8000d40 <SystemClock_Config+0xb0>)
 8000cba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc0:	4b1f      	ldr	r3, [pc, #124]	; (8000d40 <SystemClock_Config+0xb0>)
 8000cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ccc:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <SystemClock_Config+0xb4>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cd4:	4a1b      	ldr	r2, [pc, #108]	; (8000d44 <SystemClock_Config+0xb4>)
 8000cd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cda:	6013      	str	r3, [r2, #0]
 8000cdc:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <SystemClock_Config+0xb4>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ce4:	603b      	str	r3, [r7, #0]
 8000ce6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cec:	2301      	movs	r3, #1
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cf0:	2310      	movs	r3, #16
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f001 fa6d 	bl	80021dc <HAL_RCC_OscConfig>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000d08:	f000 f81e 	bl	8000d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0c:	230f      	movs	r3, #15
 8000d0e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d20:	f107 0308 	add.w	r3, r7, #8
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f001 fd06 	bl	8002738 <HAL_RCC_ClockConfig>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000d32:	f000 f809 	bl	8000d48 <Error_Handler>
  }
}
 8000d36:	bf00      	nop
 8000d38:	3750      	adds	r7, #80	; 0x50
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40007000 	.word	0x40007000

08000d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4c:	b672      	cpsid	i
}
 8000d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <Error_Handler+0x8>
	...

08000d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <HAL_MspInit+0x44>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	4a0e      	ldr	r2, [pc, #56]	; (8000d98 <HAL_MspInit+0x44>)
 8000d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d64:	6413      	str	r3, [r2, #64]	; 0x40
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <HAL_MspInit+0x44>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <HAL_MspInit+0x44>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	4a08      	ldr	r2, [pc, #32]	; (8000d98 <HAL_MspInit+0x44>)
 8000d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_MspInit+0x44>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	40023800 	.word	0x40023800

08000d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <NMI_Handler+0x4>

08000da2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da6:	e7fe      	b.n	8000da6 <HardFault_Handler+0x4>

08000da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <MemManage_Handler+0x4>

08000dae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <BusFault_Handler+0x4>

08000db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <UsageFault_Handler+0x4>

08000dba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de8:	f000 faf4 	bl	80013d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return 1;
 8000df4:	2301      	movs	r3, #1
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <_kill>:

int _kill(int pid, int sig)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e0a:	f004 fe6d 	bl	8005ae8 <__errno>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2216      	movs	r2, #22
 8000e12:	601a      	str	r2, [r3, #0]
  return -1;
 8000e14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <_exit>:

void _exit (int status)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff ffe7 	bl	8000e00 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e32:	e7fe      	b.n	8000e32 <_exit+0x12>

08000e34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
 8000e44:	e00a      	b.n	8000e5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e46:	f3af 8000 	nop.w
 8000e4a:	4601      	mov	r1, r0
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	1c5a      	adds	r2, r3, #1
 8000e50:	60ba      	str	r2, [r7, #8]
 8000e52:	b2ca      	uxtb	r2, r1
 8000e54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	697a      	ldr	r2, [r7, #20]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	dbf0      	blt.n	8000e46 <_read+0x12>
  }

  return len;
 8000e64:	687b      	ldr	r3, [r7, #4]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b086      	sub	sp, #24
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	60f8      	str	r0, [r7, #12]
 8000e76:	60b9      	str	r1, [r7, #8]
 8000e78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
 8000e7e:	e009      	b.n	8000e94 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	1c5a      	adds	r2, r3, #1
 8000e84:	60ba      	str	r2, [r7, #8]
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	3301      	adds	r3, #1
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	697a      	ldr	r2, [r7, #20]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	dbf1      	blt.n	8000e80 <_write+0x12>
  }
  return len;
 8000e9c:	687b      	ldr	r3, [r7, #4]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <_close>:

int _close(int file)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
 8000ec6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ece:	605a      	str	r2, [r3, #4]
  return 0;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <_isatty>:

int _isatty(int file)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ee6:	2301      	movs	r3, #1
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
	...

08000f10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f18:	4a14      	ldr	r2, [pc, #80]	; (8000f6c <_sbrk+0x5c>)
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <_sbrk+0x60>)
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f24:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <_sbrk+0x64>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d102      	bne.n	8000f32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f2c:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <_sbrk+0x64>)
 8000f2e:	4a12      	ldr	r2, [pc, #72]	; (8000f78 <_sbrk+0x68>)
 8000f30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f32:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <_sbrk+0x64>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4413      	add	r3, r2
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d207      	bcs.n	8000f50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f40:	f004 fdd2 	bl	8005ae8 <__errno>
 8000f44:	4603      	mov	r3, r0
 8000f46:	220c      	movs	r2, #12
 8000f48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f4e:	e009      	b.n	8000f64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f50:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <_sbrk+0x64>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f56:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <_sbrk+0x64>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	4a05      	ldr	r2, [pc, #20]	; (8000f74 <_sbrk+0x64>)
 8000f60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f62:	68fb      	ldr	r3, [r7, #12]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20080000 	.word	0x20080000
 8000f70:	00000400 	.word	0x00000400
 8000f74:	20000248 	.word	0x20000248
 8000f78:	20000470 	.word	0x20000470

08000f7c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <SystemInit+0x20>)
 8000f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f86:	4a05      	ldr	r2, [pc, #20]	; (8000f9c <SystemInit+0x20>)
 8000f88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b09a      	sub	sp, #104	; 0x68
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fa6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
 8000fd0:	615a      	str	r2, [r3, #20]
 8000fd2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	222c      	movs	r2, #44	; 0x2c
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f004 fd31 	bl	8005a42 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fe0:	4b4a      	ldr	r3, [pc, #296]	; (800110c <MX_TIM1_Init+0x16c>)
 8000fe2:	4a4b      	ldr	r2, [pc, #300]	; (8001110 <MX_TIM1_Init+0x170>)
 8000fe4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 216-1;
 8000fe6:	4b49      	ldr	r3, [pc, #292]	; (800110c <MX_TIM1_Init+0x16c>)
 8000fe8:	22d7      	movs	r2, #215	; 0xd7
 8000fea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fec:	4b47      	ldr	r3, [pc, #284]	; (800110c <MX_TIM1_Init+0x16c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8000ff2:	4b46      	ldr	r3, [pc, #280]	; (800110c <MX_TIM1_Init+0x16c>)
 8000ff4:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ff8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffa:	4b44      	ldr	r3, [pc, #272]	; (800110c <MX_TIM1_Init+0x16c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001000:	4b42      	ldr	r3, [pc, #264]	; (800110c <MX_TIM1_Init+0x16c>)
 8001002:	2200      	movs	r2, #0
 8001004:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001006:	4b41      	ldr	r3, [pc, #260]	; (800110c <MX_TIM1_Init+0x16c>)
 8001008:	2200      	movs	r2, #0
 800100a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800100c:	483f      	ldr	r0, [pc, #252]	; (800110c <MX_TIM1_Init+0x16c>)
 800100e:	f002 f9a1 	bl	8003354 <HAL_TIM_Base_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001018:	f7ff fe96 	bl	8000d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800101c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001020:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001022:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001026:	4619      	mov	r1, r3
 8001028:	4838      	ldr	r0, [pc, #224]	; (800110c <MX_TIM1_Init+0x16c>)
 800102a:	f002 fb5f 	bl	80036ec <HAL_TIM_ConfigClockSource>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001034:	f7ff fe88 	bl	8000d48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001038:	4834      	ldr	r0, [pc, #208]	; (800110c <MX_TIM1_Init+0x16c>)
 800103a:	f002 f9e2 	bl	8003402 <HAL_TIM_PWM_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001044:	f7ff fe80 	bl	8000d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001048:	2300      	movs	r3, #0
 800104a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800104c:	2300      	movs	r3, #0
 800104e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001054:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001058:	4619      	mov	r1, r3
 800105a:	482c      	ldr	r0, [pc, #176]	; (800110c <MX_TIM1_Init+0x16c>)
 800105c:	f002 ffa8 	bl	8003fb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001066:	f7ff fe6f 	bl	8000d48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800106a:	2360      	movs	r3, #96	; 0x60
 800106c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 10000-1;
 800106e:	f242 730f 	movw	r3, #9999	; 0x270f
 8001072:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001074:	2300      	movs	r3, #0
 8001076:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001078:	2300      	movs	r3, #0
 800107a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800107c:	2300      	movs	r3, #0
 800107e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001080:	2300      	movs	r3, #0
 8001082:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001084:	2300      	movs	r3, #0
 8001086:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001088:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800108c:	2200      	movs	r2, #0
 800108e:	4619      	mov	r1, r3
 8001090:	481e      	ldr	r0, [pc, #120]	; (800110c <MX_TIM1_Init+0x16c>)
 8001092:	f002 fa17 	bl	80034c4 <HAL_TIM_PWM_ConfigChannel>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800109c:	f7ff fe54 	bl	8000d48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010a4:	2204      	movs	r2, #4
 80010a6:	4619      	mov	r1, r3
 80010a8:	4818      	ldr	r0, [pc, #96]	; (800110c <MX_TIM1_Init+0x16c>)
 80010aa:	f002 fa0b 	bl	80034c4 <HAL_TIM_PWM_ConfigChannel>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80010b4:	f7ff fe48 	bl	8000d48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010bc:	2300      	movs	r3, #0
 80010be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	4619      	mov	r1, r3
 80010ec:	4807      	ldr	r0, [pc, #28]	; (800110c <MX_TIM1_Init+0x16c>)
 80010ee:	f002 ffed 	bl	80040cc <HAL_TIMEx_ConfigBreakDeadTime>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 80010f8:	f7ff fe26 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010fc:	4803      	ldr	r0, [pc, #12]	; (800110c <MX_TIM1_Init+0x16c>)
 80010fe:	f000 f829 	bl	8001154 <HAL_TIM_MspPostInit>

}
 8001102:	bf00      	nop
 8001104:	3768      	adds	r7, #104	; 0x68
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	2000024c 	.word	0x2000024c
 8001110:	40010000 	.word	0x40010000

08001114 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a0a      	ldr	r2, [pc, #40]	; (800114c <HAL_TIM_Base_MspInit+0x38>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d10b      	bne.n	800113e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001126:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <HAL_TIM_Base_MspInit+0x3c>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	4a09      	ldr	r2, [pc, #36]	; (8001150 <HAL_TIM_Base_MspInit+0x3c>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6453      	str	r3, [r2, #68]	; 0x44
 8001132:	4b07      	ldr	r3, [pc, #28]	; (8001150 <HAL_TIM_Base_MspInit+0x3c>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40010000 	.word	0x40010000
 8001150:	40023800 	.word	0x40023800

08001154 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a1a      	ldr	r2, [pc, #104]	; (80011dc <HAL_TIM_MspPostInit+0x88>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d12d      	bne.n	80011d2 <HAL_TIM_MspPostInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001176:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <HAL_TIM_MspPostInit+0x8c>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a19      	ldr	r2, [pc, #100]	; (80011e0 <HAL_TIM_MspPostInit+0x8c>)
 800117c:	f043 0310 	orr.w	r3, r3, #16
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <HAL_TIM_MspPostInit+0x8c>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0310 	and.w	r3, r3, #16
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800118e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001192:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119c:	2303      	movs	r3, #3
 800119e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011a0:	2301      	movs	r3, #1
 80011a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	4619      	mov	r1, r3
 80011aa:	480e      	ldr	r0, [pc, #56]	; (80011e4 <HAL_TIM_MspPostInit+0x90>)
 80011ac:	f000 fe6a 	bl	8001e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80011b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2300      	movs	r3, #0
 80011c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011c2:	2301      	movs	r3, #1
 80011c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	4619      	mov	r1, r3
 80011cc:	4805      	ldr	r0, [pc, #20]	; (80011e4 <HAL_TIM_MspPostInit+0x90>)
 80011ce:	f000 fe59 	bl	8001e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80011d2:	bf00      	nop
 80011d4:	3720      	adds	r7, #32
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40010000 	.word	0x40010000
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40021000 	.word	0x40021000

080011e8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011ec:	4b14      	ldr	r3, [pc, #80]	; (8001240 <MX_USART3_UART_Init+0x58>)
 80011ee:	4a15      	ldr	r2, [pc, #84]	; (8001244 <MX_USART3_UART_Init+0x5c>)
 80011f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011f2:	4b13      	ldr	r3, [pc, #76]	; (8001240 <MX_USART3_UART_Init+0x58>)
 80011f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <MX_USART3_UART_Init+0x58>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <MX_USART3_UART_Init+0x58>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <MX_USART3_UART_Init+0x58>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <MX_USART3_UART_Init+0x58>)
 800120e:	220c      	movs	r2, #12
 8001210:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <MX_USART3_UART_Init+0x58>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001218:	4b09      	ldr	r3, [pc, #36]	; (8001240 <MX_USART3_UART_Init+0x58>)
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800121e:	4b08      	ldr	r3, [pc, #32]	; (8001240 <MX_USART3_UART_Init+0x58>)
 8001220:	2200      	movs	r2, #0
 8001222:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <MX_USART3_UART_Init+0x58>)
 8001226:	2200      	movs	r2, #0
 8001228:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_USART3_UART_Init+0x58>)
 800122c:	f002 ffcc 	bl	80041c8 <HAL_UART_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001236:	f7ff fd87 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000298 	.word	0x20000298
 8001244:	40004800 	.word	0x40004800

08001248 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b0ae      	sub	sp, #184	; 0xb8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	2290      	movs	r2, #144	; 0x90
 8001266:	2100      	movs	r1, #0
 8001268:	4618      	mov	r0, r3
 800126a:	f004 fbea 	bl	8005a42 <memset>
  if(uartHandle->Instance==USART3)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a22      	ldr	r2, [pc, #136]	; (80012fc <HAL_UART_MspInit+0xb4>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d13c      	bne.n	80012f2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001278:	f44f 7380 	mov.w	r3, #256	; 0x100
 800127c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800127e:	2300      	movs	r3, #0
 8001280:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4618      	mov	r0, r3
 8001288:	f001 fc3c 	bl	8002b04 <HAL_RCCEx_PeriphCLKConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001292:	f7ff fd59 	bl	8000d48 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001296:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <HAL_UART_MspInit+0xb8>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	4a19      	ldr	r2, [pc, #100]	; (8001300 <HAL_UART_MspInit+0xb8>)
 800129c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a0:	6413      	str	r3, [r2, #64]	; 0x40
 80012a2:	4b17      	ldr	r3, [pc, #92]	; (8001300 <HAL_UART_MspInit+0xb8>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ae:	4b14      	ldr	r3, [pc, #80]	; (8001300 <HAL_UART_MspInit+0xb8>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a13      	ldr	r2, [pc, #76]	; (8001300 <HAL_UART_MspInit+0xb8>)
 80012b4:	f043 0308 	orr.w	r3, r3, #8
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <HAL_UART_MspInit+0xb8>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012da:	2303      	movs	r3, #3
 80012dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012e0:	2307      	movs	r3, #7
 80012e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012e6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012ea:	4619      	mov	r1, r3
 80012ec:	4805      	ldr	r0, [pc, #20]	; (8001304 <HAL_UART_MspInit+0xbc>)
 80012ee:	f000 fdc9 	bl	8001e84 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80012f2:	bf00      	nop
 80012f4:	37b8      	adds	r7, #184	; 0xb8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40004800 	.word	0x40004800
 8001300:	40023800 	.word	0x40023800
 8001304:	40020c00 	.word	0x40020c00

08001308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001340 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800130c:	480d      	ldr	r0, [pc, #52]	; (8001344 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800130e:	490e      	ldr	r1, [pc, #56]	; (8001348 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001310:	4a0e      	ldr	r2, [pc, #56]	; (800134c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001314:	e002      	b.n	800131c <LoopCopyDataInit>

08001316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800131a:	3304      	adds	r3, #4

0800131c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800131c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800131e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001320:	d3f9      	bcc.n	8001316 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001322:	4a0b      	ldr	r2, [pc, #44]	; (8001350 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001324:	4c0b      	ldr	r4, [pc, #44]	; (8001354 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001328:	e001      	b.n	800132e <LoopFillZerobss>

0800132a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800132a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800132c:	3204      	adds	r2, #4

0800132e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800132e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001330:	d3fb      	bcc.n	800132a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001332:	f7ff fe23 	bl	8000f7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001336:	f004 fbdd 	bl	8005af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800133a:	f7ff fc41 	bl	8000bc0 <main>
  bx  lr    
 800133e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001340:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001348:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800134c:	080095b8 	.word	0x080095b8
  ldr r2, =_sbss
 8001350:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001354:	20000470 	.word	0x20000470

08001358 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001358:	e7fe      	b.n	8001358 <ADC_IRQHandler>

0800135a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800135e:	2003      	movs	r0, #3
 8001360:	f000 fd5c 	bl	8001e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001364:	200f      	movs	r0, #15
 8001366:	f000 f805 	bl	8001374 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800136a:	f7ff fcf3 	bl	8000d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	bd80      	pop	{r7, pc}

08001374 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <HAL_InitTick+0x54>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <HAL_InitTick+0x58>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	4619      	mov	r1, r3
 8001386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138a:	fbb3 f3f1 	udiv	r3, r3, r1
 800138e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001392:	4618      	mov	r0, r3
 8001394:	f000 fd69 	bl	8001e6a <HAL_SYSTICK_Config>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e00e      	b.n	80013c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b0f      	cmp	r3, #15
 80013a6:	d80a      	bhi.n	80013be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a8:	2200      	movs	r2, #0
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013b0:	f000 fd3f 	bl	8001e32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b4:	4a06      	ldr	r2, [pc, #24]	; (80013d0 <HAL_InitTick+0x5c>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	e000      	b.n	80013c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000000 	.word	0x20000000
 80013cc:	20000008 	.word	0x20000008
 80013d0:	20000004 	.word	0x20000004

080013d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_IncTick+0x20>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_IncTick+0x24>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4413      	add	r3, r2
 80013e4:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <HAL_IncTick+0x24>)
 80013e6:	6013      	str	r3, [r2, #0]
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20000008 	.word	0x20000008
 80013f8:	20000320 	.word	0x20000320

080013fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <HAL_GetTick+0x14>)
 8001402:	681b      	ldr	r3, [r3, #0]
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000320 	.word	0x20000320

08001414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800141c:	f7ff ffee 	bl	80013fc <HAL_GetTick>
 8001420:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800142c:	d005      	beq.n	800143a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800142e:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <HAL_Delay+0x44>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4413      	add	r3, r2
 8001438:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800143a:	bf00      	nop
 800143c:	f7ff ffde 	bl	80013fc <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	429a      	cmp	r2, r3
 800144a:	d8f7      	bhi.n	800143c <HAL_Delay+0x28>
  {
  }
}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000008 	.word	0x20000008

0800145c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001464:	2300      	movs	r3, #0
 8001466:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e031      	b.n	80014d6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	2b00      	cmp	r3, #0
 8001478:	d109      	bne.n	800148e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff fb0a 	bl	8000a94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f003 0310 	and.w	r3, r3, #16
 8001496:	2b00      	cmp	r3, #0
 8001498:	d116      	bne.n	80014c8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <HAL_ADC_Init+0x84>)
 80014a0:	4013      	ands	r3, r2
 80014a2:	f043 0202 	orr.w	r2, r3, #2
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f000 fb0a 	bl	8001ac4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f023 0303 	bic.w	r3, r3, #3
 80014be:	f043 0201 	orr.w	r2, r3, #1
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	641a      	str	r2, [r3, #64]	; 0x40
 80014c6:	e001      	b.n	80014cc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	ffffeefd 	.word	0xffffeefd

080014e4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d101      	bne.n	80014fe <HAL_ADC_Start+0x1a>
 80014fa:	2302      	movs	r3, #2
 80014fc:	e0ad      	b.n	800165a <HAL_ADC_Start+0x176>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2201      	movs	r2, #1
 8001502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	2b01      	cmp	r3, #1
 8001512:	d018      	beq.n	8001546 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f042 0201 	orr.w	r2, r2, #1
 8001522:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001524:	4b50      	ldr	r3, [pc, #320]	; (8001668 <HAL_ADC_Start+0x184>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a50      	ldr	r2, [pc, #320]	; (800166c <HAL_ADC_Start+0x188>)
 800152a:	fba2 2303 	umull	r2, r3, r2, r3
 800152e:	0c9a      	lsrs	r2, r3, #18
 8001530:	4613      	mov	r3, r2
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	4413      	add	r3, r2
 8001536:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001538:	e002      	b.n	8001540 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	3b01      	subs	r3, #1
 800153e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f9      	bne.n	800153a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b01      	cmp	r3, #1
 8001552:	d175      	bne.n	8001640 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001558:	4b45      	ldr	r3, [pc, #276]	; (8001670 <HAL_ADC_Start+0x18c>)
 800155a:	4013      	ands	r3, r2
 800155c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800156e:	2b00      	cmp	r3, #0
 8001570:	d007      	beq.n	8001582 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800157a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800158a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800158e:	d106      	bne.n	800159e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001594:	f023 0206 	bic.w	r2, r3, #6
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	645a      	str	r2, [r3, #68]	; 0x44
 800159c:	e002      	b.n	80015a4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80015b4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80015b6:	4b2f      	ldr	r3, [pc, #188]	; (8001674 <HAL_ADC_Start+0x190>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f003 031f 	and.w	r3, r3, #31
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d10f      	bne.n	80015e2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d143      	bne.n	8001658 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	e03a      	b.n	8001658 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a24      	ldr	r2, [pc, #144]	; (8001678 <HAL_ADC_Start+0x194>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d10e      	bne.n	800160a <HAL_ADC_Start+0x126>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d107      	bne.n	800160a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001608:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800160a:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <HAL_ADC_Start+0x190>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 0310 	and.w	r3, r3, #16
 8001612:	2b00      	cmp	r3, #0
 8001614:	d120      	bne.n	8001658 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a18      	ldr	r2, [pc, #96]	; (800167c <HAL_ADC_Start+0x198>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d11b      	bne.n	8001658 <HAL_ADC_Start+0x174>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d114      	bne.n	8001658 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	e00b      	b.n	8001658 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	f043 0210 	orr.w	r2, r3, #16
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001650:	f043 0201 	orr.w	r2, r3, #1
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	20000000 	.word	0x20000000
 800166c:	431bde83 	.word	0x431bde83
 8001670:	fffff8fe 	.word	0xfffff8fe
 8001674:	40012300 	.word	0x40012300
 8001678:	40012000 	.word	0x40012000
 800167c:	40012200 	.word	0x40012200

08001680 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800168e:	2b01      	cmp	r3, #1
 8001690:	d101      	bne.n	8001696 <HAL_ADC_Stop+0x16>
 8001692:	2302      	movs	r3, #2
 8001694:	e01f      	b.n	80016d6 <HAL_ADC_Stop+0x56>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 0201 	bic.w	r2, r2, #1
 80016ac:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d107      	bne.n	80016cc <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <HAL_ADC_Stop+0x64>)
 80016c2:	4013      	ands	r3, r2
 80016c4:	f043 0201 	orr.w	r2, r3, #1
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	ffffeefe 	.word	0xffffeefe

080016e8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001704:	d113      	bne.n	800172e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001710:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001714:	d10b      	bne.n	800172e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	f043 0220 	orr.w	r2, r3, #32
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e063      	b.n	80017f6 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800172e:	f7ff fe65 	bl	80013fc <HAL_GetTick>
 8001732:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001734:	e021      	b.n	800177a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800173c:	d01d      	beq.n	800177a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d007      	beq.n	8001754 <HAL_ADC_PollForConversion+0x6c>
 8001744:	f7ff fe5a 	bl	80013fc <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	429a      	cmp	r2, r3
 8001752:	d212      	bcs.n	800177a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b02      	cmp	r3, #2
 8001760:	d00b      	beq.n	800177a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f043 0204 	orr.w	r2, r3, #4
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e03d      	b.n	80017f6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b02      	cmp	r3, #2
 8001786:	d1d6      	bne.n	8001736 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f06f 0212 	mvn.w	r2, #18
 8001790:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d123      	bne.n	80017f4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d11f      	bne.n	80017f4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d006      	beq.n	80017d0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d111      	bne.n	80017f4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d105      	bne.n	80017f4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ec:	f043 0201 	orr.w	r2, r3, #1
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800180c:	4618      	mov	r0, r3
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800182c:	2b01      	cmp	r3, #1
 800182e:	d101      	bne.n	8001834 <HAL_ADC_ConfigChannel+0x1c>
 8001830:	2302      	movs	r3, #2
 8001832:	e136      	b.n	8001aa2 <HAL_ADC_ConfigChannel+0x28a>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b09      	cmp	r3, #9
 8001842:	d93a      	bls.n	80018ba <HAL_ADC_ConfigChannel+0xa2>
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800184c:	d035      	beq.n	80018ba <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68d9      	ldr	r1, [r3, #12]
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	b29b      	uxth	r3, r3
 800185a:	461a      	mov	r2, r3
 800185c:	4613      	mov	r3, r2
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4413      	add	r3, r2
 8001862:	3b1e      	subs	r3, #30
 8001864:	2207      	movs	r2, #7
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43da      	mvns	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	400a      	ands	r2, r1
 8001872:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a8d      	ldr	r2, [pc, #564]	; (8001ab0 <HAL_ADC_ConfigChannel+0x298>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d10a      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68d9      	ldr	r1, [r3, #12]
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	061a      	lsls	r2, r3, #24
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	430a      	orrs	r2, r1
 8001890:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001892:	e035      	b.n	8001900 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	68d9      	ldr	r1, [r3, #12]
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	4618      	mov	r0, r3
 80018a6:	4603      	mov	r3, r0
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4403      	add	r3, r0
 80018ac:	3b1e      	subs	r3, #30
 80018ae:	409a      	lsls	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018b8:	e022      	b.n	8001900 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6919      	ldr	r1, [r3, #16]
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	461a      	mov	r2, r3
 80018c8:	4613      	mov	r3, r2
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	4413      	add	r3, r2
 80018ce:	2207      	movs	r2, #7
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43da      	mvns	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	400a      	ands	r2, r1
 80018dc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6919      	ldr	r1, [r3, #16]
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	4618      	mov	r0, r3
 80018f0:	4603      	mov	r3, r0
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	4403      	add	r3, r0
 80018f6:	409a      	lsls	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	430a      	orrs	r2, r1
 80018fe:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b06      	cmp	r3, #6
 8001906:	d824      	bhi.n	8001952 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	3b05      	subs	r3, #5
 800191a:	221f      	movs	r2, #31
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43da      	mvns	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	400a      	ands	r2, r1
 8001928:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	b29b      	uxth	r3, r3
 8001936:	4618      	mov	r0, r3
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	4613      	mov	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	3b05      	subs	r3, #5
 8001944:	fa00 f203 	lsl.w	r2, r0, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	430a      	orrs	r2, r1
 800194e:	635a      	str	r2, [r3, #52]	; 0x34
 8001950:	e04c      	b.n	80019ec <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b0c      	cmp	r3, #12
 8001958:	d824      	bhi.n	80019a4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	3b23      	subs	r3, #35	; 0x23
 800196c:	221f      	movs	r2, #31
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43da      	mvns	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	400a      	ands	r2, r1
 800197a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	b29b      	uxth	r3, r3
 8001988:	4618      	mov	r0, r3
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	3b23      	subs	r3, #35	; 0x23
 8001996:	fa00 f203 	lsl.w	r2, r0, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	631a      	str	r2, [r3, #48]	; 0x30
 80019a2:	e023      	b.n	80019ec <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685a      	ldr	r2, [r3, #4]
 80019ae:	4613      	mov	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	3b41      	subs	r3, #65	; 0x41
 80019b6:	221f      	movs	r2, #31
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43da      	mvns	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	400a      	ands	r2, r1
 80019c4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	4618      	mov	r0, r3
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	3b41      	subs	r3, #65	; 0x41
 80019e0:	fa00 f203 	lsl.w	r2, r0, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a30      	ldr	r2, [pc, #192]	; (8001ab4 <HAL_ADC_ConfigChannel+0x29c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d10a      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x1f4>
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80019fe:	d105      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001a00:	4b2d      	ldr	r3, [pc, #180]	; (8001ab8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	4a2c      	ldr	r2, [pc, #176]	; (8001ab8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a06:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001a0a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a28      	ldr	r2, [pc, #160]	; (8001ab4 <HAL_ADC_ConfigChannel+0x29c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d10f      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x21e>
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b12      	cmp	r3, #18
 8001a1c:	d10b      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001a1e:	4b26      	ldr	r3, [pc, #152]	; (8001ab8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	4a25      	ldr	r2, [pc, #148]	; (8001ab8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a24:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a28:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001a2a:	4b23      	ldr	r3, [pc, #140]	; (8001ab8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	4a22      	ldr	r2, [pc, #136]	; (8001ab8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a34:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a1e      	ldr	r2, [pc, #120]	; (8001ab4 <HAL_ADC_ConfigChannel+0x29c>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d12b      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x280>
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a1a      	ldr	r2, [pc, #104]	; (8001ab0 <HAL_ADC_ConfigChannel+0x298>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d003      	beq.n	8001a52 <HAL_ADC_ConfigChannel+0x23a>
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2b11      	cmp	r3, #17
 8001a50:	d122      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001a52:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	4a18      	ldr	r2, [pc, #96]	; (8001ab8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a58:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001a5c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001a5e:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	4a15      	ldr	r2, [pc, #84]	; (8001ab8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a68:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a10      	ldr	r2, [pc, #64]	; (8001ab0 <HAL_ADC_ConfigChannel+0x298>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d111      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001a74:	4b11      	ldr	r3, [pc, #68]	; (8001abc <HAL_ADC_ConfigChannel+0x2a4>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a11      	ldr	r2, [pc, #68]	; (8001ac0 <HAL_ADC_ConfigChannel+0x2a8>)
 8001a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7e:	0c9a      	lsrs	r2, r3, #18
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a8a:	e002      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1f9      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	10000012 	.word	0x10000012
 8001ab4:	40012000 	.word	0x40012000
 8001ab8:	40012300 	.word	0x40012300
 8001abc:	20000000 	.word	0x20000000
 8001ac0:	431bde83 	.word	0x431bde83

08001ac4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001acc:	4b78      	ldr	r3, [pc, #480]	; (8001cb0 <ADC_Init+0x1ec>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	4a77      	ldr	r2, [pc, #476]	; (8001cb0 <ADC_Init+0x1ec>)
 8001ad2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001ad6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001ad8:	4b75      	ldr	r3, [pc, #468]	; (8001cb0 <ADC_Init+0x1ec>)
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	4973      	ldr	r1, [pc, #460]	; (8001cb0 <ADC_Init+0x1ec>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001af4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6859      	ldr	r1, [r3, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	021a      	lsls	r2, r3, #8
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6859      	ldr	r1, [r3, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6899      	ldr	r1, [r3, #8]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b52:	4a58      	ldr	r2, [pc, #352]	; (8001cb4 <ADC_Init+0x1f0>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d022      	beq.n	8001b9e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b66:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6899      	ldr	r1, [r3, #8]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6899      	ldr	r1, [r3, #8]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	e00f      	b.n	8001bbe <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bbc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0202 	bic.w	r2, r2, #2
 8001bcc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6899      	ldr	r1, [r3, #8]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	005a      	lsls	r2, r3, #1
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d01b      	beq.n	8001c24 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bfa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c0a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6859      	ldr	r1, [r3, #4]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c16:	3b01      	subs	r3, #1
 8001c18:	035a      	lsls	r2, r3, #13
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	e007      	b.n	8001c34 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c32:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	051a      	lsls	r2, r3, #20
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6899      	ldr	r1, [r3, #8]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c76:	025a      	lsls	r2, r3, #9
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6899      	ldr	r1, [r3, #8]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	029a      	lsls	r2, r3, #10
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	609a      	str	r2, [r3, #8]
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	40012300 	.word	0x40012300
 8001cb4:	0f000001 	.word	0x0f000001

08001cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <__NVIC_SetPriorityGrouping+0x40>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <__NVIC_SetPriorityGrouping+0x44>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ce6:	4a04      	ldr	r2, [pc, #16]	; (8001cf8 <__NVIC_SetPriorityGrouping+0x40>)
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	60d3      	str	r3, [r2, #12]
}
 8001cec:	bf00      	nop
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000ed00 	.word	0xe000ed00
 8001cfc:	05fa0000 	.word	0x05fa0000

08001d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d04:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <__NVIC_GetPriorityGrouping+0x18>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	0a1b      	lsrs	r3, r3, #8
 8001d0a:	f003 0307 	and.w	r3, r3, #7
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	6039      	str	r1, [r7, #0]
 8001d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	db0a      	blt.n	8001d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	490c      	ldr	r1, [pc, #48]	; (8001d68 <__NVIC_SetPriority+0x4c>)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	0112      	lsls	r2, r2, #4
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	440b      	add	r3, r1
 8001d40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d44:	e00a      	b.n	8001d5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	4908      	ldr	r1, [pc, #32]	; (8001d6c <__NVIC_SetPriority+0x50>)
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	3b04      	subs	r3, #4
 8001d54:	0112      	lsls	r2, r2, #4
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	440b      	add	r3, r1
 8001d5a:	761a      	strb	r2, [r3, #24]
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000e100 	.word	0xe000e100
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b089      	sub	sp, #36	; 0x24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f1c3 0307 	rsb	r3, r3, #7
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	bf28      	it	cs
 8001d8e:	2304      	movcs	r3, #4
 8001d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3304      	adds	r3, #4
 8001d96:	2b06      	cmp	r3, #6
 8001d98:	d902      	bls.n	8001da0 <NVIC_EncodePriority+0x30>
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3b03      	subs	r3, #3
 8001d9e:	e000      	b.n	8001da2 <NVIC_EncodePriority+0x32>
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43da      	mvns	r2, r3
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	401a      	ands	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc2:	43d9      	mvns	r1, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	4313      	orrs	r3, r2
         );
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3724      	adds	r7, #36	; 0x24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001de8:	d301      	bcc.n	8001dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dea:	2301      	movs	r3, #1
 8001dec:	e00f      	b.n	8001e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dee:	4a0a      	ldr	r2, [pc, #40]	; (8001e18 <SysTick_Config+0x40>)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001df6:	210f      	movs	r1, #15
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dfc:	f7ff ff8e 	bl	8001d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e00:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <SysTick_Config+0x40>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e06:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <SysTick_Config+0x40>)
 8001e08:	2207      	movs	r2, #7
 8001e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	e000e010 	.word	0xe000e010

08001e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff ff47 	bl	8001cb8 <__NVIC_SetPriorityGrouping>
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b086      	sub	sp, #24
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4603      	mov	r3, r0
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	607a      	str	r2, [r7, #4]
 8001e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e44:	f7ff ff5c 	bl	8001d00 <__NVIC_GetPriorityGrouping>
 8001e48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	68b9      	ldr	r1, [r7, #8]
 8001e4e:	6978      	ldr	r0, [r7, #20]
 8001e50:	f7ff ff8e 	bl	8001d70 <NVIC_EncodePriority>
 8001e54:	4602      	mov	r2, r0
 8001e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff5d 	bl	8001d1c <__NVIC_SetPriority>
}
 8001e62:	bf00      	nop
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff ffb0 	bl	8001dd8 <SysTick_Config>
 8001e78:	4603      	mov	r3, r0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b089      	sub	sp, #36	; 0x24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e96:	2300      	movs	r3, #0
 8001e98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61fb      	str	r3, [r7, #28]
 8001ea2:	e175      	b.n	8002190 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	f040 8164 	bne.w	800218a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d005      	beq.n	8001eda <HAL_GPIO_Init+0x56>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d130      	bne.n	8001f3c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	2203      	movs	r2, #3
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	68da      	ldr	r2, [r3, #12]
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f10:	2201      	movs	r2, #1
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	091b      	lsrs	r3, r3, #4
 8001f26:	f003 0201 	and.w	r2, r3, #1
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	d017      	beq.n	8001f78 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	2203      	movs	r2, #3
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d123      	bne.n	8001fcc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	08da      	lsrs	r2, r3, #3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3208      	adds	r2, #8
 8001f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	220f      	movs	r2, #15
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	691a      	ldr	r2, [r3, #16]
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	08da      	lsrs	r2, r3, #3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	3208      	adds	r2, #8
 8001fc6:	69b9      	ldr	r1, [r7, #24]
 8001fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	2203      	movs	r2, #3
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 0203 	and.w	r2, r3, #3
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002008:	2b00      	cmp	r3, #0
 800200a:	f000 80be 	beq.w	800218a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200e:	4b66      	ldr	r3, [pc, #408]	; (80021a8 <HAL_GPIO_Init+0x324>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	4a65      	ldr	r2, [pc, #404]	; (80021a8 <HAL_GPIO_Init+0x324>)
 8002014:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002018:	6453      	str	r3, [r2, #68]	; 0x44
 800201a:	4b63      	ldr	r3, [pc, #396]	; (80021a8 <HAL_GPIO_Init+0x324>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002026:	4a61      	ldr	r2, [pc, #388]	; (80021ac <HAL_GPIO_Init+0x328>)
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	089b      	lsrs	r3, r3, #2
 800202c:	3302      	adds	r3, #2
 800202e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	220f      	movs	r2, #15
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a58      	ldr	r2, [pc, #352]	; (80021b0 <HAL_GPIO_Init+0x32c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d037      	beq.n	80020c2 <HAL_GPIO_Init+0x23e>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a57      	ldr	r2, [pc, #348]	; (80021b4 <HAL_GPIO_Init+0x330>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d031      	beq.n	80020be <HAL_GPIO_Init+0x23a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a56      	ldr	r2, [pc, #344]	; (80021b8 <HAL_GPIO_Init+0x334>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d02b      	beq.n	80020ba <HAL_GPIO_Init+0x236>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a55      	ldr	r2, [pc, #340]	; (80021bc <HAL_GPIO_Init+0x338>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d025      	beq.n	80020b6 <HAL_GPIO_Init+0x232>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a54      	ldr	r2, [pc, #336]	; (80021c0 <HAL_GPIO_Init+0x33c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d01f      	beq.n	80020b2 <HAL_GPIO_Init+0x22e>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a53      	ldr	r2, [pc, #332]	; (80021c4 <HAL_GPIO_Init+0x340>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d019      	beq.n	80020ae <HAL_GPIO_Init+0x22a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a52      	ldr	r2, [pc, #328]	; (80021c8 <HAL_GPIO_Init+0x344>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d013      	beq.n	80020aa <HAL_GPIO_Init+0x226>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a51      	ldr	r2, [pc, #324]	; (80021cc <HAL_GPIO_Init+0x348>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d00d      	beq.n	80020a6 <HAL_GPIO_Init+0x222>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a50      	ldr	r2, [pc, #320]	; (80021d0 <HAL_GPIO_Init+0x34c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d007      	beq.n	80020a2 <HAL_GPIO_Init+0x21e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a4f      	ldr	r2, [pc, #316]	; (80021d4 <HAL_GPIO_Init+0x350>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d101      	bne.n	800209e <HAL_GPIO_Init+0x21a>
 800209a:	2309      	movs	r3, #9
 800209c:	e012      	b.n	80020c4 <HAL_GPIO_Init+0x240>
 800209e:	230a      	movs	r3, #10
 80020a0:	e010      	b.n	80020c4 <HAL_GPIO_Init+0x240>
 80020a2:	2308      	movs	r3, #8
 80020a4:	e00e      	b.n	80020c4 <HAL_GPIO_Init+0x240>
 80020a6:	2307      	movs	r3, #7
 80020a8:	e00c      	b.n	80020c4 <HAL_GPIO_Init+0x240>
 80020aa:	2306      	movs	r3, #6
 80020ac:	e00a      	b.n	80020c4 <HAL_GPIO_Init+0x240>
 80020ae:	2305      	movs	r3, #5
 80020b0:	e008      	b.n	80020c4 <HAL_GPIO_Init+0x240>
 80020b2:	2304      	movs	r3, #4
 80020b4:	e006      	b.n	80020c4 <HAL_GPIO_Init+0x240>
 80020b6:	2303      	movs	r3, #3
 80020b8:	e004      	b.n	80020c4 <HAL_GPIO_Init+0x240>
 80020ba:	2302      	movs	r3, #2
 80020bc:	e002      	b.n	80020c4 <HAL_GPIO_Init+0x240>
 80020be:	2301      	movs	r3, #1
 80020c0:	e000      	b.n	80020c4 <HAL_GPIO_Init+0x240>
 80020c2:	2300      	movs	r3, #0
 80020c4:	69fa      	ldr	r2, [r7, #28]
 80020c6:	f002 0203 	and.w	r2, r2, #3
 80020ca:	0092      	lsls	r2, r2, #2
 80020cc:	4093      	lsls	r3, r2
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80020d4:	4935      	ldr	r1, [pc, #212]	; (80021ac <HAL_GPIO_Init+0x328>)
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	089b      	lsrs	r3, r3, #2
 80020da:	3302      	adds	r3, #2
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020e2:	4b3d      	ldr	r3, [pc, #244]	; (80021d8 <HAL_GPIO_Init+0x354>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	43db      	mvns	r3, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4013      	ands	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002106:	4a34      	ldr	r2, [pc, #208]	; (80021d8 <HAL_GPIO_Init+0x354>)
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800210c:	4b32      	ldr	r3, [pc, #200]	; (80021d8 <HAL_GPIO_Init+0x354>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002130:	4a29      	ldr	r2, [pc, #164]	; (80021d8 <HAL_GPIO_Init+0x354>)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002136:	4b28      	ldr	r3, [pc, #160]	; (80021d8 <HAL_GPIO_Init+0x354>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	43db      	mvns	r3, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4013      	ands	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800215a:	4a1f      	ldr	r2, [pc, #124]	; (80021d8 <HAL_GPIO_Init+0x354>)
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002160:	4b1d      	ldr	r3, [pc, #116]	; (80021d8 <HAL_GPIO_Init+0x354>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	43db      	mvns	r3, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4013      	ands	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	4313      	orrs	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002184:	4a14      	ldr	r2, [pc, #80]	; (80021d8 <HAL_GPIO_Init+0x354>)
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	3301      	adds	r3, #1
 800218e:	61fb      	str	r3, [r7, #28]
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	2b0f      	cmp	r3, #15
 8002194:	f67f ae86 	bls.w	8001ea4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002198:	bf00      	nop
 800219a:	bf00      	nop
 800219c:	3724      	adds	r7, #36	; 0x24
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40023800 	.word	0x40023800
 80021ac:	40013800 	.word	0x40013800
 80021b0:	40020000 	.word	0x40020000
 80021b4:	40020400 	.word	0x40020400
 80021b8:	40020800 	.word	0x40020800
 80021bc:	40020c00 	.word	0x40020c00
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40021400 	.word	0x40021400
 80021c8:	40021800 	.word	0x40021800
 80021cc:	40021c00 	.word	0x40021c00
 80021d0:	40022000 	.word	0x40022000
 80021d4:	40022400 	.word	0x40022400
 80021d8:	40013c00 	.word	0x40013c00

080021dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80021e4:	2300      	movs	r3, #0
 80021e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e29b      	b.n	800272a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 8087 	beq.w	800230e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002200:	4b96      	ldr	r3, [pc, #600]	; (800245c <HAL_RCC_OscConfig+0x280>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 030c 	and.w	r3, r3, #12
 8002208:	2b04      	cmp	r3, #4
 800220a:	d00c      	beq.n	8002226 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800220c:	4b93      	ldr	r3, [pc, #588]	; (800245c <HAL_RCC_OscConfig+0x280>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b08      	cmp	r3, #8
 8002216:	d112      	bne.n	800223e <HAL_RCC_OscConfig+0x62>
 8002218:	4b90      	ldr	r3, [pc, #576]	; (800245c <HAL_RCC_OscConfig+0x280>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002220:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002224:	d10b      	bne.n	800223e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002226:	4b8d      	ldr	r3, [pc, #564]	; (800245c <HAL_RCC_OscConfig+0x280>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d06c      	beq.n	800230c <HAL_RCC_OscConfig+0x130>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d168      	bne.n	800230c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e275      	b.n	800272a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002246:	d106      	bne.n	8002256 <HAL_RCC_OscConfig+0x7a>
 8002248:	4b84      	ldr	r3, [pc, #528]	; (800245c <HAL_RCC_OscConfig+0x280>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a83      	ldr	r2, [pc, #524]	; (800245c <HAL_RCC_OscConfig+0x280>)
 800224e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002252:	6013      	str	r3, [r2, #0]
 8002254:	e02e      	b.n	80022b4 <HAL_RCC_OscConfig+0xd8>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10c      	bne.n	8002278 <HAL_RCC_OscConfig+0x9c>
 800225e:	4b7f      	ldr	r3, [pc, #508]	; (800245c <HAL_RCC_OscConfig+0x280>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a7e      	ldr	r2, [pc, #504]	; (800245c <HAL_RCC_OscConfig+0x280>)
 8002264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	4b7c      	ldr	r3, [pc, #496]	; (800245c <HAL_RCC_OscConfig+0x280>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a7b      	ldr	r2, [pc, #492]	; (800245c <HAL_RCC_OscConfig+0x280>)
 8002270:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	e01d      	b.n	80022b4 <HAL_RCC_OscConfig+0xd8>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002280:	d10c      	bne.n	800229c <HAL_RCC_OscConfig+0xc0>
 8002282:	4b76      	ldr	r3, [pc, #472]	; (800245c <HAL_RCC_OscConfig+0x280>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a75      	ldr	r2, [pc, #468]	; (800245c <HAL_RCC_OscConfig+0x280>)
 8002288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	4b73      	ldr	r3, [pc, #460]	; (800245c <HAL_RCC_OscConfig+0x280>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a72      	ldr	r2, [pc, #456]	; (800245c <HAL_RCC_OscConfig+0x280>)
 8002294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	e00b      	b.n	80022b4 <HAL_RCC_OscConfig+0xd8>
 800229c:	4b6f      	ldr	r3, [pc, #444]	; (800245c <HAL_RCC_OscConfig+0x280>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a6e      	ldr	r2, [pc, #440]	; (800245c <HAL_RCC_OscConfig+0x280>)
 80022a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	4b6c      	ldr	r3, [pc, #432]	; (800245c <HAL_RCC_OscConfig+0x280>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a6b      	ldr	r2, [pc, #428]	; (800245c <HAL_RCC_OscConfig+0x280>)
 80022ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d013      	beq.n	80022e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022bc:	f7ff f89e 	bl	80013fc <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c4:	f7ff f89a 	bl	80013fc <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b64      	cmp	r3, #100	; 0x64
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e229      	b.n	800272a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d6:	4b61      	ldr	r3, [pc, #388]	; (800245c <HAL_RCC_OscConfig+0x280>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0xe8>
 80022e2:	e014      	b.n	800230e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e4:	f7ff f88a 	bl	80013fc <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022ec:	f7ff f886 	bl	80013fc <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b64      	cmp	r3, #100	; 0x64
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e215      	b.n	800272a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022fe:	4b57      	ldr	r3, [pc, #348]	; (800245c <HAL_RCC_OscConfig+0x280>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f0      	bne.n	80022ec <HAL_RCC_OscConfig+0x110>
 800230a:	e000      	b.n	800230e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800230c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d069      	beq.n	80023ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800231a:	4b50      	ldr	r3, [pc, #320]	; (800245c <HAL_RCC_OscConfig+0x280>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00b      	beq.n	800233e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002326:	4b4d      	ldr	r3, [pc, #308]	; (800245c <HAL_RCC_OscConfig+0x280>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 030c 	and.w	r3, r3, #12
 800232e:	2b08      	cmp	r3, #8
 8002330:	d11c      	bne.n	800236c <HAL_RCC_OscConfig+0x190>
 8002332:	4b4a      	ldr	r3, [pc, #296]	; (800245c <HAL_RCC_OscConfig+0x280>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d116      	bne.n	800236c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800233e:	4b47      	ldr	r3, [pc, #284]	; (800245c <HAL_RCC_OscConfig+0x280>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d005      	beq.n	8002356 <HAL_RCC_OscConfig+0x17a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d001      	beq.n	8002356 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e1e9      	b.n	800272a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002356:	4b41      	ldr	r3, [pc, #260]	; (800245c <HAL_RCC_OscConfig+0x280>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	493d      	ldr	r1, [pc, #244]	; (800245c <HAL_RCC_OscConfig+0x280>)
 8002366:	4313      	orrs	r3, r2
 8002368:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800236a:	e040      	b.n	80023ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d023      	beq.n	80023bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002374:	4b39      	ldr	r3, [pc, #228]	; (800245c <HAL_RCC_OscConfig+0x280>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a38      	ldr	r2, [pc, #224]	; (800245c <HAL_RCC_OscConfig+0x280>)
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002380:	f7ff f83c 	bl	80013fc <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002388:	f7ff f838 	bl	80013fc <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e1c7      	b.n	800272a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239a:	4b30      	ldr	r3, [pc, #192]	; (800245c <HAL_RCC_OscConfig+0x280>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0f0      	beq.n	8002388 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a6:	4b2d      	ldr	r3, [pc, #180]	; (800245c <HAL_RCC_OscConfig+0x280>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	4929      	ldr	r1, [pc, #164]	; (800245c <HAL_RCC_OscConfig+0x280>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	600b      	str	r3, [r1, #0]
 80023ba:	e018      	b.n	80023ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023bc:	4b27      	ldr	r3, [pc, #156]	; (800245c <HAL_RCC_OscConfig+0x280>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a26      	ldr	r2, [pc, #152]	; (800245c <HAL_RCC_OscConfig+0x280>)
 80023c2:	f023 0301 	bic.w	r3, r3, #1
 80023c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c8:	f7ff f818 	bl	80013fc <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d0:	f7ff f814 	bl	80013fc <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e1a3      	b.n	800272a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e2:	4b1e      	ldr	r3, [pc, #120]	; (800245c <HAL_RCC_OscConfig+0x280>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d038      	beq.n	800246c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d019      	beq.n	8002436 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002402:	4b16      	ldr	r3, [pc, #88]	; (800245c <HAL_RCC_OscConfig+0x280>)
 8002404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002406:	4a15      	ldr	r2, [pc, #84]	; (800245c <HAL_RCC_OscConfig+0x280>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240e:	f7fe fff5 	bl	80013fc <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002416:	f7fe fff1 	bl	80013fc <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e180      	b.n	800272a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <HAL_RCC_OscConfig+0x280>)
 800242a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0x23a>
 8002434:	e01a      	b.n	800246c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002436:	4b09      	ldr	r3, [pc, #36]	; (800245c <HAL_RCC_OscConfig+0x280>)
 8002438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800243a:	4a08      	ldr	r2, [pc, #32]	; (800245c <HAL_RCC_OscConfig+0x280>)
 800243c:	f023 0301 	bic.w	r3, r3, #1
 8002440:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002442:	f7fe ffdb 	bl	80013fc <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002448:	e00a      	b.n	8002460 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800244a:	f7fe ffd7 	bl	80013fc <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d903      	bls.n	8002460 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e166      	b.n	800272a <HAL_RCC_OscConfig+0x54e>
 800245c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002460:	4b92      	ldr	r3, [pc, #584]	; (80026ac <HAL_RCC_OscConfig+0x4d0>)
 8002462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1ee      	bne.n	800244a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 80a4 	beq.w	80025c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800247a:	4b8c      	ldr	r3, [pc, #560]	; (80026ac <HAL_RCC_OscConfig+0x4d0>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10d      	bne.n	80024a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002486:	4b89      	ldr	r3, [pc, #548]	; (80026ac <HAL_RCC_OscConfig+0x4d0>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	4a88      	ldr	r2, [pc, #544]	; (80026ac <HAL_RCC_OscConfig+0x4d0>)
 800248c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002490:	6413      	str	r3, [r2, #64]	; 0x40
 8002492:	4b86      	ldr	r3, [pc, #536]	; (80026ac <HAL_RCC_OscConfig+0x4d0>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249a:	60bb      	str	r3, [r7, #8]
 800249c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800249e:	2301      	movs	r3, #1
 80024a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024a2:	4b83      	ldr	r3, [pc, #524]	; (80026b0 <HAL_RCC_OscConfig+0x4d4>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d118      	bne.n	80024e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80024ae:	4b80      	ldr	r3, [pc, #512]	; (80026b0 <HAL_RCC_OscConfig+0x4d4>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a7f      	ldr	r2, [pc, #508]	; (80026b0 <HAL_RCC_OscConfig+0x4d4>)
 80024b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ba:	f7fe ff9f 	bl	80013fc <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c2:	f7fe ff9b 	bl	80013fc <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b64      	cmp	r3, #100	; 0x64
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e12a      	b.n	800272a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024d4:	4b76      	ldr	r3, [pc, #472]	; (80026b0 <HAL_RCC_OscConfig+0x4d4>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0f0      	beq.n	80024c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d106      	bne.n	80024f6 <HAL_RCC_OscConfig+0x31a>
 80024e8:	4b70      	ldr	r3, [pc, #448]	; (80026ac <HAL_RCC_OscConfig+0x4d0>)
 80024ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ec:	4a6f      	ldr	r2, [pc, #444]	; (80026ac <HAL_RCC_OscConfig+0x4d0>)
 80024ee:	f043 0301 	orr.w	r3, r3, #1
 80024f2:	6713      	str	r3, [r2, #112]	; 0x70
 80024f4:	e02d      	b.n	8002552 <HAL_RCC_OscConfig+0x376>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10c      	bne.n	8002518 <HAL_RCC_OscConfig+0x33c>
 80024fe:	4b6b      	ldr	r3, [pc, #428]	; (80026ac <HAL_RCC_OscConfig+0x4d0>)
 8002500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002502:	4a6a      	ldr	r2, [pc, #424]	; (80026ac <HAL_RCC_OscConfig+0x4d0>)
 8002504:	f023 0301 	bic.w	r3, r3, #1
 8002508:	6713      	str	r3, [r2, #112]	; 0x70
 800250a:	4b68      	ldr	r3, [pc, #416]	; (80026ac <HAL_RCC_OscConfig+0x4d0>)
 800250c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250e:	4a67      	ldr	r2, [pc, #412]	; (80026ac <HAL_RCC_OscConfig+0x4d0>)
 8002510:	f023 0304 	bic.w	r3, r3, #4
 8002514:	6713      	str	r3, [r2, #112]	; 0x70
 8002516:	e01c      	b.n	8002552 <HAL_RCC_OscConfig+0x376>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	2b05      	cmp	r3, #5
 800251e:	d10c      	bne.n	800253a <HAL_RCC_OscConfig+0x35e>
 8002520:	4b62      	ldr	r3, [pc, #392]	; (80026ac <HAL_RCC_OscConfig+0x4d0>)
 8002522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002524:	4a61      	ldr	r2, [pc, #388]	; (80026ac <HAL_RCC_OscConfig+0x4d0>)
 8002526:	f043 0304 	orr.w	r3, r3, #4
 800252a:	6713      	str	r3, [r2, #112]	; 0x70
 800252c:	4b5f      	ldr	r3, [pc, #380]	; (80026ac <HAL_RCC_OscConfig+0x4d0>)
 800252e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002530:	4a5e      	ldr	r2, [pc, #376]	; (80026ac <HAL_RCC_OscConfig+0x4d0>)
 8002532:	f043 0301 	orr.w	r3, r3, #1
 8002536:	6713      	str	r3, [r2, #112]	; 0x70
 8002538:	e00b      	b.n	8002552 <HAL_RCC_OscConfig+0x376>
 800253a:	4b5c      	ldr	r3, [pc, #368]	; (80026ac <HAL_RCC_OscConfig+0x4d0>)
 800253c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253e:	4a5b      	ldr	r2, [pc, #364]	; (80026ac <HAL_RCC_OscConfig+0x4d0>)
 8002540:	f023 0301 	bic.w	r3, r3, #1
 8002544:	6713      	str	r3, [r2, #112]	; 0x70
 8002546:	4b59      	ldr	r3, [pc, #356]	; (80026ac <HAL_RCC_OscConfig+0x4d0>)
 8002548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254a:	4a58      	ldr	r2, [pc, #352]	; (80026ac <HAL_RCC_OscConfig+0x4d0>)
 800254c:	f023 0304 	bic.w	r3, r3, #4
 8002550:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d015      	beq.n	8002586 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255a:	f7fe ff4f 	bl	80013fc <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002560:	e00a      	b.n	8002578 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002562:	f7fe ff4b 	bl	80013fc <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002570:	4293      	cmp	r3, r2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e0d8      	b.n	800272a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002578:	4b4c      	ldr	r3, [pc, #304]	; (80026ac <HAL_RCC_OscConfig+0x4d0>)
 800257a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0ee      	beq.n	8002562 <HAL_RCC_OscConfig+0x386>
 8002584:	e014      	b.n	80025b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002586:	f7fe ff39 	bl	80013fc <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800258c:	e00a      	b.n	80025a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258e:	f7fe ff35 	bl	80013fc <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	f241 3288 	movw	r2, #5000	; 0x1388
 800259c:	4293      	cmp	r3, r2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e0c2      	b.n	800272a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a4:	4b41      	ldr	r3, [pc, #260]	; (80026ac <HAL_RCC_OscConfig+0x4d0>)
 80025a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1ee      	bne.n	800258e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025b0:	7dfb      	ldrb	r3, [r7, #23]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d105      	bne.n	80025c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b6:	4b3d      	ldr	r3, [pc, #244]	; (80026ac <HAL_RCC_OscConfig+0x4d0>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	4a3c      	ldr	r2, [pc, #240]	; (80026ac <HAL_RCC_OscConfig+0x4d0>)
 80025bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 80ae 	beq.w	8002728 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025cc:	4b37      	ldr	r3, [pc, #220]	; (80026ac <HAL_RCC_OscConfig+0x4d0>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 030c 	and.w	r3, r3, #12
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d06d      	beq.n	80026b4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d14b      	bne.n	8002678 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e0:	4b32      	ldr	r3, [pc, #200]	; (80026ac <HAL_RCC_OscConfig+0x4d0>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a31      	ldr	r2, [pc, #196]	; (80026ac <HAL_RCC_OscConfig+0x4d0>)
 80025e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7fe ff06 	bl	80013fc <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f4:	f7fe ff02 	bl	80013fc <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e091      	b.n	800272a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002606:	4b29      	ldr	r3, [pc, #164]	; (80026ac <HAL_RCC_OscConfig+0x4d0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69da      	ldr	r2, [r3, #28]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	019b      	lsls	r3, r3, #6
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002628:	085b      	lsrs	r3, r3, #1
 800262a:	3b01      	subs	r3, #1
 800262c:	041b      	lsls	r3, r3, #16
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002634:	061b      	lsls	r3, r3, #24
 8002636:	431a      	orrs	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263c:	071b      	lsls	r3, r3, #28
 800263e:	491b      	ldr	r1, [pc, #108]	; (80026ac <HAL_RCC_OscConfig+0x4d0>)
 8002640:	4313      	orrs	r3, r2
 8002642:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002644:	4b19      	ldr	r3, [pc, #100]	; (80026ac <HAL_RCC_OscConfig+0x4d0>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a18      	ldr	r2, [pc, #96]	; (80026ac <HAL_RCC_OscConfig+0x4d0>)
 800264a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800264e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002650:	f7fe fed4 	bl	80013fc <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002658:	f7fe fed0 	bl	80013fc <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e05f      	b.n	800272a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266a:	4b10      	ldr	r3, [pc, #64]	; (80026ac <HAL_RCC_OscConfig+0x4d0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0f0      	beq.n	8002658 <HAL_RCC_OscConfig+0x47c>
 8002676:	e057      	b.n	8002728 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002678:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <HAL_RCC_OscConfig+0x4d0>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a0b      	ldr	r2, [pc, #44]	; (80026ac <HAL_RCC_OscConfig+0x4d0>)
 800267e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002684:	f7fe feba 	bl	80013fc <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268c:	f7fe feb6 	bl	80013fc <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e045      	b.n	800272a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269e:	4b03      	ldr	r3, [pc, #12]	; (80026ac <HAL_RCC_OscConfig+0x4d0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0x4b0>
 80026aa:	e03d      	b.n	8002728 <HAL_RCC_OscConfig+0x54c>
 80026ac:	40023800 	.word	0x40023800
 80026b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80026b4:	4b1f      	ldr	r3, [pc, #124]	; (8002734 <HAL_RCC_OscConfig+0x558>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d030      	beq.n	8002724 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d129      	bne.n	8002724 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026da:	429a      	cmp	r2, r3
 80026dc:	d122      	bne.n	8002724 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026e4:	4013      	ands	r3, r2
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d119      	bne.n	8002724 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fa:	085b      	lsrs	r3, r3, #1
 80026fc:	3b01      	subs	r3, #1
 80026fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002700:	429a      	cmp	r2, r3
 8002702:	d10f      	bne.n	8002724 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002710:	429a      	cmp	r2, r3
 8002712:	d107      	bne.n	8002724 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002720:	429a      	cmp	r2, r3
 8002722:	d001      	beq.n	8002728 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e000      	b.n	800272a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40023800 	.word	0x40023800

08002738 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e0d0      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002750:	4b6a      	ldr	r3, [pc, #424]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 030f 	and.w	r3, r3, #15
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	429a      	cmp	r2, r3
 800275c:	d910      	bls.n	8002780 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275e:	4b67      	ldr	r3, [pc, #412]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 020f 	bic.w	r2, r3, #15
 8002766:	4965      	ldr	r1, [pc, #404]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	4313      	orrs	r3, r2
 800276c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800276e:	4b63      	ldr	r3, [pc, #396]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d001      	beq.n	8002780 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e0b8      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d020      	beq.n	80027ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b00      	cmp	r3, #0
 8002796:	d005      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002798:	4b59      	ldr	r3, [pc, #356]	; (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	4a58      	ldr	r2, [pc, #352]	; (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 800279e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027b0:	4b53      	ldr	r3, [pc, #332]	; (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	4a52      	ldr	r2, [pc, #328]	; (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 80027b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027bc:	4b50      	ldr	r3, [pc, #320]	; (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	494d      	ldr	r1, [pc, #308]	; (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d040      	beq.n	800285c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d107      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e2:	4b47      	ldr	r3, [pc, #284]	; (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d115      	bne.n	800281a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e07f      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d107      	bne.n	800280a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027fa:	4b41      	ldr	r3, [pc, #260]	; (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d109      	bne.n	800281a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e073      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800280a:	4b3d      	ldr	r3, [pc, #244]	; (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e06b      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800281a:	4b39      	ldr	r3, [pc, #228]	; (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f023 0203 	bic.w	r2, r3, #3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	4936      	ldr	r1, [pc, #216]	; (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 8002828:	4313      	orrs	r3, r2
 800282a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800282c:	f7fe fde6 	bl	80013fc <HAL_GetTick>
 8002830:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002832:	e00a      	b.n	800284a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002834:	f7fe fde2 	bl	80013fc <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002842:	4293      	cmp	r3, r2
 8002844:	d901      	bls.n	800284a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e053      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800284a:	4b2d      	ldr	r3, [pc, #180]	; (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 020c 	and.w	r2, r3, #12
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	429a      	cmp	r2, r3
 800285a:	d1eb      	bne.n	8002834 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800285c:	4b27      	ldr	r3, [pc, #156]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 030f 	and.w	r3, r3, #15
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	429a      	cmp	r2, r3
 8002868:	d210      	bcs.n	800288c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800286a:	4b24      	ldr	r3, [pc, #144]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f023 020f 	bic.w	r2, r3, #15
 8002872:	4922      	ldr	r1, [pc, #136]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	4313      	orrs	r3, r2
 8002878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800287a:	4b20      	ldr	r3, [pc, #128]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	429a      	cmp	r2, r3
 8002886:	d001      	beq.n	800288c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e032      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d008      	beq.n	80028aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002898:	4b19      	ldr	r3, [pc, #100]	; (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	4916      	ldr	r1, [pc, #88]	; (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d009      	beq.n	80028ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028b6:	4b12      	ldr	r3, [pc, #72]	; (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	490e      	ldr	r1, [pc, #56]	; (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028ca:	f000 f821 	bl	8002910 <HAL_RCC_GetSysClockFreq>
 80028ce:	4602      	mov	r2, r0
 80028d0:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	490a      	ldr	r1, [pc, #40]	; (8002904 <HAL_RCC_ClockConfig+0x1cc>)
 80028dc:	5ccb      	ldrb	r3, [r1, r3]
 80028de:	fa22 f303 	lsr.w	r3, r2, r3
 80028e2:	4a09      	ldr	r2, [pc, #36]	; (8002908 <HAL_RCC_ClockConfig+0x1d0>)
 80028e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <HAL_RCC_ClockConfig+0x1d4>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fe fd42 	bl	8001374 <HAL_InitTick>

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40023c00 	.word	0x40023c00
 8002900:	40023800 	.word	0x40023800
 8002904:	08009164 	.word	0x08009164
 8002908:	20000000 	.word	0x20000000
 800290c:	20000004 	.word	0x20000004

08002910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002914:	b090      	sub	sp, #64	; 0x40
 8002916:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002918:	2300      	movs	r3, #0
 800291a:	637b      	str	r3, [r7, #52]	; 0x34
 800291c:	2300      	movs	r3, #0
 800291e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002920:	2300      	movs	r3, #0
 8002922:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002924:	2300      	movs	r3, #0
 8002926:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002928:	4b59      	ldr	r3, [pc, #356]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x180>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f003 030c 	and.w	r3, r3, #12
 8002930:	2b08      	cmp	r3, #8
 8002932:	d00d      	beq.n	8002950 <HAL_RCC_GetSysClockFreq+0x40>
 8002934:	2b08      	cmp	r3, #8
 8002936:	f200 80a1 	bhi.w	8002a7c <HAL_RCC_GetSysClockFreq+0x16c>
 800293a:	2b00      	cmp	r3, #0
 800293c:	d002      	beq.n	8002944 <HAL_RCC_GetSysClockFreq+0x34>
 800293e:	2b04      	cmp	r3, #4
 8002940:	d003      	beq.n	800294a <HAL_RCC_GetSysClockFreq+0x3a>
 8002942:	e09b      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002944:	4b53      	ldr	r3, [pc, #332]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x184>)
 8002946:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002948:	e09b      	b.n	8002a82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800294a:	4b53      	ldr	r3, [pc, #332]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x188>)
 800294c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800294e:	e098      	b.n	8002a82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002950:	4b4f      	ldr	r3, [pc, #316]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002958:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800295a:	4b4d      	ldr	r3, [pc, #308]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x180>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d028      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002966:	4b4a      	ldr	r3, [pc, #296]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	099b      	lsrs	r3, r3, #6
 800296c:	2200      	movs	r2, #0
 800296e:	623b      	str	r3, [r7, #32]
 8002970:	627a      	str	r2, [r7, #36]	; 0x24
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002978:	2100      	movs	r1, #0
 800297a:	4b47      	ldr	r3, [pc, #284]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x188>)
 800297c:	fb03 f201 	mul.w	r2, r3, r1
 8002980:	2300      	movs	r3, #0
 8002982:	fb00 f303 	mul.w	r3, r0, r3
 8002986:	4413      	add	r3, r2
 8002988:	4a43      	ldr	r2, [pc, #268]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x188>)
 800298a:	fba0 1202 	umull	r1, r2, r0, r2
 800298e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002990:	460a      	mov	r2, r1
 8002992:	62ba      	str	r2, [r7, #40]	; 0x28
 8002994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002996:	4413      	add	r3, r2
 8002998:	62fb      	str	r3, [r7, #44]	; 0x2c
 800299a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800299c:	2200      	movs	r2, #0
 800299e:	61bb      	str	r3, [r7, #24]
 80029a0:	61fa      	str	r2, [r7, #28]
 80029a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80029aa:	f7fd fe5d 	bl	8000668 <__aeabi_uldivmod>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	4613      	mov	r3, r2
 80029b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029b6:	e053      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029b8:	4b35      	ldr	r3, [pc, #212]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x180>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	099b      	lsrs	r3, r3, #6
 80029be:	2200      	movs	r2, #0
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	617a      	str	r2, [r7, #20]
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80029ca:	f04f 0b00 	mov.w	fp, #0
 80029ce:	4652      	mov	r2, sl
 80029d0:	465b      	mov	r3, fp
 80029d2:	f04f 0000 	mov.w	r0, #0
 80029d6:	f04f 0100 	mov.w	r1, #0
 80029da:	0159      	lsls	r1, r3, #5
 80029dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029e0:	0150      	lsls	r0, r2, #5
 80029e2:	4602      	mov	r2, r0
 80029e4:	460b      	mov	r3, r1
 80029e6:	ebb2 080a 	subs.w	r8, r2, sl
 80029ea:	eb63 090b 	sbc.w	r9, r3, fp
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	f04f 0300 	mov.w	r3, #0
 80029f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80029fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80029fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a02:	ebb2 0408 	subs.w	r4, r2, r8
 8002a06:	eb63 0509 	sbc.w	r5, r3, r9
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	00eb      	lsls	r3, r5, #3
 8002a14:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a18:	00e2      	lsls	r2, r4, #3
 8002a1a:	4614      	mov	r4, r2
 8002a1c:	461d      	mov	r5, r3
 8002a1e:	eb14 030a 	adds.w	r3, r4, sl
 8002a22:	603b      	str	r3, [r7, #0]
 8002a24:	eb45 030b 	adc.w	r3, r5, fp
 8002a28:	607b      	str	r3, [r7, #4]
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	f04f 0300 	mov.w	r3, #0
 8002a32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a36:	4629      	mov	r1, r5
 8002a38:	028b      	lsls	r3, r1, #10
 8002a3a:	4621      	mov	r1, r4
 8002a3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a40:	4621      	mov	r1, r4
 8002a42:	028a      	lsls	r2, r1, #10
 8002a44:	4610      	mov	r0, r2
 8002a46:	4619      	mov	r1, r3
 8002a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	60bb      	str	r3, [r7, #8]
 8002a4e:	60fa      	str	r2, [r7, #12]
 8002a50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a54:	f7fd fe08 	bl	8000668 <__aeabi_uldivmod>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a60:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	0c1b      	lsrs	r3, r3, #16
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002a70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a7a:	e002      	b.n	8002a82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a7c:	4b05      	ldr	r3, [pc, #20]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a7e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3740      	adds	r7, #64	; 0x40
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a8e:	bf00      	nop
 8002a90:	40023800 	.word	0x40023800
 8002a94:	00f42400 	.word	0x00f42400
 8002a98:	017d7840 	.word	0x017d7840

08002a9c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aa0:	4b03      	ldr	r3, [pc, #12]	; (8002ab0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	20000000 	.word	0x20000000

08002ab4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ab8:	f7ff fff0 	bl	8002a9c <HAL_RCC_GetHCLKFreq>
 8002abc:	4602      	mov	r2, r0
 8002abe:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	0a9b      	lsrs	r3, r3, #10
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	4903      	ldr	r1, [pc, #12]	; (8002ad8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aca:	5ccb      	ldrb	r3, [r1, r3]
 8002acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	08009174 	.word	0x08009174

08002adc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ae0:	f7ff ffdc 	bl	8002a9c <HAL_RCC_GetHCLKFreq>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	4b05      	ldr	r3, [pc, #20]	; (8002afc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	0b5b      	lsrs	r3, r3, #13
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	4903      	ldr	r1, [pc, #12]	; (8002b00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002af2:	5ccb      	ldrb	r3, [r1, r3]
 8002af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40023800 	.word	0x40023800
 8002b00:	08009174 	.word	0x08009174

08002b04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b088      	sub	sp, #32
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d012      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b2c:	4b69      	ldr	r3, [pc, #420]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	4a68      	ldr	r2, [pc, #416]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b32:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b36:	6093      	str	r3, [r2, #8]
 8002b38:	4b66      	ldr	r3, [pc, #408]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b40:	4964      	ldr	r1, [pc, #400]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d017      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b5e:	4b5d      	ldr	r3, [pc, #372]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6c:	4959      	ldr	r1, [pc, #356]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b7c:	d101      	bne.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d017      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b9a:	4b4e      	ldr	r3, [pc, #312]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ba0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	494a      	ldr	r1, [pc, #296]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0320 	and.w	r3, r3, #32
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 808b 	beq.w	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002be8:	4b3a      	ldr	r3, [pc, #232]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bec:	4a39      	ldr	r2, [pc, #228]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf2:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf4:	4b37      	ldr	r3, [pc, #220]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	60bb      	str	r3, [r7, #8]
 8002bfe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c00:	4b35      	ldr	r3, [pc, #212]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a34      	ldr	r2, [pc, #208]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c0c:	f7fe fbf6 	bl	80013fc <HAL_GetTick>
 8002c10:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c14:	f7fe fbf2 	bl	80013fc <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b64      	cmp	r3, #100	; 0x64
 8002c20:	d901      	bls.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e38f      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c26:	4b2c      	ldr	r3, [pc, #176]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c32:	4b28      	ldr	r3, [pc, #160]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c3a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d035      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d02e      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c50:	4b20      	ldr	r3, [pc, #128]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c58:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c5a:	4b1e      	ldr	r3, [pc, #120]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5e:	4a1d      	ldr	r2, [pc, #116]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c64:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c66:	4b1b      	ldr	r3, [pc, #108]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6a:	4a1a      	ldr	r2, [pc, #104]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c70:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c72:	4a18      	ldr	r2, [pc, #96]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c78:	4b16      	ldr	r3, [pc, #88]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d114      	bne.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c84:	f7fe fbba 	bl	80013fc <HAL_GetTick>
 8002c88:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c8a:	e00a      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c8c:	f7fe fbb6 	bl	80013fc <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e351      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca2:	4b0c      	ldr	r3, [pc, #48]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0ee      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cba:	d111      	bne.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002cbc:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cc8:	4b04      	ldr	r3, [pc, #16]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002cca:	400b      	ands	r3, r1
 8002ccc:	4901      	ldr	r1, [pc, #4]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	608b      	str	r3, [r1, #8]
 8002cd2:	e00b      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	40007000 	.word	0x40007000
 8002cdc:	0ffffcff 	.word	0x0ffffcff
 8002ce0:	4bac      	ldr	r3, [pc, #688]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	4aab      	ldr	r2, [pc, #684]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002cea:	6093      	str	r3, [r2, #8]
 8002cec:	4ba9      	ldr	r3, [pc, #676]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf8:	49a6      	ldr	r1, [pc, #664]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0310 	and.w	r3, r3, #16
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d010      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d0a:	4ba2      	ldr	r3, [pc, #648]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d10:	4aa0      	ldr	r2, [pc, #640]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d16:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002d1a:	4b9e      	ldr	r3, [pc, #632]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d1c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d24:	499b      	ldr	r1, [pc, #620]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00a      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d38:	4b96      	ldr	r3, [pc, #600]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d46:	4993      	ldr	r1, [pc, #588]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d5a:	4b8e      	ldr	r3, [pc, #568]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d68:	498a      	ldr	r1, [pc, #552]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00a      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d7c:	4b85      	ldr	r3, [pc, #532]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d8a:	4982      	ldr	r1, [pc, #520]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d9e:	4b7d      	ldr	r3, [pc, #500]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dac:	4979      	ldr	r1, [pc, #484]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00a      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dc0:	4b74      	ldr	r3, [pc, #464]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc6:	f023 0203 	bic.w	r2, r3, #3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	4971      	ldr	r1, [pc, #452]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00a      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002de2:	4b6c      	ldr	r3, [pc, #432]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de8:	f023 020c 	bic.w	r2, r3, #12
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df0:	4968      	ldr	r1, [pc, #416]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00a      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e04:	4b63      	ldr	r3, [pc, #396]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e12:	4960      	ldr	r1, [pc, #384]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e26:	4b5b      	ldr	r3, [pc, #364]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e34:	4957      	ldr	r1, [pc, #348]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00a      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e48:	4b52      	ldr	r3, [pc, #328]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e56:	494f      	ldr	r1, [pc, #316]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00a      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e6a:	4b4a      	ldr	r3, [pc, #296]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e70:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e78:	4946      	ldr	r1, [pc, #280]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00a      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e8c:	4b41      	ldr	r3, [pc, #260]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e92:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9a:	493e      	ldr	r1, [pc, #248]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00a      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002eae:	4b39      	ldr	r3, [pc, #228]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ebc:	4935      	ldr	r1, [pc, #212]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00a      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ed0:	4b30      	ldr	r3, [pc, #192]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ede:	492d      	ldr	r1, [pc, #180]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d011      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ef2:	4b28      	ldr	r3, [pc, #160]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f00:	4924      	ldr	r1, [pc, #144]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f10:	d101      	bne.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002f12:	2301      	movs	r3, #1
 8002f14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002f22:	2301      	movs	r3, #1
 8002f24:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00a      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f32:	4b18      	ldr	r3, [pc, #96]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f38:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f40:	4914      	ldr	r1, [pc, #80]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00b      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f54:	4b0f      	ldr	r3, [pc, #60]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f64:	490b      	ldr	r1, [pc, #44]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00f      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002f78:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f88:	4902      	ldr	r1, [pc, #8]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f90:	e002      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002f92:	bf00      	nop
 8002f94:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00b      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002fa4:	4b8a      	ldr	r3, [pc, #552]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002faa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb4:	4986      	ldr	r1, [pc, #536]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00b      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002fc8:	4b81      	ldr	r3, [pc, #516]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fd8:	497d      	ldr	r1, [pc, #500]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d006      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 80d6 	beq.w	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ff4:	4b76      	ldr	r3, [pc, #472]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a75      	ldr	r2, [pc, #468]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ffa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ffe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003000:	f7fe f9fc 	bl	80013fc <HAL_GetTick>
 8003004:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003006:	e008      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003008:	f7fe f9f8 	bl	80013fc <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b64      	cmp	r3, #100	; 0x64
 8003014:	d901      	bls.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e195      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800301a:	4b6d      	ldr	r3, [pc, #436]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f0      	bne.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d021      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003036:	2b00      	cmp	r3, #0
 8003038:	d11d      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800303a:	4b65      	ldr	r3, [pc, #404]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800303c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003040:	0c1b      	lsrs	r3, r3, #16
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003048:	4b61      	ldr	r3, [pc, #388]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800304a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800304e:	0e1b      	lsrs	r3, r3, #24
 8003050:	f003 030f 	and.w	r3, r3, #15
 8003054:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	019a      	lsls	r2, r3, #6
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	041b      	lsls	r3, r3, #16
 8003060:	431a      	orrs	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	061b      	lsls	r3, r3, #24
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	071b      	lsls	r3, r3, #28
 800306e:	4958      	ldr	r1, [pc, #352]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003070:	4313      	orrs	r3, r2
 8003072:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d004      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003086:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800308a:	d00a      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003094:	2b00      	cmp	r3, #0
 8003096:	d02e      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030a0:	d129      	bne.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80030a2:	4b4b      	ldr	r3, [pc, #300]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030a8:	0c1b      	lsrs	r3, r3, #16
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030b0:	4b47      	ldr	r3, [pc, #284]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030b6:	0f1b      	lsrs	r3, r3, #28
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	019a      	lsls	r2, r3, #6
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	041b      	lsls	r3, r3, #16
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	061b      	lsls	r3, r3, #24
 80030d0:	431a      	orrs	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	071b      	lsls	r3, r3, #28
 80030d6:	493e      	ldr	r1, [pc, #248]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80030de:	4b3c      	ldr	r3, [pc, #240]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030e4:	f023 021f 	bic.w	r2, r3, #31
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ec:	3b01      	subs	r3, #1
 80030ee:	4938      	ldr	r1, [pc, #224]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d01d      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003102:	4b33      	ldr	r3, [pc, #204]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003104:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003108:	0e1b      	lsrs	r3, r3, #24
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003110:	4b2f      	ldr	r3, [pc, #188]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003112:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003116:	0f1b      	lsrs	r3, r3, #28
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	019a      	lsls	r2, r3, #6
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	041b      	lsls	r3, r3, #16
 800312a:	431a      	orrs	r2, r3
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	061b      	lsls	r3, r3, #24
 8003130:	431a      	orrs	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	071b      	lsls	r3, r3, #28
 8003136:	4926      	ldr	r1, [pc, #152]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003138:	4313      	orrs	r3, r2
 800313a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d011      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	019a      	lsls	r2, r3, #6
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	041b      	lsls	r3, r3, #16
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	061b      	lsls	r3, r3, #24
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	071b      	lsls	r3, r3, #28
 8003166:	491a      	ldr	r1, [pc, #104]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800316e:	4b18      	ldr	r3, [pc, #96]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a17      	ldr	r2, [pc, #92]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003174:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003178:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800317a:	f7fe f93f 	bl	80013fc <HAL_GetTick>
 800317e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003180:	e008      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003182:	f7fe f93b 	bl	80013fc <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b64      	cmp	r3, #100	; 0x64
 800318e:	d901      	bls.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e0d8      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003194:	4b0e      	ldr	r3, [pc, #56]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0f0      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	f040 80ce 	bne.w	8003344 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80031a8:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a08      	ldr	r2, [pc, #32]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031b4:	f7fe f922 	bl	80013fc <HAL_GetTick>
 80031b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031ba:	e00b      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80031bc:	f7fe f91e 	bl	80013fc <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b64      	cmp	r3, #100	; 0x64
 80031c8:	d904      	bls.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e0bb      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80031ce:	bf00      	nop
 80031d0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031d4:	4b5e      	ldr	r3, [pc, #376]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031e0:	d0ec      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d009      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d02e      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	2b00      	cmp	r3, #0
 8003208:	d12a      	bne.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800320a:	4b51      	ldr	r3, [pc, #324]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800320c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003210:	0c1b      	lsrs	r3, r3, #16
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003218:	4b4d      	ldr	r3, [pc, #308]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800321a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321e:	0f1b      	lsrs	r3, r3, #28
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	019a      	lsls	r2, r3, #6
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	041b      	lsls	r3, r3, #16
 8003230:	431a      	orrs	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	061b      	lsls	r3, r3, #24
 8003238:	431a      	orrs	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	071b      	lsls	r3, r3, #28
 800323e:	4944      	ldr	r1, [pc, #272]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003240:	4313      	orrs	r3, r2
 8003242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003246:	4b42      	ldr	r3, [pc, #264]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800324c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003254:	3b01      	subs	r3, #1
 8003256:	021b      	lsls	r3, r3, #8
 8003258:	493d      	ldr	r1, [pc, #244]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d022      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003270:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003274:	d11d      	bne.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003276:	4b36      	ldr	r3, [pc, #216]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327c:	0e1b      	lsrs	r3, r3, #24
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003284:	4b32      	ldr	r3, [pc, #200]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328a:	0f1b      	lsrs	r3, r3, #28
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	019a      	lsls	r2, r3, #6
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	041b      	lsls	r3, r3, #16
 800329e:	431a      	orrs	r2, r3
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	061b      	lsls	r3, r3, #24
 80032a4:	431a      	orrs	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	071b      	lsls	r3, r3, #28
 80032aa:	4929      	ldr	r1, [pc, #164]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d028      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032be:	4b24      	ldr	r3, [pc, #144]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c4:	0e1b      	lsrs	r3, r3, #24
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80032cc:	4b20      	ldr	r3, [pc, #128]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d2:	0c1b      	lsrs	r3, r3, #16
 80032d4:	f003 0303 	and.w	r3, r3, #3
 80032d8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	019a      	lsls	r2, r3, #6
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	041b      	lsls	r3, r3, #16
 80032e4:	431a      	orrs	r2, r3
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	061b      	lsls	r3, r3, #24
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69db      	ldr	r3, [r3, #28]
 80032f0:	071b      	lsls	r3, r3, #28
 80032f2:	4917      	ldr	r1, [pc, #92]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80032fa:	4b15      	ldr	r3, [pc, #84]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003300:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003308:	4911      	ldr	r1, [pc, #68]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003310:	4b0f      	ldr	r3, [pc, #60]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a0e      	ldr	r2, [pc, #56]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800331a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800331c:	f7fe f86e 	bl	80013fc <HAL_GetTick>
 8003320:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003324:	f7fe f86a 	bl	80013fc <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b64      	cmp	r3, #100	; 0x64
 8003330:	d901      	bls.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e007      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003336:	4b06      	ldr	r3, [pc, #24]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800333e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003342:	d1ef      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3720      	adds	r7, #32
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40023800 	.word	0x40023800

08003354 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e049      	b.n	80033fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d106      	bne.n	8003380 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7fd feca 	bl	8001114 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2202      	movs	r2, #2
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3304      	adds	r3, #4
 8003390:	4619      	mov	r1, r3
 8003392:	4610      	mov	r0, r2
 8003394:	f000 fa74 	bl	8003880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b082      	sub	sp, #8
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e049      	b.n	80034a8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b00      	cmp	r3, #0
 800341e:	d106      	bne.n	800342e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f841 	bl	80034b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2202      	movs	r2, #2
 8003432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	3304      	adds	r3, #4
 800343e:	4619      	mov	r1, r3
 8003440:	4610      	mov	r0, r2
 8003442:	f000 fa1d 	bl	8003880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034d0:	2300      	movs	r3, #0
 80034d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d101      	bne.n	80034e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80034de:	2302      	movs	r3, #2
 80034e0:	e0ff      	b.n	80036e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b14      	cmp	r3, #20
 80034ee:	f200 80f0 	bhi.w	80036d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80034f2:	a201      	add	r2, pc, #4	; (adr r2, 80034f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80034f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f8:	0800354d 	.word	0x0800354d
 80034fc:	080036d3 	.word	0x080036d3
 8003500:	080036d3 	.word	0x080036d3
 8003504:	080036d3 	.word	0x080036d3
 8003508:	0800358d 	.word	0x0800358d
 800350c:	080036d3 	.word	0x080036d3
 8003510:	080036d3 	.word	0x080036d3
 8003514:	080036d3 	.word	0x080036d3
 8003518:	080035cf 	.word	0x080035cf
 800351c:	080036d3 	.word	0x080036d3
 8003520:	080036d3 	.word	0x080036d3
 8003524:	080036d3 	.word	0x080036d3
 8003528:	0800360f 	.word	0x0800360f
 800352c:	080036d3 	.word	0x080036d3
 8003530:	080036d3 	.word	0x080036d3
 8003534:	080036d3 	.word	0x080036d3
 8003538:	08003651 	.word	0x08003651
 800353c:	080036d3 	.word	0x080036d3
 8003540:	080036d3 	.word	0x080036d3
 8003544:	080036d3 	.word	0x080036d3
 8003548:	08003691 	.word	0x08003691
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68b9      	ldr	r1, [r7, #8]
 8003552:	4618      	mov	r0, r3
 8003554:	f000 fa34 	bl	80039c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699a      	ldr	r2, [r3, #24]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0208 	orr.w	r2, r2, #8
 8003566:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699a      	ldr	r2, [r3, #24]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0204 	bic.w	r2, r2, #4
 8003576:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6999      	ldr	r1, [r3, #24]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	691a      	ldr	r2, [r3, #16]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	619a      	str	r2, [r3, #24]
      break;
 800358a:	e0a5      	b.n	80036d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68b9      	ldr	r1, [r7, #8]
 8003592:	4618      	mov	r0, r3
 8003594:	f000 fa86 	bl	8003aa4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	699a      	ldr	r2, [r3, #24]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	699a      	ldr	r2, [r3, #24]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6999      	ldr	r1, [r3, #24]
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	021a      	lsls	r2, r3, #8
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	430a      	orrs	r2, r1
 80035ca:	619a      	str	r2, [r3, #24]
      break;
 80035cc:	e084      	b.n	80036d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68b9      	ldr	r1, [r7, #8]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f000 fadd 	bl	8003b94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69da      	ldr	r2, [r3, #28]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f042 0208 	orr.w	r2, r2, #8
 80035e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	69da      	ldr	r2, [r3, #28]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0204 	bic.w	r2, r2, #4
 80035f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	69d9      	ldr	r1, [r3, #28]
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	61da      	str	r2, [r3, #28]
      break;
 800360c:	e064      	b.n	80036d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68b9      	ldr	r1, [r7, #8]
 8003614:	4618      	mov	r0, r3
 8003616:	f000 fb33 	bl	8003c80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69da      	ldr	r2, [r3, #28]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003628:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	69da      	ldr	r2, [r3, #28]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003638:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69d9      	ldr	r1, [r3, #28]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	021a      	lsls	r2, r3, #8
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	61da      	str	r2, [r3, #28]
      break;
 800364e:	e043      	b.n	80036d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68b9      	ldr	r1, [r7, #8]
 8003656:	4618      	mov	r0, r3
 8003658:	f000 fb6a 	bl	8003d30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0208 	orr.w	r2, r2, #8
 800366a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0204 	bic.w	r2, r2, #4
 800367a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	691a      	ldr	r2, [r3, #16]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800368e:	e023      	b.n	80036d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68b9      	ldr	r1, [r7, #8]
 8003696:	4618      	mov	r0, r3
 8003698:	f000 fb9c 	bl	8003dd4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	021a      	lsls	r2, r3, #8
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80036d0:	e002      	b.n	80036d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	75fb      	strb	r3, [r7, #23]
      break;
 80036d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3718      	adds	r7, #24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop

080036ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036f6:	2300      	movs	r3, #0
 80036f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003700:	2b01      	cmp	r3, #1
 8003702:	d101      	bne.n	8003708 <HAL_TIM_ConfigClockSource+0x1c>
 8003704:	2302      	movs	r3, #2
 8003706:	e0b4      	b.n	8003872 <HAL_TIM_ConfigClockSource+0x186>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2202      	movs	r2, #2
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	4b56      	ldr	r3, [pc, #344]	; (800387c <HAL_TIM_ConfigClockSource+0x190>)
 8003724:	4013      	ands	r3, r2
 8003726:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800372e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003740:	d03e      	beq.n	80037c0 <HAL_TIM_ConfigClockSource+0xd4>
 8003742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003746:	f200 8087 	bhi.w	8003858 <HAL_TIM_ConfigClockSource+0x16c>
 800374a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800374e:	f000 8086 	beq.w	800385e <HAL_TIM_ConfigClockSource+0x172>
 8003752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003756:	d87f      	bhi.n	8003858 <HAL_TIM_ConfigClockSource+0x16c>
 8003758:	2b70      	cmp	r3, #112	; 0x70
 800375a:	d01a      	beq.n	8003792 <HAL_TIM_ConfigClockSource+0xa6>
 800375c:	2b70      	cmp	r3, #112	; 0x70
 800375e:	d87b      	bhi.n	8003858 <HAL_TIM_ConfigClockSource+0x16c>
 8003760:	2b60      	cmp	r3, #96	; 0x60
 8003762:	d050      	beq.n	8003806 <HAL_TIM_ConfigClockSource+0x11a>
 8003764:	2b60      	cmp	r3, #96	; 0x60
 8003766:	d877      	bhi.n	8003858 <HAL_TIM_ConfigClockSource+0x16c>
 8003768:	2b50      	cmp	r3, #80	; 0x50
 800376a:	d03c      	beq.n	80037e6 <HAL_TIM_ConfigClockSource+0xfa>
 800376c:	2b50      	cmp	r3, #80	; 0x50
 800376e:	d873      	bhi.n	8003858 <HAL_TIM_ConfigClockSource+0x16c>
 8003770:	2b40      	cmp	r3, #64	; 0x40
 8003772:	d058      	beq.n	8003826 <HAL_TIM_ConfigClockSource+0x13a>
 8003774:	2b40      	cmp	r3, #64	; 0x40
 8003776:	d86f      	bhi.n	8003858 <HAL_TIM_ConfigClockSource+0x16c>
 8003778:	2b30      	cmp	r3, #48	; 0x30
 800377a:	d064      	beq.n	8003846 <HAL_TIM_ConfigClockSource+0x15a>
 800377c:	2b30      	cmp	r3, #48	; 0x30
 800377e:	d86b      	bhi.n	8003858 <HAL_TIM_ConfigClockSource+0x16c>
 8003780:	2b20      	cmp	r3, #32
 8003782:	d060      	beq.n	8003846 <HAL_TIM_ConfigClockSource+0x15a>
 8003784:	2b20      	cmp	r3, #32
 8003786:	d867      	bhi.n	8003858 <HAL_TIM_ConfigClockSource+0x16c>
 8003788:	2b00      	cmp	r3, #0
 800378a:	d05c      	beq.n	8003846 <HAL_TIM_ConfigClockSource+0x15a>
 800378c:	2b10      	cmp	r3, #16
 800378e:	d05a      	beq.n	8003846 <HAL_TIM_ConfigClockSource+0x15a>
 8003790:	e062      	b.n	8003858 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037a2:	f000 fbe5 	bl	8003f70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	609a      	str	r2, [r3, #8]
      break;
 80037be:	e04f      	b.n	8003860 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037d0:	f000 fbce 	bl	8003f70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689a      	ldr	r2, [r3, #8]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037e2:	609a      	str	r2, [r3, #8]
      break;
 80037e4:	e03c      	b.n	8003860 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037f2:	461a      	mov	r2, r3
 80037f4:	f000 fb42 	bl	8003e7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2150      	movs	r1, #80	; 0x50
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 fb9b 	bl	8003f3a <TIM_ITRx_SetConfig>
      break;
 8003804:	e02c      	b.n	8003860 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003812:	461a      	mov	r2, r3
 8003814:	f000 fb61 	bl	8003eda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2160      	movs	r1, #96	; 0x60
 800381e:	4618      	mov	r0, r3
 8003820:	f000 fb8b 	bl	8003f3a <TIM_ITRx_SetConfig>
      break;
 8003824:	e01c      	b.n	8003860 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003832:	461a      	mov	r2, r3
 8003834:	f000 fb22 	bl	8003e7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2140      	movs	r1, #64	; 0x40
 800383e:	4618      	mov	r0, r3
 8003840:	f000 fb7b 	bl	8003f3a <TIM_ITRx_SetConfig>
      break;
 8003844:	e00c      	b.n	8003860 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4619      	mov	r1, r3
 8003850:	4610      	mov	r0, r2
 8003852:	f000 fb72 	bl	8003f3a <TIM_ITRx_SetConfig>
      break;
 8003856:	e003      	b.n	8003860 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	73fb      	strb	r3, [r7, #15]
      break;
 800385c:	e000      	b.n	8003860 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800385e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003870:	7bfb      	ldrb	r3, [r7, #15]
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	fffeff88 	.word	0xfffeff88

08003880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a40      	ldr	r2, [pc, #256]	; (8003994 <TIM_Base_SetConfig+0x114>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d013      	beq.n	80038c0 <TIM_Base_SetConfig+0x40>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800389e:	d00f      	beq.n	80038c0 <TIM_Base_SetConfig+0x40>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a3d      	ldr	r2, [pc, #244]	; (8003998 <TIM_Base_SetConfig+0x118>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d00b      	beq.n	80038c0 <TIM_Base_SetConfig+0x40>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a3c      	ldr	r2, [pc, #240]	; (800399c <TIM_Base_SetConfig+0x11c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d007      	beq.n	80038c0 <TIM_Base_SetConfig+0x40>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a3b      	ldr	r2, [pc, #236]	; (80039a0 <TIM_Base_SetConfig+0x120>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d003      	beq.n	80038c0 <TIM_Base_SetConfig+0x40>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a3a      	ldr	r2, [pc, #232]	; (80039a4 <TIM_Base_SetConfig+0x124>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d108      	bne.n	80038d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a2f      	ldr	r2, [pc, #188]	; (8003994 <TIM_Base_SetConfig+0x114>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d02b      	beq.n	8003932 <TIM_Base_SetConfig+0xb2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e0:	d027      	beq.n	8003932 <TIM_Base_SetConfig+0xb2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a2c      	ldr	r2, [pc, #176]	; (8003998 <TIM_Base_SetConfig+0x118>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d023      	beq.n	8003932 <TIM_Base_SetConfig+0xb2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a2b      	ldr	r2, [pc, #172]	; (800399c <TIM_Base_SetConfig+0x11c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d01f      	beq.n	8003932 <TIM_Base_SetConfig+0xb2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a2a      	ldr	r2, [pc, #168]	; (80039a0 <TIM_Base_SetConfig+0x120>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d01b      	beq.n	8003932 <TIM_Base_SetConfig+0xb2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a29      	ldr	r2, [pc, #164]	; (80039a4 <TIM_Base_SetConfig+0x124>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d017      	beq.n	8003932 <TIM_Base_SetConfig+0xb2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a28      	ldr	r2, [pc, #160]	; (80039a8 <TIM_Base_SetConfig+0x128>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d013      	beq.n	8003932 <TIM_Base_SetConfig+0xb2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a27      	ldr	r2, [pc, #156]	; (80039ac <TIM_Base_SetConfig+0x12c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d00f      	beq.n	8003932 <TIM_Base_SetConfig+0xb2>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a26      	ldr	r2, [pc, #152]	; (80039b0 <TIM_Base_SetConfig+0x130>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d00b      	beq.n	8003932 <TIM_Base_SetConfig+0xb2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a25      	ldr	r2, [pc, #148]	; (80039b4 <TIM_Base_SetConfig+0x134>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d007      	beq.n	8003932 <TIM_Base_SetConfig+0xb2>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a24      	ldr	r2, [pc, #144]	; (80039b8 <TIM_Base_SetConfig+0x138>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d003      	beq.n	8003932 <TIM_Base_SetConfig+0xb2>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a23      	ldr	r2, [pc, #140]	; (80039bc <TIM_Base_SetConfig+0x13c>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d108      	bne.n	8003944 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	4313      	orrs	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	4313      	orrs	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a0a      	ldr	r2, [pc, #40]	; (8003994 <TIM_Base_SetConfig+0x114>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d003      	beq.n	8003978 <TIM_Base_SetConfig+0xf8>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a0c      	ldr	r2, [pc, #48]	; (80039a4 <TIM_Base_SetConfig+0x124>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d103      	bne.n	8003980 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	691a      	ldr	r2, [r3, #16]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	615a      	str	r2, [r3, #20]
}
 8003986:	bf00      	nop
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	40010000 	.word	0x40010000
 8003998:	40000400 	.word	0x40000400
 800399c:	40000800 	.word	0x40000800
 80039a0:	40000c00 	.word	0x40000c00
 80039a4:	40010400 	.word	0x40010400
 80039a8:	40014000 	.word	0x40014000
 80039ac:	40014400 	.word	0x40014400
 80039b0:	40014800 	.word	0x40014800
 80039b4:	40001800 	.word	0x40001800
 80039b8:	40001c00 	.word	0x40001c00
 80039bc:	40002000 	.word	0x40002000

080039c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b087      	sub	sp, #28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	f023 0201 	bic.w	r2, r3, #1
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	4b2b      	ldr	r3, [pc, #172]	; (8003a98 <TIM_OC1_SetConfig+0xd8>)
 80039ec:	4013      	ands	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f023 0303 	bic.w	r3, r3, #3
 80039f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f023 0302 	bic.w	r3, r3, #2
 8003a08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a21      	ldr	r2, [pc, #132]	; (8003a9c <TIM_OC1_SetConfig+0xdc>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d003      	beq.n	8003a24 <TIM_OC1_SetConfig+0x64>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a20      	ldr	r2, [pc, #128]	; (8003aa0 <TIM_OC1_SetConfig+0xe0>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d10c      	bne.n	8003a3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f023 0308 	bic.w	r3, r3, #8
 8003a2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f023 0304 	bic.w	r3, r3, #4
 8003a3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a16      	ldr	r2, [pc, #88]	; (8003a9c <TIM_OC1_SetConfig+0xdc>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d003      	beq.n	8003a4e <TIM_OC1_SetConfig+0x8e>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a15      	ldr	r2, [pc, #84]	; (8003aa0 <TIM_OC1_SetConfig+0xe0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d111      	bne.n	8003a72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	621a      	str	r2, [r3, #32]
}
 8003a8c:	bf00      	nop
 8003a8e:	371c      	adds	r7, #28
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	fffeff8f 	.word	0xfffeff8f
 8003a9c:	40010000 	.word	0x40010000
 8003aa0:	40010400 	.word	0x40010400

08003aa4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	f023 0210 	bic.w	r2, r3, #16
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	4b2e      	ldr	r3, [pc, #184]	; (8003b88 <TIM_OC2_SetConfig+0xe4>)
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	021b      	lsls	r3, r3, #8
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f023 0320 	bic.w	r3, r3, #32
 8003aee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a23      	ldr	r2, [pc, #140]	; (8003b8c <TIM_OC2_SetConfig+0xe8>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d003      	beq.n	8003b0c <TIM_OC2_SetConfig+0x68>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a22      	ldr	r2, [pc, #136]	; (8003b90 <TIM_OC2_SetConfig+0xec>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d10d      	bne.n	8003b28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a18      	ldr	r2, [pc, #96]	; (8003b8c <TIM_OC2_SetConfig+0xe8>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d003      	beq.n	8003b38 <TIM_OC2_SetConfig+0x94>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a17      	ldr	r2, [pc, #92]	; (8003b90 <TIM_OC2_SetConfig+0xec>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d113      	bne.n	8003b60 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	621a      	str	r2, [r3, #32]
}
 8003b7a:	bf00      	nop
 8003b7c:	371c      	adds	r7, #28
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	feff8fff 	.word	0xfeff8fff
 8003b8c:	40010000 	.word	0x40010000
 8003b90:	40010400 	.word	0x40010400

08003b94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b087      	sub	sp, #28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	4b2d      	ldr	r3, [pc, #180]	; (8003c74 <TIM_OC3_SetConfig+0xe0>)
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f023 0303 	bic.w	r3, r3, #3
 8003bca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	021b      	lsls	r3, r3, #8
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a22      	ldr	r2, [pc, #136]	; (8003c78 <TIM_OC3_SetConfig+0xe4>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d003      	beq.n	8003bfa <TIM_OC3_SetConfig+0x66>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a21      	ldr	r2, [pc, #132]	; (8003c7c <TIM_OC3_SetConfig+0xe8>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d10d      	bne.n	8003c16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	021b      	lsls	r3, r3, #8
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a17      	ldr	r2, [pc, #92]	; (8003c78 <TIM_OC3_SetConfig+0xe4>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d003      	beq.n	8003c26 <TIM_OC3_SetConfig+0x92>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a16      	ldr	r2, [pc, #88]	; (8003c7c <TIM_OC3_SetConfig+0xe8>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d113      	bne.n	8003c4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	621a      	str	r2, [r3, #32]
}
 8003c68:	bf00      	nop
 8003c6a:	371c      	adds	r7, #28
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	fffeff8f 	.word	0xfffeff8f
 8003c78:	40010000 	.word	0x40010000
 8003c7c:	40010400 	.word	0x40010400

08003c80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	4b1e      	ldr	r3, [pc, #120]	; (8003d24 <TIM_OC4_SetConfig+0xa4>)
 8003cac:	4013      	ands	r3, r2
 8003cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	021b      	lsls	r3, r3, #8
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	031b      	lsls	r3, r3, #12
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a13      	ldr	r2, [pc, #76]	; (8003d28 <TIM_OC4_SetConfig+0xa8>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d003      	beq.n	8003ce8 <TIM_OC4_SetConfig+0x68>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a12      	ldr	r2, [pc, #72]	; (8003d2c <TIM_OC4_SetConfig+0xac>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d109      	bne.n	8003cfc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	019b      	lsls	r3, r3, #6
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	621a      	str	r2, [r3, #32]
}
 8003d16:	bf00      	nop
 8003d18:	371c      	adds	r7, #28
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	feff8fff 	.word	0xfeff8fff
 8003d28:	40010000 	.word	0x40010000
 8003d2c:	40010400 	.word	0x40010400

08003d30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	4b1b      	ldr	r3, [pc, #108]	; (8003dc8 <TIM_OC5_SetConfig+0x98>)
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003d70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	041b      	lsls	r3, r3, #16
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a12      	ldr	r2, [pc, #72]	; (8003dcc <TIM_OC5_SetConfig+0x9c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d003      	beq.n	8003d8e <TIM_OC5_SetConfig+0x5e>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a11      	ldr	r2, [pc, #68]	; (8003dd0 <TIM_OC5_SetConfig+0xa0>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d109      	bne.n	8003da2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	021b      	lsls	r3, r3, #8
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	621a      	str	r2, [r3, #32]
}
 8003dbc:	bf00      	nop
 8003dbe:	371c      	adds	r7, #28
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	fffeff8f 	.word	0xfffeff8f
 8003dcc:	40010000 	.word	0x40010000
 8003dd0:	40010400 	.word	0x40010400

08003dd4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b087      	sub	sp, #28
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	4b1c      	ldr	r3, [pc, #112]	; (8003e70 <TIM_OC6_SetConfig+0x9c>)
 8003e00:	4013      	ands	r3, r2
 8003e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	021b      	lsls	r3, r3, #8
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	051b      	lsls	r3, r3, #20
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a13      	ldr	r2, [pc, #76]	; (8003e74 <TIM_OC6_SetConfig+0xa0>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d003      	beq.n	8003e34 <TIM_OC6_SetConfig+0x60>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a12      	ldr	r2, [pc, #72]	; (8003e78 <TIM_OC6_SetConfig+0xa4>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d109      	bne.n	8003e48 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	029b      	lsls	r3, r3, #10
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	621a      	str	r2, [r3, #32]
}
 8003e62:	bf00      	nop
 8003e64:	371c      	adds	r7, #28
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	feff8fff 	.word	0xfeff8fff
 8003e74:	40010000 	.word	0x40010000
 8003e78:	40010400 	.word	0x40010400

08003e7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b087      	sub	sp, #28
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	f023 0201 	bic.w	r2, r3, #1
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ea6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	011b      	lsls	r3, r3, #4
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f023 030a 	bic.w	r3, r3, #10
 8003eb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	621a      	str	r2, [r3, #32]
}
 8003ece:	bf00      	nop
 8003ed0:	371c      	adds	r7, #28
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b087      	sub	sp, #28
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	60f8      	str	r0, [r7, #12]
 8003ee2:	60b9      	str	r1, [r7, #8]
 8003ee4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	f023 0210 	bic.w	r2, r3, #16
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	031b      	lsls	r3, r3, #12
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	011b      	lsls	r3, r3, #4
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	621a      	str	r2, [r3, #32]
}
 8003f2e:	bf00      	nop
 8003f30:	371c      	adds	r7, #28
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b085      	sub	sp, #20
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
 8003f42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f043 0307 	orr.w	r3, r3, #7
 8003f5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	609a      	str	r2, [r3, #8]
}
 8003f64:	bf00      	nop
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b087      	sub	sp, #28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
 8003f7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	021a      	lsls	r2, r3, #8
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	431a      	orrs	r2, r3
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	609a      	str	r2, [r3, #8]
}
 8003fa4:	bf00      	nop
 8003fa6:	371c      	adds	r7, #28
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d101      	bne.n	8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	e06d      	b.n	80040a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a30      	ldr	r2, [pc, #192]	; (80040b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d004      	beq.n	8003ffc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a2f      	ldr	r2, [pc, #188]	; (80040b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d108      	bne.n	800400e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004002:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	4313      	orrs	r3, r2
 800400c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004014:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	4313      	orrs	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a20      	ldr	r2, [pc, #128]	; (80040b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d022      	beq.n	8004078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800403a:	d01d      	beq.n	8004078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a1d      	ldr	r2, [pc, #116]	; (80040b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d018      	beq.n	8004078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a1c      	ldr	r2, [pc, #112]	; (80040bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d013      	beq.n	8004078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a1a      	ldr	r2, [pc, #104]	; (80040c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00e      	beq.n	8004078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a15      	ldr	r2, [pc, #84]	; (80040b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d009      	beq.n	8004078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a16      	ldr	r2, [pc, #88]	; (80040c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d004      	beq.n	8004078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a15      	ldr	r2, [pc, #84]	; (80040c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d10c      	bne.n	8004092 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800407e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	4313      	orrs	r3, r2
 8004088:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	40010000 	.word	0x40010000
 80040b4:	40010400 	.word	0x40010400
 80040b8:	40000400 	.word	0x40000400
 80040bc:	40000800 	.word	0x40000800
 80040c0:	40000c00 	.word	0x40000c00
 80040c4:	40014000 	.word	0x40014000
 80040c8:	40001800 	.word	0x40001800

080040cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d101      	bne.n	80040e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80040e4:	2302      	movs	r3, #2
 80040e6:	e065      	b.n	80041b4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	4313      	orrs	r3, r2
 800410a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	4313      	orrs	r3, r2
 8004118:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4313      	orrs	r3, r2
 8004126:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	4313      	orrs	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	4313      	orrs	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414e:	4313      	orrs	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	041b      	lsls	r3, r3, #16
 800415e:	4313      	orrs	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a16      	ldr	r2, [pc, #88]	; (80041c0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d004      	beq.n	8004176 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a14      	ldr	r2, [pc, #80]	; (80041c4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d115      	bne.n	80041a2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	051b      	lsls	r3, r3, #20
 8004182:	4313      	orrs	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	4313      	orrs	r3, r2
 8004192:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	4313      	orrs	r3, r2
 80041a0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	40010000 	.word	0x40010000
 80041c4:	40010400 	.word	0x40010400

080041c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e040      	b.n	800425c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d106      	bne.n	80041f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fd f82c 	bl	8001248 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2224      	movs	r2, #36	; 0x24
 80041f4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0201 	bic.w	r2, r2, #1
 8004204:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f8b0 	bl	800436c <UART_SetConfig>
 800420c:	4603      	mov	r3, r0
 800420e:	2b01      	cmp	r3, #1
 8004210:	d101      	bne.n	8004216 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e022      	b.n	800425c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	2b00      	cmp	r3, #0
 800421c:	d002      	beq.n	8004224 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 fb08 	bl	8004834 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004232:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689a      	ldr	r2, [r3, #8]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004242:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0201 	orr.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 fb8f 	bl	8004978 <UART_CheckIdleState>
 800425a:	4603      	mov	r3, r0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3708      	adds	r7, #8
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b08a      	sub	sp, #40	; 0x28
 8004268:	af02      	add	r7, sp, #8
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	603b      	str	r3, [r7, #0]
 8004270:	4613      	mov	r3, r2
 8004272:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004278:	2b20      	cmp	r3, #32
 800427a:	d171      	bne.n	8004360 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <HAL_UART_Transmit+0x24>
 8004282:	88fb      	ldrh	r3, [r7, #6]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e06a      	b.n	8004362 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2221      	movs	r2, #33	; 0x21
 8004298:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800429a:	f7fd f8af 	bl	80013fc <HAL_GetTick>
 800429e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	88fa      	ldrh	r2, [r7, #6]
 80042a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	88fa      	ldrh	r2, [r7, #6]
 80042ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b8:	d108      	bne.n	80042cc <HAL_UART_Transmit+0x68>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d104      	bne.n	80042cc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80042c2:	2300      	movs	r3, #0
 80042c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	61bb      	str	r3, [r7, #24]
 80042ca:	e003      	b.n	80042d4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042d0:	2300      	movs	r3, #0
 80042d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042d4:	e02c      	b.n	8004330 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	2200      	movs	r2, #0
 80042de:	2180      	movs	r1, #128	; 0x80
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f000 fb96 	bl	8004a12 <UART_WaitOnFlagUntilTimeout>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d001      	beq.n	80042f0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e038      	b.n	8004362 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10b      	bne.n	800430e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	881b      	ldrh	r3, [r3, #0]
 80042fa:	461a      	mov	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004304:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	3302      	adds	r3, #2
 800430a:	61bb      	str	r3, [r7, #24]
 800430c:	e007      	b.n	800431e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	781a      	ldrb	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	3301      	adds	r3, #1
 800431c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004324:	b29b      	uxth	r3, r3
 8004326:	3b01      	subs	r3, #1
 8004328:	b29a      	uxth	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004336:	b29b      	uxth	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1cc      	bne.n	80042d6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	2200      	movs	r2, #0
 8004344:	2140      	movs	r1, #64	; 0x40
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 fb63 	bl	8004a12 <UART_WaitOnFlagUntilTimeout>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e005      	b.n	8004362 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2220      	movs	r2, #32
 800435a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800435c:	2300      	movs	r3, #0
 800435e:	e000      	b.n	8004362 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004360:	2302      	movs	r3, #2
  }
}
 8004362:	4618      	mov	r0, r3
 8004364:	3720      	adds	r7, #32
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b088      	sub	sp, #32
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004374:	2300      	movs	r3, #0
 8004376:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	431a      	orrs	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	69db      	ldr	r3, [r3, #28]
 800438c:	4313      	orrs	r3, r2
 800438e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	4ba6      	ldr	r3, [pc, #664]	; (8004630 <UART_SetConfig+0x2c4>)
 8004398:	4013      	ands	r3, r2
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6812      	ldr	r2, [r2, #0]
 800439e:	6979      	ldr	r1, [r7, #20]
 80043a0:	430b      	orrs	r3, r1
 80043a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	430a      	orrs	r2, r1
 80043dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a94      	ldr	r2, [pc, #592]	; (8004634 <UART_SetConfig+0x2c8>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d120      	bne.n	800442a <UART_SetConfig+0xbe>
 80043e8:	4b93      	ldr	r3, [pc, #588]	; (8004638 <UART_SetConfig+0x2cc>)
 80043ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	2b03      	cmp	r3, #3
 80043f4:	d816      	bhi.n	8004424 <UART_SetConfig+0xb8>
 80043f6:	a201      	add	r2, pc, #4	; (adr r2, 80043fc <UART_SetConfig+0x90>)
 80043f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fc:	0800440d 	.word	0x0800440d
 8004400:	08004419 	.word	0x08004419
 8004404:	08004413 	.word	0x08004413
 8004408:	0800441f 	.word	0x0800441f
 800440c:	2301      	movs	r3, #1
 800440e:	77fb      	strb	r3, [r7, #31]
 8004410:	e150      	b.n	80046b4 <UART_SetConfig+0x348>
 8004412:	2302      	movs	r3, #2
 8004414:	77fb      	strb	r3, [r7, #31]
 8004416:	e14d      	b.n	80046b4 <UART_SetConfig+0x348>
 8004418:	2304      	movs	r3, #4
 800441a:	77fb      	strb	r3, [r7, #31]
 800441c:	e14a      	b.n	80046b4 <UART_SetConfig+0x348>
 800441e:	2308      	movs	r3, #8
 8004420:	77fb      	strb	r3, [r7, #31]
 8004422:	e147      	b.n	80046b4 <UART_SetConfig+0x348>
 8004424:	2310      	movs	r3, #16
 8004426:	77fb      	strb	r3, [r7, #31]
 8004428:	e144      	b.n	80046b4 <UART_SetConfig+0x348>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a83      	ldr	r2, [pc, #524]	; (800463c <UART_SetConfig+0x2d0>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d132      	bne.n	800449a <UART_SetConfig+0x12e>
 8004434:	4b80      	ldr	r3, [pc, #512]	; (8004638 <UART_SetConfig+0x2cc>)
 8004436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443a:	f003 030c 	and.w	r3, r3, #12
 800443e:	2b0c      	cmp	r3, #12
 8004440:	d828      	bhi.n	8004494 <UART_SetConfig+0x128>
 8004442:	a201      	add	r2, pc, #4	; (adr r2, 8004448 <UART_SetConfig+0xdc>)
 8004444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004448:	0800447d 	.word	0x0800447d
 800444c:	08004495 	.word	0x08004495
 8004450:	08004495 	.word	0x08004495
 8004454:	08004495 	.word	0x08004495
 8004458:	08004489 	.word	0x08004489
 800445c:	08004495 	.word	0x08004495
 8004460:	08004495 	.word	0x08004495
 8004464:	08004495 	.word	0x08004495
 8004468:	08004483 	.word	0x08004483
 800446c:	08004495 	.word	0x08004495
 8004470:	08004495 	.word	0x08004495
 8004474:	08004495 	.word	0x08004495
 8004478:	0800448f 	.word	0x0800448f
 800447c:	2300      	movs	r3, #0
 800447e:	77fb      	strb	r3, [r7, #31]
 8004480:	e118      	b.n	80046b4 <UART_SetConfig+0x348>
 8004482:	2302      	movs	r3, #2
 8004484:	77fb      	strb	r3, [r7, #31]
 8004486:	e115      	b.n	80046b4 <UART_SetConfig+0x348>
 8004488:	2304      	movs	r3, #4
 800448a:	77fb      	strb	r3, [r7, #31]
 800448c:	e112      	b.n	80046b4 <UART_SetConfig+0x348>
 800448e:	2308      	movs	r3, #8
 8004490:	77fb      	strb	r3, [r7, #31]
 8004492:	e10f      	b.n	80046b4 <UART_SetConfig+0x348>
 8004494:	2310      	movs	r3, #16
 8004496:	77fb      	strb	r3, [r7, #31]
 8004498:	e10c      	b.n	80046b4 <UART_SetConfig+0x348>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a68      	ldr	r2, [pc, #416]	; (8004640 <UART_SetConfig+0x2d4>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d120      	bne.n	80044e6 <UART_SetConfig+0x17a>
 80044a4:	4b64      	ldr	r3, [pc, #400]	; (8004638 <UART_SetConfig+0x2cc>)
 80044a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80044ae:	2b30      	cmp	r3, #48	; 0x30
 80044b0:	d013      	beq.n	80044da <UART_SetConfig+0x16e>
 80044b2:	2b30      	cmp	r3, #48	; 0x30
 80044b4:	d814      	bhi.n	80044e0 <UART_SetConfig+0x174>
 80044b6:	2b20      	cmp	r3, #32
 80044b8:	d009      	beq.n	80044ce <UART_SetConfig+0x162>
 80044ba:	2b20      	cmp	r3, #32
 80044bc:	d810      	bhi.n	80044e0 <UART_SetConfig+0x174>
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d002      	beq.n	80044c8 <UART_SetConfig+0x15c>
 80044c2:	2b10      	cmp	r3, #16
 80044c4:	d006      	beq.n	80044d4 <UART_SetConfig+0x168>
 80044c6:	e00b      	b.n	80044e0 <UART_SetConfig+0x174>
 80044c8:	2300      	movs	r3, #0
 80044ca:	77fb      	strb	r3, [r7, #31]
 80044cc:	e0f2      	b.n	80046b4 <UART_SetConfig+0x348>
 80044ce:	2302      	movs	r3, #2
 80044d0:	77fb      	strb	r3, [r7, #31]
 80044d2:	e0ef      	b.n	80046b4 <UART_SetConfig+0x348>
 80044d4:	2304      	movs	r3, #4
 80044d6:	77fb      	strb	r3, [r7, #31]
 80044d8:	e0ec      	b.n	80046b4 <UART_SetConfig+0x348>
 80044da:	2308      	movs	r3, #8
 80044dc:	77fb      	strb	r3, [r7, #31]
 80044de:	e0e9      	b.n	80046b4 <UART_SetConfig+0x348>
 80044e0:	2310      	movs	r3, #16
 80044e2:	77fb      	strb	r3, [r7, #31]
 80044e4:	e0e6      	b.n	80046b4 <UART_SetConfig+0x348>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a56      	ldr	r2, [pc, #344]	; (8004644 <UART_SetConfig+0x2d8>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d120      	bne.n	8004532 <UART_SetConfig+0x1c6>
 80044f0:	4b51      	ldr	r3, [pc, #324]	; (8004638 <UART_SetConfig+0x2cc>)
 80044f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80044fa:	2bc0      	cmp	r3, #192	; 0xc0
 80044fc:	d013      	beq.n	8004526 <UART_SetConfig+0x1ba>
 80044fe:	2bc0      	cmp	r3, #192	; 0xc0
 8004500:	d814      	bhi.n	800452c <UART_SetConfig+0x1c0>
 8004502:	2b80      	cmp	r3, #128	; 0x80
 8004504:	d009      	beq.n	800451a <UART_SetConfig+0x1ae>
 8004506:	2b80      	cmp	r3, #128	; 0x80
 8004508:	d810      	bhi.n	800452c <UART_SetConfig+0x1c0>
 800450a:	2b00      	cmp	r3, #0
 800450c:	d002      	beq.n	8004514 <UART_SetConfig+0x1a8>
 800450e:	2b40      	cmp	r3, #64	; 0x40
 8004510:	d006      	beq.n	8004520 <UART_SetConfig+0x1b4>
 8004512:	e00b      	b.n	800452c <UART_SetConfig+0x1c0>
 8004514:	2300      	movs	r3, #0
 8004516:	77fb      	strb	r3, [r7, #31]
 8004518:	e0cc      	b.n	80046b4 <UART_SetConfig+0x348>
 800451a:	2302      	movs	r3, #2
 800451c:	77fb      	strb	r3, [r7, #31]
 800451e:	e0c9      	b.n	80046b4 <UART_SetConfig+0x348>
 8004520:	2304      	movs	r3, #4
 8004522:	77fb      	strb	r3, [r7, #31]
 8004524:	e0c6      	b.n	80046b4 <UART_SetConfig+0x348>
 8004526:	2308      	movs	r3, #8
 8004528:	77fb      	strb	r3, [r7, #31]
 800452a:	e0c3      	b.n	80046b4 <UART_SetConfig+0x348>
 800452c:	2310      	movs	r3, #16
 800452e:	77fb      	strb	r3, [r7, #31]
 8004530:	e0c0      	b.n	80046b4 <UART_SetConfig+0x348>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a44      	ldr	r2, [pc, #272]	; (8004648 <UART_SetConfig+0x2dc>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d125      	bne.n	8004588 <UART_SetConfig+0x21c>
 800453c:	4b3e      	ldr	r3, [pc, #248]	; (8004638 <UART_SetConfig+0x2cc>)
 800453e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004546:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800454a:	d017      	beq.n	800457c <UART_SetConfig+0x210>
 800454c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004550:	d817      	bhi.n	8004582 <UART_SetConfig+0x216>
 8004552:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004556:	d00b      	beq.n	8004570 <UART_SetConfig+0x204>
 8004558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800455c:	d811      	bhi.n	8004582 <UART_SetConfig+0x216>
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <UART_SetConfig+0x1fe>
 8004562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004566:	d006      	beq.n	8004576 <UART_SetConfig+0x20a>
 8004568:	e00b      	b.n	8004582 <UART_SetConfig+0x216>
 800456a:	2300      	movs	r3, #0
 800456c:	77fb      	strb	r3, [r7, #31]
 800456e:	e0a1      	b.n	80046b4 <UART_SetConfig+0x348>
 8004570:	2302      	movs	r3, #2
 8004572:	77fb      	strb	r3, [r7, #31]
 8004574:	e09e      	b.n	80046b4 <UART_SetConfig+0x348>
 8004576:	2304      	movs	r3, #4
 8004578:	77fb      	strb	r3, [r7, #31]
 800457a:	e09b      	b.n	80046b4 <UART_SetConfig+0x348>
 800457c:	2308      	movs	r3, #8
 800457e:	77fb      	strb	r3, [r7, #31]
 8004580:	e098      	b.n	80046b4 <UART_SetConfig+0x348>
 8004582:	2310      	movs	r3, #16
 8004584:	77fb      	strb	r3, [r7, #31]
 8004586:	e095      	b.n	80046b4 <UART_SetConfig+0x348>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a2f      	ldr	r2, [pc, #188]	; (800464c <UART_SetConfig+0x2e0>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d125      	bne.n	80045de <UART_SetConfig+0x272>
 8004592:	4b29      	ldr	r3, [pc, #164]	; (8004638 <UART_SetConfig+0x2cc>)
 8004594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004598:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800459c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045a0:	d017      	beq.n	80045d2 <UART_SetConfig+0x266>
 80045a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045a6:	d817      	bhi.n	80045d8 <UART_SetConfig+0x26c>
 80045a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045ac:	d00b      	beq.n	80045c6 <UART_SetConfig+0x25a>
 80045ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045b2:	d811      	bhi.n	80045d8 <UART_SetConfig+0x26c>
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d003      	beq.n	80045c0 <UART_SetConfig+0x254>
 80045b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045bc:	d006      	beq.n	80045cc <UART_SetConfig+0x260>
 80045be:	e00b      	b.n	80045d8 <UART_SetConfig+0x26c>
 80045c0:	2301      	movs	r3, #1
 80045c2:	77fb      	strb	r3, [r7, #31]
 80045c4:	e076      	b.n	80046b4 <UART_SetConfig+0x348>
 80045c6:	2302      	movs	r3, #2
 80045c8:	77fb      	strb	r3, [r7, #31]
 80045ca:	e073      	b.n	80046b4 <UART_SetConfig+0x348>
 80045cc:	2304      	movs	r3, #4
 80045ce:	77fb      	strb	r3, [r7, #31]
 80045d0:	e070      	b.n	80046b4 <UART_SetConfig+0x348>
 80045d2:	2308      	movs	r3, #8
 80045d4:	77fb      	strb	r3, [r7, #31]
 80045d6:	e06d      	b.n	80046b4 <UART_SetConfig+0x348>
 80045d8:	2310      	movs	r3, #16
 80045da:	77fb      	strb	r3, [r7, #31]
 80045dc:	e06a      	b.n	80046b4 <UART_SetConfig+0x348>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a1b      	ldr	r2, [pc, #108]	; (8004650 <UART_SetConfig+0x2e4>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d138      	bne.n	800465a <UART_SetConfig+0x2ee>
 80045e8:	4b13      	ldr	r3, [pc, #76]	; (8004638 <UART_SetConfig+0x2cc>)
 80045ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80045f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80045f6:	d017      	beq.n	8004628 <UART_SetConfig+0x2bc>
 80045f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80045fc:	d82a      	bhi.n	8004654 <UART_SetConfig+0x2e8>
 80045fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004602:	d00b      	beq.n	800461c <UART_SetConfig+0x2b0>
 8004604:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004608:	d824      	bhi.n	8004654 <UART_SetConfig+0x2e8>
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <UART_SetConfig+0x2aa>
 800460e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004612:	d006      	beq.n	8004622 <UART_SetConfig+0x2b6>
 8004614:	e01e      	b.n	8004654 <UART_SetConfig+0x2e8>
 8004616:	2300      	movs	r3, #0
 8004618:	77fb      	strb	r3, [r7, #31]
 800461a:	e04b      	b.n	80046b4 <UART_SetConfig+0x348>
 800461c:	2302      	movs	r3, #2
 800461e:	77fb      	strb	r3, [r7, #31]
 8004620:	e048      	b.n	80046b4 <UART_SetConfig+0x348>
 8004622:	2304      	movs	r3, #4
 8004624:	77fb      	strb	r3, [r7, #31]
 8004626:	e045      	b.n	80046b4 <UART_SetConfig+0x348>
 8004628:	2308      	movs	r3, #8
 800462a:	77fb      	strb	r3, [r7, #31]
 800462c:	e042      	b.n	80046b4 <UART_SetConfig+0x348>
 800462e:	bf00      	nop
 8004630:	efff69f3 	.word	0xefff69f3
 8004634:	40011000 	.word	0x40011000
 8004638:	40023800 	.word	0x40023800
 800463c:	40004400 	.word	0x40004400
 8004640:	40004800 	.word	0x40004800
 8004644:	40004c00 	.word	0x40004c00
 8004648:	40005000 	.word	0x40005000
 800464c:	40011400 	.word	0x40011400
 8004650:	40007800 	.word	0x40007800
 8004654:	2310      	movs	r3, #16
 8004656:	77fb      	strb	r3, [r7, #31]
 8004658:	e02c      	b.n	80046b4 <UART_SetConfig+0x348>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a72      	ldr	r2, [pc, #456]	; (8004828 <UART_SetConfig+0x4bc>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d125      	bne.n	80046b0 <UART_SetConfig+0x344>
 8004664:	4b71      	ldr	r3, [pc, #452]	; (800482c <UART_SetConfig+0x4c0>)
 8004666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800466e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004672:	d017      	beq.n	80046a4 <UART_SetConfig+0x338>
 8004674:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004678:	d817      	bhi.n	80046aa <UART_SetConfig+0x33e>
 800467a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800467e:	d00b      	beq.n	8004698 <UART_SetConfig+0x32c>
 8004680:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004684:	d811      	bhi.n	80046aa <UART_SetConfig+0x33e>
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <UART_SetConfig+0x326>
 800468a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800468e:	d006      	beq.n	800469e <UART_SetConfig+0x332>
 8004690:	e00b      	b.n	80046aa <UART_SetConfig+0x33e>
 8004692:	2300      	movs	r3, #0
 8004694:	77fb      	strb	r3, [r7, #31]
 8004696:	e00d      	b.n	80046b4 <UART_SetConfig+0x348>
 8004698:	2302      	movs	r3, #2
 800469a:	77fb      	strb	r3, [r7, #31]
 800469c:	e00a      	b.n	80046b4 <UART_SetConfig+0x348>
 800469e:	2304      	movs	r3, #4
 80046a0:	77fb      	strb	r3, [r7, #31]
 80046a2:	e007      	b.n	80046b4 <UART_SetConfig+0x348>
 80046a4:	2308      	movs	r3, #8
 80046a6:	77fb      	strb	r3, [r7, #31]
 80046a8:	e004      	b.n	80046b4 <UART_SetConfig+0x348>
 80046aa:	2310      	movs	r3, #16
 80046ac:	77fb      	strb	r3, [r7, #31]
 80046ae:	e001      	b.n	80046b4 <UART_SetConfig+0x348>
 80046b0:	2310      	movs	r3, #16
 80046b2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046bc:	d15b      	bne.n	8004776 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80046be:	7ffb      	ldrb	r3, [r7, #31]
 80046c0:	2b08      	cmp	r3, #8
 80046c2:	d828      	bhi.n	8004716 <UART_SetConfig+0x3aa>
 80046c4:	a201      	add	r2, pc, #4	; (adr r2, 80046cc <UART_SetConfig+0x360>)
 80046c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ca:	bf00      	nop
 80046cc:	080046f1 	.word	0x080046f1
 80046d0:	080046f9 	.word	0x080046f9
 80046d4:	08004701 	.word	0x08004701
 80046d8:	08004717 	.word	0x08004717
 80046dc:	08004707 	.word	0x08004707
 80046e0:	08004717 	.word	0x08004717
 80046e4:	08004717 	.word	0x08004717
 80046e8:	08004717 	.word	0x08004717
 80046ec:	0800470f 	.word	0x0800470f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046f0:	f7fe f9e0 	bl	8002ab4 <HAL_RCC_GetPCLK1Freq>
 80046f4:	61b8      	str	r0, [r7, #24]
        break;
 80046f6:	e013      	b.n	8004720 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046f8:	f7fe f9f0 	bl	8002adc <HAL_RCC_GetPCLK2Freq>
 80046fc:	61b8      	str	r0, [r7, #24]
        break;
 80046fe:	e00f      	b.n	8004720 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004700:	4b4b      	ldr	r3, [pc, #300]	; (8004830 <UART_SetConfig+0x4c4>)
 8004702:	61bb      	str	r3, [r7, #24]
        break;
 8004704:	e00c      	b.n	8004720 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004706:	f7fe f903 	bl	8002910 <HAL_RCC_GetSysClockFreq>
 800470a:	61b8      	str	r0, [r7, #24]
        break;
 800470c:	e008      	b.n	8004720 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800470e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004712:	61bb      	str	r3, [r7, #24]
        break;
 8004714:	e004      	b.n	8004720 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	77bb      	strb	r3, [r7, #30]
        break;
 800471e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d074      	beq.n	8004810 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	005a      	lsls	r2, r3, #1
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	085b      	lsrs	r3, r3, #1
 8004730:	441a      	add	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	fbb2 f3f3 	udiv	r3, r2, r3
 800473a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	2b0f      	cmp	r3, #15
 8004740:	d916      	bls.n	8004770 <UART_SetConfig+0x404>
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004748:	d212      	bcs.n	8004770 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	b29b      	uxth	r3, r3
 800474e:	f023 030f 	bic.w	r3, r3, #15
 8004752:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	085b      	lsrs	r3, r3, #1
 8004758:	b29b      	uxth	r3, r3
 800475a:	f003 0307 	and.w	r3, r3, #7
 800475e:	b29a      	uxth	r2, r3
 8004760:	89fb      	ldrh	r3, [r7, #14]
 8004762:	4313      	orrs	r3, r2
 8004764:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	89fa      	ldrh	r2, [r7, #14]
 800476c:	60da      	str	r2, [r3, #12]
 800476e:	e04f      	b.n	8004810 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	77bb      	strb	r3, [r7, #30]
 8004774:	e04c      	b.n	8004810 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004776:	7ffb      	ldrb	r3, [r7, #31]
 8004778:	2b08      	cmp	r3, #8
 800477a:	d828      	bhi.n	80047ce <UART_SetConfig+0x462>
 800477c:	a201      	add	r2, pc, #4	; (adr r2, 8004784 <UART_SetConfig+0x418>)
 800477e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004782:	bf00      	nop
 8004784:	080047a9 	.word	0x080047a9
 8004788:	080047b1 	.word	0x080047b1
 800478c:	080047b9 	.word	0x080047b9
 8004790:	080047cf 	.word	0x080047cf
 8004794:	080047bf 	.word	0x080047bf
 8004798:	080047cf 	.word	0x080047cf
 800479c:	080047cf 	.word	0x080047cf
 80047a0:	080047cf 	.word	0x080047cf
 80047a4:	080047c7 	.word	0x080047c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047a8:	f7fe f984 	bl	8002ab4 <HAL_RCC_GetPCLK1Freq>
 80047ac:	61b8      	str	r0, [r7, #24]
        break;
 80047ae:	e013      	b.n	80047d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047b0:	f7fe f994 	bl	8002adc <HAL_RCC_GetPCLK2Freq>
 80047b4:	61b8      	str	r0, [r7, #24]
        break;
 80047b6:	e00f      	b.n	80047d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047b8:	4b1d      	ldr	r3, [pc, #116]	; (8004830 <UART_SetConfig+0x4c4>)
 80047ba:	61bb      	str	r3, [r7, #24]
        break;
 80047bc:	e00c      	b.n	80047d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047be:	f7fe f8a7 	bl	8002910 <HAL_RCC_GetSysClockFreq>
 80047c2:	61b8      	str	r0, [r7, #24]
        break;
 80047c4:	e008      	b.n	80047d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ca:	61bb      	str	r3, [r7, #24]
        break;
 80047cc:	e004      	b.n	80047d8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	77bb      	strb	r3, [r7, #30]
        break;
 80047d6:	bf00      	nop
    }

    if (pclk != 0U)
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d018      	beq.n	8004810 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	085a      	lsrs	r2, r3, #1
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	441a      	add	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	2b0f      	cmp	r3, #15
 80047f6:	d909      	bls.n	800480c <UART_SetConfig+0x4a0>
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047fe:	d205      	bcs.n	800480c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	b29a      	uxth	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	60da      	str	r2, [r3, #12]
 800480a:	e001      	b.n	8004810 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800481c:	7fbb      	ldrb	r3, [r7, #30]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3720      	adds	r7, #32
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	40007c00 	.word	0x40007c00
 800482c:	40023800 	.word	0x40023800
 8004830:	00f42400 	.word	0x00f42400

08004834 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00a      	beq.n	800485e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	430a      	orrs	r2, r1
 800485c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00a      	beq.n	8004880 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	430a      	orrs	r2, r1
 800487e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00a      	beq.n	80048a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	f003 0308 	and.w	r3, r3, #8
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00a      	beq.n	80048c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	f003 0310 	and.w	r3, r3, #16
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00a      	beq.n	80048e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	f003 0320 	and.w	r3, r3, #32
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00a      	beq.n	8004908 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004910:	2b00      	cmp	r3, #0
 8004912:	d01a      	beq.n	800494a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	430a      	orrs	r2, r1
 8004928:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004932:	d10a      	bne.n	800494a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00a      	beq.n	800496c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	430a      	orrs	r2, r1
 800496a:	605a      	str	r2, [r3, #4]
  }
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af02      	add	r7, sp, #8
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004988:	f7fc fd38 	bl	80013fc <HAL_GetTick>
 800498c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0308 	and.w	r3, r3, #8
 8004998:	2b08      	cmp	r3, #8
 800499a:	d10e      	bne.n	80049ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800499c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f831 	bl	8004a12 <UART_WaitOnFlagUntilTimeout>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e027      	b.n	8004a0a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b04      	cmp	r3, #4
 80049c6:	d10e      	bne.n	80049e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f81b 	bl	8004a12 <UART_WaitOnFlagUntilTimeout>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e011      	b.n	8004a0a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2220      	movs	r2, #32
 80049ea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2220      	movs	r2, #32
 80049f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b09c      	sub	sp, #112	; 0x70
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	60f8      	str	r0, [r7, #12]
 8004a1a:	60b9      	str	r1, [r7, #8]
 8004a1c:	603b      	str	r3, [r7, #0]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a22:	e0a7      	b.n	8004b74 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a2a:	f000 80a3 	beq.w	8004b74 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a2e:	f7fc fce5 	bl	80013fc <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d302      	bcc.n	8004a44 <UART_WaitOnFlagUntilTimeout+0x32>
 8004a3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d13f      	bne.n	8004ac4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a4c:	e853 3f00 	ldrex	r3, [r3]
 8004a50:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a58:	667b      	str	r3, [r7, #100]	; 0x64
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	461a      	mov	r2, r3
 8004a60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a64:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a6a:	e841 2300 	strex	r3, r2, [r1]
 8004a6e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1e6      	bne.n	8004a44 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3308      	adds	r3, #8
 8004a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a80:	e853 3f00 	ldrex	r3, [r3]
 8004a84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a88:	f023 0301 	bic.w	r3, r3, #1
 8004a8c:	663b      	str	r3, [r7, #96]	; 0x60
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	3308      	adds	r3, #8
 8004a94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004a96:	64ba      	str	r2, [r7, #72]	; 0x48
 8004a98:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a9e:	e841 2300 	strex	r3, r2, [r1]
 8004aa2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1e5      	bne.n	8004a76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2220      	movs	r2, #32
 8004aae:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e068      	b.n	8004b96 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0304 	and.w	r3, r3, #4
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d050      	beq.n	8004b74 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	69db      	ldr	r3, [r3, #28]
 8004ad8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004adc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ae0:	d148      	bne.n	8004b74 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004aea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af4:	e853 3f00 	ldrex	r3, [r3]
 8004af8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	461a      	mov	r2, r3
 8004b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b0c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b12:	e841 2300 	strex	r3, r2, [r1]
 8004b16:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1e6      	bne.n	8004aec <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	3308      	adds	r3, #8
 8004b24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	e853 3f00 	ldrex	r3, [r3]
 8004b2c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	f023 0301 	bic.w	r3, r3, #1
 8004b34:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	3308      	adds	r3, #8
 8004b3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b3e:	623a      	str	r2, [r7, #32]
 8004b40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b42:	69f9      	ldr	r1, [r7, #28]
 8004b44:	6a3a      	ldr	r2, [r7, #32]
 8004b46:	e841 2300 	strex	r3, r2, [r1]
 8004b4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1e5      	bne.n	8004b1e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2220      	movs	r2, #32
 8004b56:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2220      	movs	r2, #32
 8004b64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e010      	b.n	8004b96 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	69da      	ldr	r2, [r3, #28]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	bf0c      	ite	eq
 8004b84:	2301      	moveq	r3, #1
 8004b86:	2300      	movne	r3, #0
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	79fb      	ldrb	r3, [r7, #7]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	f43f af48 	beq.w	8004a24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3770      	adds	r7, #112	; 0x70
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <__cvt>:
 8004b9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ba0:	ed2d 8b02 	vpush	{d8}
 8004ba4:	eeb0 8b40 	vmov.f64	d8, d0
 8004ba8:	b085      	sub	sp, #20
 8004baa:	4617      	mov	r7, r2
 8004bac:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004bae:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004bb0:	ee18 2a90 	vmov	r2, s17
 8004bb4:	f025 0520 	bic.w	r5, r5, #32
 8004bb8:	2a00      	cmp	r2, #0
 8004bba:	bfb6      	itet	lt
 8004bbc:	222d      	movlt	r2, #45	; 0x2d
 8004bbe:	2200      	movge	r2, #0
 8004bc0:	eeb1 8b40 	vneglt.f64	d8, d0
 8004bc4:	2d46      	cmp	r5, #70	; 0x46
 8004bc6:	460c      	mov	r4, r1
 8004bc8:	701a      	strb	r2, [r3, #0]
 8004bca:	d004      	beq.n	8004bd6 <__cvt+0x38>
 8004bcc:	2d45      	cmp	r5, #69	; 0x45
 8004bce:	d100      	bne.n	8004bd2 <__cvt+0x34>
 8004bd0:	3401      	adds	r4, #1
 8004bd2:	2102      	movs	r1, #2
 8004bd4:	e000      	b.n	8004bd8 <__cvt+0x3a>
 8004bd6:	2103      	movs	r1, #3
 8004bd8:	ab03      	add	r3, sp, #12
 8004bda:	9301      	str	r3, [sp, #4]
 8004bdc:	ab02      	add	r3, sp, #8
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	4622      	mov	r2, r4
 8004be2:	4633      	mov	r3, r6
 8004be4:	eeb0 0b48 	vmov.f64	d0, d8
 8004be8:	f001 f83a 	bl	8005c60 <_dtoa_r>
 8004bec:	2d47      	cmp	r5, #71	; 0x47
 8004bee:	d101      	bne.n	8004bf4 <__cvt+0x56>
 8004bf0:	07fb      	lsls	r3, r7, #31
 8004bf2:	d51a      	bpl.n	8004c2a <__cvt+0x8c>
 8004bf4:	2d46      	cmp	r5, #70	; 0x46
 8004bf6:	eb00 0204 	add.w	r2, r0, r4
 8004bfa:	d10c      	bne.n	8004c16 <__cvt+0x78>
 8004bfc:	7803      	ldrb	r3, [r0, #0]
 8004bfe:	2b30      	cmp	r3, #48	; 0x30
 8004c00:	d107      	bne.n	8004c12 <__cvt+0x74>
 8004c02:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c0a:	bf1c      	itt	ne
 8004c0c:	f1c4 0401 	rsbne	r4, r4, #1
 8004c10:	6034      	strne	r4, [r6, #0]
 8004c12:	6833      	ldr	r3, [r6, #0]
 8004c14:	441a      	add	r2, r3
 8004c16:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c1e:	bf08      	it	eq
 8004c20:	9203      	streq	r2, [sp, #12]
 8004c22:	2130      	movs	r1, #48	; 0x30
 8004c24:	9b03      	ldr	r3, [sp, #12]
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d307      	bcc.n	8004c3a <__cvt+0x9c>
 8004c2a:	9b03      	ldr	r3, [sp, #12]
 8004c2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c2e:	1a1b      	subs	r3, r3, r0
 8004c30:	6013      	str	r3, [r2, #0]
 8004c32:	b005      	add	sp, #20
 8004c34:	ecbd 8b02 	vpop	{d8}
 8004c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c3a:	1c5c      	adds	r4, r3, #1
 8004c3c:	9403      	str	r4, [sp, #12]
 8004c3e:	7019      	strb	r1, [r3, #0]
 8004c40:	e7f0      	b.n	8004c24 <__cvt+0x86>

08004c42 <__exponent>:
 8004c42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c44:	4603      	mov	r3, r0
 8004c46:	2900      	cmp	r1, #0
 8004c48:	bfb8      	it	lt
 8004c4a:	4249      	neglt	r1, r1
 8004c4c:	f803 2b02 	strb.w	r2, [r3], #2
 8004c50:	bfb4      	ite	lt
 8004c52:	222d      	movlt	r2, #45	; 0x2d
 8004c54:	222b      	movge	r2, #43	; 0x2b
 8004c56:	2909      	cmp	r1, #9
 8004c58:	7042      	strb	r2, [r0, #1]
 8004c5a:	dd2a      	ble.n	8004cb2 <__exponent+0x70>
 8004c5c:	f10d 0207 	add.w	r2, sp, #7
 8004c60:	4617      	mov	r7, r2
 8004c62:	260a      	movs	r6, #10
 8004c64:	4694      	mov	ip, r2
 8004c66:	fb91 f5f6 	sdiv	r5, r1, r6
 8004c6a:	fb06 1415 	mls	r4, r6, r5, r1
 8004c6e:	3430      	adds	r4, #48	; 0x30
 8004c70:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004c74:	460c      	mov	r4, r1
 8004c76:	2c63      	cmp	r4, #99	; 0x63
 8004c78:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8004c7c:	4629      	mov	r1, r5
 8004c7e:	dcf1      	bgt.n	8004c64 <__exponent+0x22>
 8004c80:	3130      	adds	r1, #48	; 0x30
 8004c82:	f1ac 0402 	sub.w	r4, ip, #2
 8004c86:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004c8a:	1c41      	adds	r1, r0, #1
 8004c8c:	4622      	mov	r2, r4
 8004c8e:	42ba      	cmp	r2, r7
 8004c90:	d30a      	bcc.n	8004ca8 <__exponent+0x66>
 8004c92:	f10d 0209 	add.w	r2, sp, #9
 8004c96:	eba2 020c 	sub.w	r2, r2, ip
 8004c9a:	42bc      	cmp	r4, r7
 8004c9c:	bf88      	it	hi
 8004c9e:	2200      	movhi	r2, #0
 8004ca0:	4413      	add	r3, r2
 8004ca2:	1a18      	subs	r0, r3, r0
 8004ca4:	b003      	add	sp, #12
 8004ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ca8:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004cac:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004cb0:	e7ed      	b.n	8004c8e <__exponent+0x4c>
 8004cb2:	2330      	movs	r3, #48	; 0x30
 8004cb4:	3130      	adds	r1, #48	; 0x30
 8004cb6:	7083      	strb	r3, [r0, #2]
 8004cb8:	70c1      	strb	r1, [r0, #3]
 8004cba:	1d03      	adds	r3, r0, #4
 8004cbc:	e7f1      	b.n	8004ca2 <__exponent+0x60>
	...

08004cc0 <_printf_float>:
 8004cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cc4:	b08b      	sub	sp, #44	; 0x2c
 8004cc6:	460c      	mov	r4, r1
 8004cc8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8004ccc:	4616      	mov	r6, r2
 8004cce:	461f      	mov	r7, r3
 8004cd0:	4605      	mov	r5, r0
 8004cd2:	f000 febf 	bl	8005a54 <_localeconv_r>
 8004cd6:	f8d0 b000 	ldr.w	fp, [r0]
 8004cda:	4658      	mov	r0, fp
 8004cdc:	f7fb fb00 	bl	80002e0 <strlen>
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	9308      	str	r3, [sp, #32]
 8004ce4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ce8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004cec:	6822      	ldr	r2, [r4, #0]
 8004cee:	3307      	adds	r3, #7
 8004cf0:	f023 0307 	bic.w	r3, r3, #7
 8004cf4:	f103 0108 	add.w	r1, r3, #8
 8004cf8:	f8c8 1000 	str.w	r1, [r8]
 8004cfc:	ed93 0b00 	vldr	d0, [r3]
 8004d00:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8004f60 <_printf_float+0x2a0>
 8004d04:	eeb0 7bc0 	vabs.f64	d7, d0
 8004d08:	eeb4 7b46 	vcmp.f64	d7, d6
 8004d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d10:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8004d14:	4682      	mov	sl, r0
 8004d16:	dd24      	ble.n	8004d62 <_printf_float+0xa2>
 8004d18:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d20:	d502      	bpl.n	8004d28 <_printf_float+0x68>
 8004d22:	232d      	movs	r3, #45	; 0x2d
 8004d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d28:	498f      	ldr	r1, [pc, #572]	; (8004f68 <_printf_float+0x2a8>)
 8004d2a:	4b90      	ldr	r3, [pc, #576]	; (8004f6c <_printf_float+0x2ac>)
 8004d2c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004d30:	bf94      	ite	ls
 8004d32:	4688      	movls	r8, r1
 8004d34:	4698      	movhi	r8, r3
 8004d36:	2303      	movs	r3, #3
 8004d38:	6123      	str	r3, [r4, #16]
 8004d3a:	f022 0204 	bic.w	r2, r2, #4
 8004d3e:	2300      	movs	r3, #0
 8004d40:	6022      	str	r2, [r4, #0]
 8004d42:	9304      	str	r3, [sp, #16]
 8004d44:	9700      	str	r7, [sp, #0]
 8004d46:	4633      	mov	r3, r6
 8004d48:	aa09      	add	r2, sp, #36	; 0x24
 8004d4a:	4621      	mov	r1, r4
 8004d4c:	4628      	mov	r0, r5
 8004d4e:	f000 f9d1 	bl	80050f4 <_printf_common>
 8004d52:	3001      	adds	r0, #1
 8004d54:	f040 808a 	bne.w	8004e6c <_printf_float+0x1ac>
 8004d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d5c:	b00b      	add	sp, #44	; 0x2c
 8004d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d62:	eeb4 0b40 	vcmp.f64	d0, d0
 8004d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d6a:	d709      	bvc.n	8004d80 <_printf_float+0xc0>
 8004d6c:	ee10 3a90 	vmov	r3, s1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	bfbc      	itt	lt
 8004d74:	232d      	movlt	r3, #45	; 0x2d
 8004d76:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004d7a:	497d      	ldr	r1, [pc, #500]	; (8004f70 <_printf_float+0x2b0>)
 8004d7c:	4b7d      	ldr	r3, [pc, #500]	; (8004f74 <_printf_float+0x2b4>)
 8004d7e:	e7d5      	b.n	8004d2c <_printf_float+0x6c>
 8004d80:	6863      	ldr	r3, [r4, #4]
 8004d82:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004d86:	9104      	str	r1, [sp, #16]
 8004d88:	1c59      	adds	r1, r3, #1
 8004d8a:	d13c      	bne.n	8004e06 <_printf_float+0x146>
 8004d8c:	2306      	movs	r3, #6
 8004d8e:	6063      	str	r3, [r4, #4]
 8004d90:	2300      	movs	r3, #0
 8004d92:	9303      	str	r3, [sp, #12]
 8004d94:	ab08      	add	r3, sp, #32
 8004d96:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8004d9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d9e:	ab07      	add	r3, sp, #28
 8004da0:	6861      	ldr	r1, [r4, #4]
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	6022      	str	r2, [r4, #0]
 8004da6:	f10d 031b 	add.w	r3, sp, #27
 8004daa:	4628      	mov	r0, r5
 8004dac:	f7ff fef7 	bl	8004b9e <__cvt>
 8004db0:	9b04      	ldr	r3, [sp, #16]
 8004db2:	9907      	ldr	r1, [sp, #28]
 8004db4:	2b47      	cmp	r3, #71	; 0x47
 8004db6:	4680      	mov	r8, r0
 8004db8:	d108      	bne.n	8004dcc <_printf_float+0x10c>
 8004dba:	1cc8      	adds	r0, r1, #3
 8004dbc:	db02      	blt.n	8004dc4 <_printf_float+0x104>
 8004dbe:	6863      	ldr	r3, [r4, #4]
 8004dc0:	4299      	cmp	r1, r3
 8004dc2:	dd41      	ble.n	8004e48 <_printf_float+0x188>
 8004dc4:	f1a9 0902 	sub.w	r9, r9, #2
 8004dc8:	fa5f f989 	uxtb.w	r9, r9
 8004dcc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004dd0:	d820      	bhi.n	8004e14 <_printf_float+0x154>
 8004dd2:	3901      	subs	r1, #1
 8004dd4:	464a      	mov	r2, r9
 8004dd6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004dda:	9107      	str	r1, [sp, #28]
 8004ddc:	f7ff ff31 	bl	8004c42 <__exponent>
 8004de0:	9a08      	ldr	r2, [sp, #32]
 8004de2:	9004      	str	r0, [sp, #16]
 8004de4:	1813      	adds	r3, r2, r0
 8004de6:	2a01      	cmp	r2, #1
 8004de8:	6123      	str	r3, [r4, #16]
 8004dea:	dc02      	bgt.n	8004df2 <_printf_float+0x132>
 8004dec:	6822      	ldr	r2, [r4, #0]
 8004dee:	07d2      	lsls	r2, r2, #31
 8004df0:	d501      	bpl.n	8004df6 <_printf_float+0x136>
 8004df2:	3301      	adds	r3, #1
 8004df4:	6123      	str	r3, [r4, #16]
 8004df6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d0a2      	beq.n	8004d44 <_printf_float+0x84>
 8004dfe:	232d      	movs	r3, #45	; 0x2d
 8004e00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e04:	e79e      	b.n	8004d44 <_printf_float+0x84>
 8004e06:	9904      	ldr	r1, [sp, #16]
 8004e08:	2947      	cmp	r1, #71	; 0x47
 8004e0a:	d1c1      	bne.n	8004d90 <_printf_float+0xd0>
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1bf      	bne.n	8004d90 <_printf_float+0xd0>
 8004e10:	2301      	movs	r3, #1
 8004e12:	e7bc      	b.n	8004d8e <_printf_float+0xce>
 8004e14:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004e18:	d118      	bne.n	8004e4c <_printf_float+0x18c>
 8004e1a:	2900      	cmp	r1, #0
 8004e1c:	6863      	ldr	r3, [r4, #4]
 8004e1e:	dd0b      	ble.n	8004e38 <_printf_float+0x178>
 8004e20:	6121      	str	r1, [r4, #16]
 8004e22:	b913      	cbnz	r3, 8004e2a <_printf_float+0x16a>
 8004e24:	6822      	ldr	r2, [r4, #0]
 8004e26:	07d0      	lsls	r0, r2, #31
 8004e28:	d502      	bpl.n	8004e30 <_printf_float+0x170>
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	440b      	add	r3, r1
 8004e2e:	6123      	str	r3, [r4, #16]
 8004e30:	2300      	movs	r3, #0
 8004e32:	65a1      	str	r1, [r4, #88]	; 0x58
 8004e34:	9304      	str	r3, [sp, #16]
 8004e36:	e7de      	b.n	8004df6 <_printf_float+0x136>
 8004e38:	b913      	cbnz	r3, 8004e40 <_printf_float+0x180>
 8004e3a:	6822      	ldr	r2, [r4, #0]
 8004e3c:	07d2      	lsls	r2, r2, #31
 8004e3e:	d501      	bpl.n	8004e44 <_printf_float+0x184>
 8004e40:	3302      	adds	r3, #2
 8004e42:	e7f4      	b.n	8004e2e <_printf_float+0x16e>
 8004e44:	2301      	movs	r3, #1
 8004e46:	e7f2      	b.n	8004e2e <_printf_float+0x16e>
 8004e48:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004e4c:	9b08      	ldr	r3, [sp, #32]
 8004e4e:	4299      	cmp	r1, r3
 8004e50:	db05      	blt.n	8004e5e <_printf_float+0x19e>
 8004e52:	6823      	ldr	r3, [r4, #0]
 8004e54:	6121      	str	r1, [r4, #16]
 8004e56:	07d8      	lsls	r0, r3, #31
 8004e58:	d5ea      	bpl.n	8004e30 <_printf_float+0x170>
 8004e5a:	1c4b      	adds	r3, r1, #1
 8004e5c:	e7e7      	b.n	8004e2e <_printf_float+0x16e>
 8004e5e:	2900      	cmp	r1, #0
 8004e60:	bfd4      	ite	le
 8004e62:	f1c1 0202 	rsble	r2, r1, #2
 8004e66:	2201      	movgt	r2, #1
 8004e68:	4413      	add	r3, r2
 8004e6a:	e7e0      	b.n	8004e2e <_printf_float+0x16e>
 8004e6c:	6823      	ldr	r3, [r4, #0]
 8004e6e:	055a      	lsls	r2, r3, #21
 8004e70:	d407      	bmi.n	8004e82 <_printf_float+0x1c2>
 8004e72:	6923      	ldr	r3, [r4, #16]
 8004e74:	4642      	mov	r2, r8
 8004e76:	4631      	mov	r1, r6
 8004e78:	4628      	mov	r0, r5
 8004e7a:	47b8      	blx	r7
 8004e7c:	3001      	adds	r0, #1
 8004e7e:	d12a      	bne.n	8004ed6 <_printf_float+0x216>
 8004e80:	e76a      	b.n	8004d58 <_printf_float+0x98>
 8004e82:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004e86:	f240 80e0 	bls.w	800504a <_printf_float+0x38a>
 8004e8a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004e8e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e96:	d133      	bne.n	8004f00 <_printf_float+0x240>
 8004e98:	4a37      	ldr	r2, [pc, #220]	; (8004f78 <_printf_float+0x2b8>)
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	4631      	mov	r1, r6
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	47b8      	blx	r7
 8004ea2:	3001      	adds	r0, #1
 8004ea4:	f43f af58 	beq.w	8004d58 <_printf_float+0x98>
 8004ea8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	db02      	blt.n	8004eb6 <_printf_float+0x1f6>
 8004eb0:	6823      	ldr	r3, [r4, #0]
 8004eb2:	07d8      	lsls	r0, r3, #31
 8004eb4:	d50f      	bpl.n	8004ed6 <_printf_float+0x216>
 8004eb6:	4653      	mov	r3, sl
 8004eb8:	465a      	mov	r2, fp
 8004eba:	4631      	mov	r1, r6
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	47b8      	blx	r7
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	f43f af49 	beq.w	8004d58 <_printf_float+0x98>
 8004ec6:	f04f 0800 	mov.w	r8, #0
 8004eca:	f104 091a 	add.w	r9, r4, #26
 8004ece:	9b08      	ldr	r3, [sp, #32]
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	4543      	cmp	r3, r8
 8004ed4:	dc09      	bgt.n	8004eea <_printf_float+0x22a>
 8004ed6:	6823      	ldr	r3, [r4, #0]
 8004ed8:	079b      	lsls	r3, r3, #30
 8004eda:	f100 8106 	bmi.w	80050ea <_printf_float+0x42a>
 8004ede:	68e0      	ldr	r0, [r4, #12]
 8004ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ee2:	4298      	cmp	r0, r3
 8004ee4:	bfb8      	it	lt
 8004ee6:	4618      	movlt	r0, r3
 8004ee8:	e738      	b.n	8004d5c <_printf_float+0x9c>
 8004eea:	2301      	movs	r3, #1
 8004eec:	464a      	mov	r2, r9
 8004eee:	4631      	mov	r1, r6
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	47b8      	blx	r7
 8004ef4:	3001      	adds	r0, #1
 8004ef6:	f43f af2f 	beq.w	8004d58 <_printf_float+0x98>
 8004efa:	f108 0801 	add.w	r8, r8, #1
 8004efe:	e7e6      	b.n	8004ece <_printf_float+0x20e>
 8004f00:	9b07      	ldr	r3, [sp, #28]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	dc3a      	bgt.n	8004f7c <_printf_float+0x2bc>
 8004f06:	4a1c      	ldr	r2, [pc, #112]	; (8004f78 <_printf_float+0x2b8>)
 8004f08:	2301      	movs	r3, #1
 8004f0a:	4631      	mov	r1, r6
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	47b8      	blx	r7
 8004f10:	3001      	adds	r0, #1
 8004f12:	f43f af21 	beq.w	8004d58 <_printf_float+0x98>
 8004f16:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	d102      	bne.n	8004f24 <_printf_float+0x264>
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	07d9      	lsls	r1, r3, #31
 8004f22:	d5d8      	bpl.n	8004ed6 <_printf_float+0x216>
 8004f24:	4653      	mov	r3, sl
 8004f26:	465a      	mov	r2, fp
 8004f28:	4631      	mov	r1, r6
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	47b8      	blx	r7
 8004f2e:	3001      	adds	r0, #1
 8004f30:	f43f af12 	beq.w	8004d58 <_printf_float+0x98>
 8004f34:	f04f 0900 	mov.w	r9, #0
 8004f38:	f104 0a1a 	add.w	sl, r4, #26
 8004f3c:	9b07      	ldr	r3, [sp, #28]
 8004f3e:	425b      	negs	r3, r3
 8004f40:	454b      	cmp	r3, r9
 8004f42:	dc01      	bgt.n	8004f48 <_printf_float+0x288>
 8004f44:	9b08      	ldr	r3, [sp, #32]
 8004f46:	e795      	b.n	8004e74 <_printf_float+0x1b4>
 8004f48:	2301      	movs	r3, #1
 8004f4a:	4652      	mov	r2, sl
 8004f4c:	4631      	mov	r1, r6
 8004f4e:	4628      	mov	r0, r5
 8004f50:	47b8      	blx	r7
 8004f52:	3001      	adds	r0, #1
 8004f54:	f43f af00 	beq.w	8004d58 <_printf_float+0x98>
 8004f58:	f109 0901 	add.w	r9, r9, #1
 8004f5c:	e7ee      	b.n	8004f3c <_printf_float+0x27c>
 8004f5e:	bf00      	nop
 8004f60:	ffffffff 	.word	0xffffffff
 8004f64:	7fefffff 	.word	0x7fefffff
 8004f68:	0800917c 	.word	0x0800917c
 8004f6c:	08009180 	.word	0x08009180
 8004f70:	08009184 	.word	0x08009184
 8004f74:	08009188 	.word	0x08009188
 8004f78:	0800918c 	.word	0x0800918c
 8004f7c:	9a08      	ldr	r2, [sp, #32]
 8004f7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f80:	429a      	cmp	r2, r3
 8004f82:	bfa8      	it	ge
 8004f84:	461a      	movge	r2, r3
 8004f86:	2a00      	cmp	r2, #0
 8004f88:	4691      	mov	r9, r2
 8004f8a:	dc38      	bgt.n	8004ffe <_printf_float+0x33e>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	9305      	str	r3, [sp, #20]
 8004f90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f94:	f104 021a 	add.w	r2, r4, #26
 8004f98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f9a:	9905      	ldr	r1, [sp, #20]
 8004f9c:	9304      	str	r3, [sp, #16]
 8004f9e:	eba3 0309 	sub.w	r3, r3, r9
 8004fa2:	428b      	cmp	r3, r1
 8004fa4:	dc33      	bgt.n	800500e <_printf_float+0x34e>
 8004fa6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	db3c      	blt.n	8005028 <_printf_float+0x368>
 8004fae:	6823      	ldr	r3, [r4, #0]
 8004fb0:	07da      	lsls	r2, r3, #31
 8004fb2:	d439      	bmi.n	8005028 <_printf_float+0x368>
 8004fb4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8004fb8:	eba2 0903 	sub.w	r9, r2, r3
 8004fbc:	9b04      	ldr	r3, [sp, #16]
 8004fbe:	1ad2      	subs	r2, r2, r3
 8004fc0:	4591      	cmp	r9, r2
 8004fc2:	bfa8      	it	ge
 8004fc4:	4691      	movge	r9, r2
 8004fc6:	f1b9 0f00 	cmp.w	r9, #0
 8004fca:	dc35      	bgt.n	8005038 <_printf_float+0x378>
 8004fcc:	f04f 0800 	mov.w	r8, #0
 8004fd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004fd4:	f104 0a1a 	add.w	sl, r4, #26
 8004fd8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004fdc:	1a9b      	subs	r3, r3, r2
 8004fde:	eba3 0309 	sub.w	r3, r3, r9
 8004fe2:	4543      	cmp	r3, r8
 8004fe4:	f77f af77 	ble.w	8004ed6 <_printf_float+0x216>
 8004fe8:	2301      	movs	r3, #1
 8004fea:	4652      	mov	r2, sl
 8004fec:	4631      	mov	r1, r6
 8004fee:	4628      	mov	r0, r5
 8004ff0:	47b8      	blx	r7
 8004ff2:	3001      	adds	r0, #1
 8004ff4:	f43f aeb0 	beq.w	8004d58 <_printf_float+0x98>
 8004ff8:	f108 0801 	add.w	r8, r8, #1
 8004ffc:	e7ec      	b.n	8004fd8 <_printf_float+0x318>
 8004ffe:	4613      	mov	r3, r2
 8005000:	4631      	mov	r1, r6
 8005002:	4642      	mov	r2, r8
 8005004:	4628      	mov	r0, r5
 8005006:	47b8      	blx	r7
 8005008:	3001      	adds	r0, #1
 800500a:	d1bf      	bne.n	8004f8c <_printf_float+0x2cc>
 800500c:	e6a4      	b.n	8004d58 <_printf_float+0x98>
 800500e:	2301      	movs	r3, #1
 8005010:	4631      	mov	r1, r6
 8005012:	4628      	mov	r0, r5
 8005014:	9204      	str	r2, [sp, #16]
 8005016:	47b8      	blx	r7
 8005018:	3001      	adds	r0, #1
 800501a:	f43f ae9d 	beq.w	8004d58 <_printf_float+0x98>
 800501e:	9b05      	ldr	r3, [sp, #20]
 8005020:	9a04      	ldr	r2, [sp, #16]
 8005022:	3301      	adds	r3, #1
 8005024:	9305      	str	r3, [sp, #20]
 8005026:	e7b7      	b.n	8004f98 <_printf_float+0x2d8>
 8005028:	4653      	mov	r3, sl
 800502a:	465a      	mov	r2, fp
 800502c:	4631      	mov	r1, r6
 800502e:	4628      	mov	r0, r5
 8005030:	47b8      	blx	r7
 8005032:	3001      	adds	r0, #1
 8005034:	d1be      	bne.n	8004fb4 <_printf_float+0x2f4>
 8005036:	e68f      	b.n	8004d58 <_printf_float+0x98>
 8005038:	9a04      	ldr	r2, [sp, #16]
 800503a:	464b      	mov	r3, r9
 800503c:	4442      	add	r2, r8
 800503e:	4631      	mov	r1, r6
 8005040:	4628      	mov	r0, r5
 8005042:	47b8      	blx	r7
 8005044:	3001      	adds	r0, #1
 8005046:	d1c1      	bne.n	8004fcc <_printf_float+0x30c>
 8005048:	e686      	b.n	8004d58 <_printf_float+0x98>
 800504a:	9a08      	ldr	r2, [sp, #32]
 800504c:	2a01      	cmp	r2, #1
 800504e:	dc01      	bgt.n	8005054 <_printf_float+0x394>
 8005050:	07db      	lsls	r3, r3, #31
 8005052:	d537      	bpl.n	80050c4 <_printf_float+0x404>
 8005054:	2301      	movs	r3, #1
 8005056:	4642      	mov	r2, r8
 8005058:	4631      	mov	r1, r6
 800505a:	4628      	mov	r0, r5
 800505c:	47b8      	blx	r7
 800505e:	3001      	adds	r0, #1
 8005060:	f43f ae7a 	beq.w	8004d58 <_printf_float+0x98>
 8005064:	4653      	mov	r3, sl
 8005066:	465a      	mov	r2, fp
 8005068:	4631      	mov	r1, r6
 800506a:	4628      	mov	r0, r5
 800506c:	47b8      	blx	r7
 800506e:	3001      	adds	r0, #1
 8005070:	f43f ae72 	beq.w	8004d58 <_printf_float+0x98>
 8005074:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005078:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800507c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005080:	9b08      	ldr	r3, [sp, #32]
 8005082:	d01a      	beq.n	80050ba <_printf_float+0x3fa>
 8005084:	3b01      	subs	r3, #1
 8005086:	f108 0201 	add.w	r2, r8, #1
 800508a:	4631      	mov	r1, r6
 800508c:	4628      	mov	r0, r5
 800508e:	47b8      	blx	r7
 8005090:	3001      	adds	r0, #1
 8005092:	d10e      	bne.n	80050b2 <_printf_float+0x3f2>
 8005094:	e660      	b.n	8004d58 <_printf_float+0x98>
 8005096:	2301      	movs	r3, #1
 8005098:	464a      	mov	r2, r9
 800509a:	4631      	mov	r1, r6
 800509c:	4628      	mov	r0, r5
 800509e:	47b8      	blx	r7
 80050a0:	3001      	adds	r0, #1
 80050a2:	f43f ae59 	beq.w	8004d58 <_printf_float+0x98>
 80050a6:	f108 0801 	add.w	r8, r8, #1
 80050aa:	9b08      	ldr	r3, [sp, #32]
 80050ac:	3b01      	subs	r3, #1
 80050ae:	4543      	cmp	r3, r8
 80050b0:	dcf1      	bgt.n	8005096 <_printf_float+0x3d6>
 80050b2:	9b04      	ldr	r3, [sp, #16]
 80050b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80050b8:	e6dd      	b.n	8004e76 <_printf_float+0x1b6>
 80050ba:	f04f 0800 	mov.w	r8, #0
 80050be:	f104 091a 	add.w	r9, r4, #26
 80050c2:	e7f2      	b.n	80050aa <_printf_float+0x3ea>
 80050c4:	2301      	movs	r3, #1
 80050c6:	4642      	mov	r2, r8
 80050c8:	e7df      	b.n	800508a <_printf_float+0x3ca>
 80050ca:	2301      	movs	r3, #1
 80050cc:	464a      	mov	r2, r9
 80050ce:	4631      	mov	r1, r6
 80050d0:	4628      	mov	r0, r5
 80050d2:	47b8      	blx	r7
 80050d4:	3001      	adds	r0, #1
 80050d6:	f43f ae3f 	beq.w	8004d58 <_printf_float+0x98>
 80050da:	f108 0801 	add.w	r8, r8, #1
 80050de:	68e3      	ldr	r3, [r4, #12]
 80050e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050e2:	1a5b      	subs	r3, r3, r1
 80050e4:	4543      	cmp	r3, r8
 80050e6:	dcf0      	bgt.n	80050ca <_printf_float+0x40a>
 80050e8:	e6f9      	b.n	8004ede <_printf_float+0x21e>
 80050ea:	f04f 0800 	mov.w	r8, #0
 80050ee:	f104 0919 	add.w	r9, r4, #25
 80050f2:	e7f4      	b.n	80050de <_printf_float+0x41e>

080050f4 <_printf_common>:
 80050f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050f8:	4616      	mov	r6, r2
 80050fa:	4699      	mov	r9, r3
 80050fc:	688a      	ldr	r2, [r1, #8]
 80050fe:	690b      	ldr	r3, [r1, #16]
 8005100:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005104:	4293      	cmp	r3, r2
 8005106:	bfb8      	it	lt
 8005108:	4613      	movlt	r3, r2
 800510a:	6033      	str	r3, [r6, #0]
 800510c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005110:	4607      	mov	r7, r0
 8005112:	460c      	mov	r4, r1
 8005114:	b10a      	cbz	r2, 800511a <_printf_common+0x26>
 8005116:	3301      	adds	r3, #1
 8005118:	6033      	str	r3, [r6, #0]
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	0699      	lsls	r1, r3, #26
 800511e:	bf42      	ittt	mi
 8005120:	6833      	ldrmi	r3, [r6, #0]
 8005122:	3302      	addmi	r3, #2
 8005124:	6033      	strmi	r3, [r6, #0]
 8005126:	6825      	ldr	r5, [r4, #0]
 8005128:	f015 0506 	ands.w	r5, r5, #6
 800512c:	d106      	bne.n	800513c <_printf_common+0x48>
 800512e:	f104 0a19 	add.w	sl, r4, #25
 8005132:	68e3      	ldr	r3, [r4, #12]
 8005134:	6832      	ldr	r2, [r6, #0]
 8005136:	1a9b      	subs	r3, r3, r2
 8005138:	42ab      	cmp	r3, r5
 800513a:	dc26      	bgt.n	800518a <_printf_common+0x96>
 800513c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005140:	1e13      	subs	r3, r2, #0
 8005142:	6822      	ldr	r2, [r4, #0]
 8005144:	bf18      	it	ne
 8005146:	2301      	movne	r3, #1
 8005148:	0692      	lsls	r2, r2, #26
 800514a:	d42b      	bmi.n	80051a4 <_printf_common+0xb0>
 800514c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005150:	4649      	mov	r1, r9
 8005152:	4638      	mov	r0, r7
 8005154:	47c0      	blx	r8
 8005156:	3001      	adds	r0, #1
 8005158:	d01e      	beq.n	8005198 <_printf_common+0xa4>
 800515a:	6823      	ldr	r3, [r4, #0]
 800515c:	6922      	ldr	r2, [r4, #16]
 800515e:	f003 0306 	and.w	r3, r3, #6
 8005162:	2b04      	cmp	r3, #4
 8005164:	bf02      	ittt	eq
 8005166:	68e5      	ldreq	r5, [r4, #12]
 8005168:	6833      	ldreq	r3, [r6, #0]
 800516a:	1aed      	subeq	r5, r5, r3
 800516c:	68a3      	ldr	r3, [r4, #8]
 800516e:	bf0c      	ite	eq
 8005170:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005174:	2500      	movne	r5, #0
 8005176:	4293      	cmp	r3, r2
 8005178:	bfc4      	itt	gt
 800517a:	1a9b      	subgt	r3, r3, r2
 800517c:	18ed      	addgt	r5, r5, r3
 800517e:	2600      	movs	r6, #0
 8005180:	341a      	adds	r4, #26
 8005182:	42b5      	cmp	r5, r6
 8005184:	d11a      	bne.n	80051bc <_printf_common+0xc8>
 8005186:	2000      	movs	r0, #0
 8005188:	e008      	b.n	800519c <_printf_common+0xa8>
 800518a:	2301      	movs	r3, #1
 800518c:	4652      	mov	r2, sl
 800518e:	4649      	mov	r1, r9
 8005190:	4638      	mov	r0, r7
 8005192:	47c0      	blx	r8
 8005194:	3001      	adds	r0, #1
 8005196:	d103      	bne.n	80051a0 <_printf_common+0xac>
 8005198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800519c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051a0:	3501      	adds	r5, #1
 80051a2:	e7c6      	b.n	8005132 <_printf_common+0x3e>
 80051a4:	18e1      	adds	r1, r4, r3
 80051a6:	1c5a      	adds	r2, r3, #1
 80051a8:	2030      	movs	r0, #48	; 0x30
 80051aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051ae:	4422      	add	r2, r4
 80051b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051b8:	3302      	adds	r3, #2
 80051ba:	e7c7      	b.n	800514c <_printf_common+0x58>
 80051bc:	2301      	movs	r3, #1
 80051be:	4622      	mov	r2, r4
 80051c0:	4649      	mov	r1, r9
 80051c2:	4638      	mov	r0, r7
 80051c4:	47c0      	blx	r8
 80051c6:	3001      	adds	r0, #1
 80051c8:	d0e6      	beq.n	8005198 <_printf_common+0xa4>
 80051ca:	3601      	adds	r6, #1
 80051cc:	e7d9      	b.n	8005182 <_printf_common+0x8e>
	...

080051d0 <_printf_i>:
 80051d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051d4:	7e0f      	ldrb	r7, [r1, #24]
 80051d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80051d8:	2f78      	cmp	r7, #120	; 0x78
 80051da:	4691      	mov	r9, r2
 80051dc:	4680      	mov	r8, r0
 80051de:	460c      	mov	r4, r1
 80051e0:	469a      	mov	sl, r3
 80051e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80051e6:	d807      	bhi.n	80051f8 <_printf_i+0x28>
 80051e8:	2f62      	cmp	r7, #98	; 0x62
 80051ea:	d80a      	bhi.n	8005202 <_printf_i+0x32>
 80051ec:	2f00      	cmp	r7, #0
 80051ee:	f000 80d4 	beq.w	800539a <_printf_i+0x1ca>
 80051f2:	2f58      	cmp	r7, #88	; 0x58
 80051f4:	f000 80c0 	beq.w	8005378 <_printf_i+0x1a8>
 80051f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005200:	e03a      	b.n	8005278 <_printf_i+0xa8>
 8005202:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005206:	2b15      	cmp	r3, #21
 8005208:	d8f6      	bhi.n	80051f8 <_printf_i+0x28>
 800520a:	a101      	add	r1, pc, #4	; (adr r1, 8005210 <_printf_i+0x40>)
 800520c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005210:	08005269 	.word	0x08005269
 8005214:	0800527d 	.word	0x0800527d
 8005218:	080051f9 	.word	0x080051f9
 800521c:	080051f9 	.word	0x080051f9
 8005220:	080051f9 	.word	0x080051f9
 8005224:	080051f9 	.word	0x080051f9
 8005228:	0800527d 	.word	0x0800527d
 800522c:	080051f9 	.word	0x080051f9
 8005230:	080051f9 	.word	0x080051f9
 8005234:	080051f9 	.word	0x080051f9
 8005238:	080051f9 	.word	0x080051f9
 800523c:	08005381 	.word	0x08005381
 8005240:	080052a9 	.word	0x080052a9
 8005244:	0800533b 	.word	0x0800533b
 8005248:	080051f9 	.word	0x080051f9
 800524c:	080051f9 	.word	0x080051f9
 8005250:	080053a3 	.word	0x080053a3
 8005254:	080051f9 	.word	0x080051f9
 8005258:	080052a9 	.word	0x080052a9
 800525c:	080051f9 	.word	0x080051f9
 8005260:	080051f9 	.word	0x080051f9
 8005264:	08005343 	.word	0x08005343
 8005268:	682b      	ldr	r3, [r5, #0]
 800526a:	1d1a      	adds	r2, r3, #4
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	602a      	str	r2, [r5, #0]
 8005270:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005274:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005278:	2301      	movs	r3, #1
 800527a:	e09f      	b.n	80053bc <_printf_i+0x1ec>
 800527c:	6820      	ldr	r0, [r4, #0]
 800527e:	682b      	ldr	r3, [r5, #0]
 8005280:	0607      	lsls	r7, r0, #24
 8005282:	f103 0104 	add.w	r1, r3, #4
 8005286:	6029      	str	r1, [r5, #0]
 8005288:	d501      	bpl.n	800528e <_printf_i+0xbe>
 800528a:	681e      	ldr	r6, [r3, #0]
 800528c:	e003      	b.n	8005296 <_printf_i+0xc6>
 800528e:	0646      	lsls	r6, r0, #25
 8005290:	d5fb      	bpl.n	800528a <_printf_i+0xba>
 8005292:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005296:	2e00      	cmp	r6, #0
 8005298:	da03      	bge.n	80052a2 <_printf_i+0xd2>
 800529a:	232d      	movs	r3, #45	; 0x2d
 800529c:	4276      	negs	r6, r6
 800529e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052a2:	485a      	ldr	r0, [pc, #360]	; (800540c <_printf_i+0x23c>)
 80052a4:	230a      	movs	r3, #10
 80052a6:	e012      	b.n	80052ce <_printf_i+0xfe>
 80052a8:	682b      	ldr	r3, [r5, #0]
 80052aa:	6820      	ldr	r0, [r4, #0]
 80052ac:	1d19      	adds	r1, r3, #4
 80052ae:	6029      	str	r1, [r5, #0]
 80052b0:	0605      	lsls	r5, r0, #24
 80052b2:	d501      	bpl.n	80052b8 <_printf_i+0xe8>
 80052b4:	681e      	ldr	r6, [r3, #0]
 80052b6:	e002      	b.n	80052be <_printf_i+0xee>
 80052b8:	0641      	lsls	r1, r0, #25
 80052ba:	d5fb      	bpl.n	80052b4 <_printf_i+0xe4>
 80052bc:	881e      	ldrh	r6, [r3, #0]
 80052be:	4853      	ldr	r0, [pc, #332]	; (800540c <_printf_i+0x23c>)
 80052c0:	2f6f      	cmp	r7, #111	; 0x6f
 80052c2:	bf0c      	ite	eq
 80052c4:	2308      	moveq	r3, #8
 80052c6:	230a      	movne	r3, #10
 80052c8:	2100      	movs	r1, #0
 80052ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052ce:	6865      	ldr	r5, [r4, #4]
 80052d0:	60a5      	str	r5, [r4, #8]
 80052d2:	2d00      	cmp	r5, #0
 80052d4:	bfa2      	ittt	ge
 80052d6:	6821      	ldrge	r1, [r4, #0]
 80052d8:	f021 0104 	bicge.w	r1, r1, #4
 80052dc:	6021      	strge	r1, [r4, #0]
 80052de:	b90e      	cbnz	r6, 80052e4 <_printf_i+0x114>
 80052e0:	2d00      	cmp	r5, #0
 80052e2:	d04b      	beq.n	800537c <_printf_i+0x1ac>
 80052e4:	4615      	mov	r5, r2
 80052e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80052ea:	fb03 6711 	mls	r7, r3, r1, r6
 80052ee:	5dc7      	ldrb	r7, [r0, r7]
 80052f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80052f4:	4637      	mov	r7, r6
 80052f6:	42bb      	cmp	r3, r7
 80052f8:	460e      	mov	r6, r1
 80052fa:	d9f4      	bls.n	80052e6 <_printf_i+0x116>
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	d10b      	bne.n	8005318 <_printf_i+0x148>
 8005300:	6823      	ldr	r3, [r4, #0]
 8005302:	07de      	lsls	r6, r3, #31
 8005304:	d508      	bpl.n	8005318 <_printf_i+0x148>
 8005306:	6923      	ldr	r3, [r4, #16]
 8005308:	6861      	ldr	r1, [r4, #4]
 800530a:	4299      	cmp	r1, r3
 800530c:	bfde      	ittt	le
 800530e:	2330      	movle	r3, #48	; 0x30
 8005310:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005314:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005318:	1b52      	subs	r2, r2, r5
 800531a:	6122      	str	r2, [r4, #16]
 800531c:	f8cd a000 	str.w	sl, [sp]
 8005320:	464b      	mov	r3, r9
 8005322:	aa03      	add	r2, sp, #12
 8005324:	4621      	mov	r1, r4
 8005326:	4640      	mov	r0, r8
 8005328:	f7ff fee4 	bl	80050f4 <_printf_common>
 800532c:	3001      	adds	r0, #1
 800532e:	d14a      	bne.n	80053c6 <_printf_i+0x1f6>
 8005330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005334:	b004      	add	sp, #16
 8005336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800533a:	6823      	ldr	r3, [r4, #0]
 800533c:	f043 0320 	orr.w	r3, r3, #32
 8005340:	6023      	str	r3, [r4, #0]
 8005342:	4833      	ldr	r0, [pc, #204]	; (8005410 <_printf_i+0x240>)
 8005344:	2778      	movs	r7, #120	; 0x78
 8005346:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800534a:	6823      	ldr	r3, [r4, #0]
 800534c:	6829      	ldr	r1, [r5, #0]
 800534e:	061f      	lsls	r7, r3, #24
 8005350:	f851 6b04 	ldr.w	r6, [r1], #4
 8005354:	d402      	bmi.n	800535c <_printf_i+0x18c>
 8005356:	065f      	lsls	r7, r3, #25
 8005358:	bf48      	it	mi
 800535a:	b2b6      	uxthmi	r6, r6
 800535c:	07df      	lsls	r7, r3, #31
 800535e:	bf48      	it	mi
 8005360:	f043 0320 	orrmi.w	r3, r3, #32
 8005364:	6029      	str	r1, [r5, #0]
 8005366:	bf48      	it	mi
 8005368:	6023      	strmi	r3, [r4, #0]
 800536a:	b91e      	cbnz	r6, 8005374 <_printf_i+0x1a4>
 800536c:	6823      	ldr	r3, [r4, #0]
 800536e:	f023 0320 	bic.w	r3, r3, #32
 8005372:	6023      	str	r3, [r4, #0]
 8005374:	2310      	movs	r3, #16
 8005376:	e7a7      	b.n	80052c8 <_printf_i+0xf8>
 8005378:	4824      	ldr	r0, [pc, #144]	; (800540c <_printf_i+0x23c>)
 800537a:	e7e4      	b.n	8005346 <_printf_i+0x176>
 800537c:	4615      	mov	r5, r2
 800537e:	e7bd      	b.n	80052fc <_printf_i+0x12c>
 8005380:	682b      	ldr	r3, [r5, #0]
 8005382:	6826      	ldr	r6, [r4, #0]
 8005384:	6961      	ldr	r1, [r4, #20]
 8005386:	1d18      	adds	r0, r3, #4
 8005388:	6028      	str	r0, [r5, #0]
 800538a:	0635      	lsls	r5, r6, #24
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	d501      	bpl.n	8005394 <_printf_i+0x1c4>
 8005390:	6019      	str	r1, [r3, #0]
 8005392:	e002      	b.n	800539a <_printf_i+0x1ca>
 8005394:	0670      	lsls	r0, r6, #25
 8005396:	d5fb      	bpl.n	8005390 <_printf_i+0x1c0>
 8005398:	8019      	strh	r1, [r3, #0]
 800539a:	2300      	movs	r3, #0
 800539c:	6123      	str	r3, [r4, #16]
 800539e:	4615      	mov	r5, r2
 80053a0:	e7bc      	b.n	800531c <_printf_i+0x14c>
 80053a2:	682b      	ldr	r3, [r5, #0]
 80053a4:	1d1a      	adds	r2, r3, #4
 80053a6:	602a      	str	r2, [r5, #0]
 80053a8:	681d      	ldr	r5, [r3, #0]
 80053aa:	6862      	ldr	r2, [r4, #4]
 80053ac:	2100      	movs	r1, #0
 80053ae:	4628      	mov	r0, r5
 80053b0:	f7fa ff46 	bl	8000240 <memchr>
 80053b4:	b108      	cbz	r0, 80053ba <_printf_i+0x1ea>
 80053b6:	1b40      	subs	r0, r0, r5
 80053b8:	6060      	str	r0, [r4, #4]
 80053ba:	6863      	ldr	r3, [r4, #4]
 80053bc:	6123      	str	r3, [r4, #16]
 80053be:	2300      	movs	r3, #0
 80053c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053c4:	e7aa      	b.n	800531c <_printf_i+0x14c>
 80053c6:	6923      	ldr	r3, [r4, #16]
 80053c8:	462a      	mov	r2, r5
 80053ca:	4649      	mov	r1, r9
 80053cc:	4640      	mov	r0, r8
 80053ce:	47d0      	blx	sl
 80053d0:	3001      	adds	r0, #1
 80053d2:	d0ad      	beq.n	8005330 <_printf_i+0x160>
 80053d4:	6823      	ldr	r3, [r4, #0]
 80053d6:	079b      	lsls	r3, r3, #30
 80053d8:	d413      	bmi.n	8005402 <_printf_i+0x232>
 80053da:	68e0      	ldr	r0, [r4, #12]
 80053dc:	9b03      	ldr	r3, [sp, #12]
 80053de:	4298      	cmp	r0, r3
 80053e0:	bfb8      	it	lt
 80053e2:	4618      	movlt	r0, r3
 80053e4:	e7a6      	b.n	8005334 <_printf_i+0x164>
 80053e6:	2301      	movs	r3, #1
 80053e8:	4632      	mov	r2, r6
 80053ea:	4649      	mov	r1, r9
 80053ec:	4640      	mov	r0, r8
 80053ee:	47d0      	blx	sl
 80053f0:	3001      	adds	r0, #1
 80053f2:	d09d      	beq.n	8005330 <_printf_i+0x160>
 80053f4:	3501      	adds	r5, #1
 80053f6:	68e3      	ldr	r3, [r4, #12]
 80053f8:	9903      	ldr	r1, [sp, #12]
 80053fa:	1a5b      	subs	r3, r3, r1
 80053fc:	42ab      	cmp	r3, r5
 80053fe:	dcf2      	bgt.n	80053e6 <_printf_i+0x216>
 8005400:	e7eb      	b.n	80053da <_printf_i+0x20a>
 8005402:	2500      	movs	r5, #0
 8005404:	f104 0619 	add.w	r6, r4, #25
 8005408:	e7f5      	b.n	80053f6 <_printf_i+0x226>
 800540a:	bf00      	nop
 800540c:	0800918e 	.word	0x0800918e
 8005410:	0800919f 	.word	0x0800919f

08005414 <_scanf_float>:
 8005414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005418:	b087      	sub	sp, #28
 800541a:	4617      	mov	r7, r2
 800541c:	9303      	str	r3, [sp, #12]
 800541e:	688b      	ldr	r3, [r1, #8]
 8005420:	1e5a      	subs	r2, r3, #1
 8005422:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005426:	bf83      	ittte	hi
 8005428:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800542c:	195b      	addhi	r3, r3, r5
 800542e:	9302      	strhi	r3, [sp, #8]
 8005430:	2300      	movls	r3, #0
 8005432:	bf86      	itte	hi
 8005434:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005438:	608b      	strhi	r3, [r1, #8]
 800543a:	9302      	strls	r3, [sp, #8]
 800543c:	680b      	ldr	r3, [r1, #0]
 800543e:	468b      	mov	fp, r1
 8005440:	2500      	movs	r5, #0
 8005442:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005446:	f84b 3b1c 	str.w	r3, [fp], #28
 800544a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800544e:	4680      	mov	r8, r0
 8005450:	460c      	mov	r4, r1
 8005452:	465e      	mov	r6, fp
 8005454:	46aa      	mov	sl, r5
 8005456:	46a9      	mov	r9, r5
 8005458:	9501      	str	r5, [sp, #4]
 800545a:	68a2      	ldr	r2, [r4, #8]
 800545c:	b152      	cbz	r2, 8005474 <_scanf_float+0x60>
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	2b4e      	cmp	r3, #78	; 0x4e
 8005464:	d864      	bhi.n	8005530 <_scanf_float+0x11c>
 8005466:	2b40      	cmp	r3, #64	; 0x40
 8005468:	d83c      	bhi.n	80054e4 <_scanf_float+0xd0>
 800546a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800546e:	b2c8      	uxtb	r0, r1
 8005470:	280e      	cmp	r0, #14
 8005472:	d93a      	bls.n	80054ea <_scanf_float+0xd6>
 8005474:	f1b9 0f00 	cmp.w	r9, #0
 8005478:	d003      	beq.n	8005482 <_scanf_float+0x6e>
 800547a:	6823      	ldr	r3, [r4, #0]
 800547c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005480:	6023      	str	r3, [r4, #0]
 8005482:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005486:	f1ba 0f01 	cmp.w	sl, #1
 800548a:	f200 8113 	bhi.w	80056b4 <_scanf_float+0x2a0>
 800548e:	455e      	cmp	r6, fp
 8005490:	f200 8105 	bhi.w	800569e <_scanf_float+0x28a>
 8005494:	2501      	movs	r5, #1
 8005496:	4628      	mov	r0, r5
 8005498:	b007      	add	sp, #28
 800549a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800549e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80054a2:	2a0d      	cmp	r2, #13
 80054a4:	d8e6      	bhi.n	8005474 <_scanf_float+0x60>
 80054a6:	a101      	add	r1, pc, #4	; (adr r1, 80054ac <_scanf_float+0x98>)
 80054a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80054ac:	080055eb 	.word	0x080055eb
 80054b0:	08005475 	.word	0x08005475
 80054b4:	08005475 	.word	0x08005475
 80054b8:	08005475 	.word	0x08005475
 80054bc:	0800564b 	.word	0x0800564b
 80054c0:	08005623 	.word	0x08005623
 80054c4:	08005475 	.word	0x08005475
 80054c8:	08005475 	.word	0x08005475
 80054cc:	080055f9 	.word	0x080055f9
 80054d0:	08005475 	.word	0x08005475
 80054d4:	08005475 	.word	0x08005475
 80054d8:	08005475 	.word	0x08005475
 80054dc:	08005475 	.word	0x08005475
 80054e0:	080055b1 	.word	0x080055b1
 80054e4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80054e8:	e7db      	b.n	80054a2 <_scanf_float+0x8e>
 80054ea:	290e      	cmp	r1, #14
 80054ec:	d8c2      	bhi.n	8005474 <_scanf_float+0x60>
 80054ee:	a001      	add	r0, pc, #4	; (adr r0, 80054f4 <_scanf_float+0xe0>)
 80054f0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80054f4:	080055a3 	.word	0x080055a3
 80054f8:	08005475 	.word	0x08005475
 80054fc:	080055a3 	.word	0x080055a3
 8005500:	08005637 	.word	0x08005637
 8005504:	08005475 	.word	0x08005475
 8005508:	08005551 	.word	0x08005551
 800550c:	0800558d 	.word	0x0800558d
 8005510:	0800558d 	.word	0x0800558d
 8005514:	0800558d 	.word	0x0800558d
 8005518:	0800558d 	.word	0x0800558d
 800551c:	0800558d 	.word	0x0800558d
 8005520:	0800558d 	.word	0x0800558d
 8005524:	0800558d 	.word	0x0800558d
 8005528:	0800558d 	.word	0x0800558d
 800552c:	0800558d 	.word	0x0800558d
 8005530:	2b6e      	cmp	r3, #110	; 0x6e
 8005532:	d809      	bhi.n	8005548 <_scanf_float+0x134>
 8005534:	2b60      	cmp	r3, #96	; 0x60
 8005536:	d8b2      	bhi.n	800549e <_scanf_float+0x8a>
 8005538:	2b54      	cmp	r3, #84	; 0x54
 800553a:	d077      	beq.n	800562c <_scanf_float+0x218>
 800553c:	2b59      	cmp	r3, #89	; 0x59
 800553e:	d199      	bne.n	8005474 <_scanf_float+0x60>
 8005540:	2d07      	cmp	r5, #7
 8005542:	d197      	bne.n	8005474 <_scanf_float+0x60>
 8005544:	2508      	movs	r5, #8
 8005546:	e029      	b.n	800559c <_scanf_float+0x188>
 8005548:	2b74      	cmp	r3, #116	; 0x74
 800554a:	d06f      	beq.n	800562c <_scanf_float+0x218>
 800554c:	2b79      	cmp	r3, #121	; 0x79
 800554e:	e7f6      	b.n	800553e <_scanf_float+0x12a>
 8005550:	6821      	ldr	r1, [r4, #0]
 8005552:	05c8      	lsls	r0, r1, #23
 8005554:	d51a      	bpl.n	800558c <_scanf_float+0x178>
 8005556:	9b02      	ldr	r3, [sp, #8]
 8005558:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800555c:	6021      	str	r1, [r4, #0]
 800555e:	f109 0901 	add.w	r9, r9, #1
 8005562:	b11b      	cbz	r3, 800556c <_scanf_float+0x158>
 8005564:	3b01      	subs	r3, #1
 8005566:	3201      	adds	r2, #1
 8005568:	9302      	str	r3, [sp, #8]
 800556a:	60a2      	str	r2, [r4, #8]
 800556c:	68a3      	ldr	r3, [r4, #8]
 800556e:	3b01      	subs	r3, #1
 8005570:	60a3      	str	r3, [r4, #8]
 8005572:	6923      	ldr	r3, [r4, #16]
 8005574:	3301      	adds	r3, #1
 8005576:	6123      	str	r3, [r4, #16]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	3b01      	subs	r3, #1
 800557c:	2b00      	cmp	r3, #0
 800557e:	607b      	str	r3, [r7, #4]
 8005580:	f340 8084 	ble.w	800568c <_scanf_float+0x278>
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	3301      	adds	r3, #1
 8005588:	603b      	str	r3, [r7, #0]
 800558a:	e766      	b.n	800545a <_scanf_float+0x46>
 800558c:	eb1a 0f05 	cmn.w	sl, r5
 8005590:	f47f af70 	bne.w	8005474 <_scanf_float+0x60>
 8005594:	6822      	ldr	r2, [r4, #0]
 8005596:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800559a:	6022      	str	r2, [r4, #0]
 800559c:	f806 3b01 	strb.w	r3, [r6], #1
 80055a0:	e7e4      	b.n	800556c <_scanf_float+0x158>
 80055a2:	6822      	ldr	r2, [r4, #0]
 80055a4:	0610      	lsls	r0, r2, #24
 80055a6:	f57f af65 	bpl.w	8005474 <_scanf_float+0x60>
 80055aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055ae:	e7f4      	b.n	800559a <_scanf_float+0x186>
 80055b0:	f1ba 0f00 	cmp.w	sl, #0
 80055b4:	d10e      	bne.n	80055d4 <_scanf_float+0x1c0>
 80055b6:	f1b9 0f00 	cmp.w	r9, #0
 80055ba:	d10e      	bne.n	80055da <_scanf_float+0x1c6>
 80055bc:	6822      	ldr	r2, [r4, #0]
 80055be:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80055c2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80055c6:	d108      	bne.n	80055da <_scanf_float+0x1c6>
 80055c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80055cc:	6022      	str	r2, [r4, #0]
 80055ce:	f04f 0a01 	mov.w	sl, #1
 80055d2:	e7e3      	b.n	800559c <_scanf_float+0x188>
 80055d4:	f1ba 0f02 	cmp.w	sl, #2
 80055d8:	d055      	beq.n	8005686 <_scanf_float+0x272>
 80055da:	2d01      	cmp	r5, #1
 80055dc:	d002      	beq.n	80055e4 <_scanf_float+0x1d0>
 80055de:	2d04      	cmp	r5, #4
 80055e0:	f47f af48 	bne.w	8005474 <_scanf_float+0x60>
 80055e4:	3501      	adds	r5, #1
 80055e6:	b2ed      	uxtb	r5, r5
 80055e8:	e7d8      	b.n	800559c <_scanf_float+0x188>
 80055ea:	f1ba 0f01 	cmp.w	sl, #1
 80055ee:	f47f af41 	bne.w	8005474 <_scanf_float+0x60>
 80055f2:	f04f 0a02 	mov.w	sl, #2
 80055f6:	e7d1      	b.n	800559c <_scanf_float+0x188>
 80055f8:	b97d      	cbnz	r5, 800561a <_scanf_float+0x206>
 80055fa:	f1b9 0f00 	cmp.w	r9, #0
 80055fe:	f47f af3c 	bne.w	800547a <_scanf_float+0x66>
 8005602:	6822      	ldr	r2, [r4, #0]
 8005604:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005608:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800560c:	f47f af39 	bne.w	8005482 <_scanf_float+0x6e>
 8005610:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005614:	6022      	str	r2, [r4, #0]
 8005616:	2501      	movs	r5, #1
 8005618:	e7c0      	b.n	800559c <_scanf_float+0x188>
 800561a:	2d03      	cmp	r5, #3
 800561c:	d0e2      	beq.n	80055e4 <_scanf_float+0x1d0>
 800561e:	2d05      	cmp	r5, #5
 8005620:	e7de      	b.n	80055e0 <_scanf_float+0x1cc>
 8005622:	2d02      	cmp	r5, #2
 8005624:	f47f af26 	bne.w	8005474 <_scanf_float+0x60>
 8005628:	2503      	movs	r5, #3
 800562a:	e7b7      	b.n	800559c <_scanf_float+0x188>
 800562c:	2d06      	cmp	r5, #6
 800562e:	f47f af21 	bne.w	8005474 <_scanf_float+0x60>
 8005632:	2507      	movs	r5, #7
 8005634:	e7b2      	b.n	800559c <_scanf_float+0x188>
 8005636:	6822      	ldr	r2, [r4, #0]
 8005638:	0591      	lsls	r1, r2, #22
 800563a:	f57f af1b 	bpl.w	8005474 <_scanf_float+0x60>
 800563e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005642:	6022      	str	r2, [r4, #0]
 8005644:	f8cd 9004 	str.w	r9, [sp, #4]
 8005648:	e7a8      	b.n	800559c <_scanf_float+0x188>
 800564a:	6822      	ldr	r2, [r4, #0]
 800564c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005650:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005654:	d006      	beq.n	8005664 <_scanf_float+0x250>
 8005656:	0550      	lsls	r0, r2, #21
 8005658:	f57f af0c 	bpl.w	8005474 <_scanf_float+0x60>
 800565c:	f1b9 0f00 	cmp.w	r9, #0
 8005660:	f43f af0f 	beq.w	8005482 <_scanf_float+0x6e>
 8005664:	0591      	lsls	r1, r2, #22
 8005666:	bf58      	it	pl
 8005668:	9901      	ldrpl	r1, [sp, #4]
 800566a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800566e:	bf58      	it	pl
 8005670:	eba9 0101 	subpl.w	r1, r9, r1
 8005674:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005678:	bf58      	it	pl
 800567a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800567e:	6022      	str	r2, [r4, #0]
 8005680:	f04f 0900 	mov.w	r9, #0
 8005684:	e78a      	b.n	800559c <_scanf_float+0x188>
 8005686:	f04f 0a03 	mov.w	sl, #3
 800568a:	e787      	b.n	800559c <_scanf_float+0x188>
 800568c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005690:	4639      	mov	r1, r7
 8005692:	4640      	mov	r0, r8
 8005694:	4798      	blx	r3
 8005696:	2800      	cmp	r0, #0
 8005698:	f43f aedf 	beq.w	800545a <_scanf_float+0x46>
 800569c:	e6ea      	b.n	8005474 <_scanf_float+0x60>
 800569e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80056a6:	463a      	mov	r2, r7
 80056a8:	4640      	mov	r0, r8
 80056aa:	4798      	blx	r3
 80056ac:	6923      	ldr	r3, [r4, #16]
 80056ae:	3b01      	subs	r3, #1
 80056b0:	6123      	str	r3, [r4, #16]
 80056b2:	e6ec      	b.n	800548e <_scanf_float+0x7a>
 80056b4:	1e6b      	subs	r3, r5, #1
 80056b6:	2b06      	cmp	r3, #6
 80056b8:	d825      	bhi.n	8005706 <_scanf_float+0x2f2>
 80056ba:	2d02      	cmp	r5, #2
 80056bc:	d836      	bhi.n	800572c <_scanf_float+0x318>
 80056be:	455e      	cmp	r6, fp
 80056c0:	f67f aee8 	bls.w	8005494 <_scanf_float+0x80>
 80056c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056c8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80056cc:	463a      	mov	r2, r7
 80056ce:	4640      	mov	r0, r8
 80056d0:	4798      	blx	r3
 80056d2:	6923      	ldr	r3, [r4, #16]
 80056d4:	3b01      	subs	r3, #1
 80056d6:	6123      	str	r3, [r4, #16]
 80056d8:	e7f1      	b.n	80056be <_scanf_float+0x2aa>
 80056da:	9802      	ldr	r0, [sp, #8]
 80056dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056e0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80056e4:	9002      	str	r0, [sp, #8]
 80056e6:	463a      	mov	r2, r7
 80056e8:	4640      	mov	r0, r8
 80056ea:	4798      	blx	r3
 80056ec:	6923      	ldr	r3, [r4, #16]
 80056ee:	3b01      	subs	r3, #1
 80056f0:	6123      	str	r3, [r4, #16]
 80056f2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80056f6:	fa5f fa8a 	uxtb.w	sl, sl
 80056fa:	f1ba 0f02 	cmp.w	sl, #2
 80056fe:	d1ec      	bne.n	80056da <_scanf_float+0x2c6>
 8005700:	3d03      	subs	r5, #3
 8005702:	b2ed      	uxtb	r5, r5
 8005704:	1b76      	subs	r6, r6, r5
 8005706:	6823      	ldr	r3, [r4, #0]
 8005708:	05da      	lsls	r2, r3, #23
 800570a:	d52f      	bpl.n	800576c <_scanf_float+0x358>
 800570c:	055b      	lsls	r3, r3, #21
 800570e:	d510      	bpl.n	8005732 <_scanf_float+0x31e>
 8005710:	455e      	cmp	r6, fp
 8005712:	f67f aebf 	bls.w	8005494 <_scanf_float+0x80>
 8005716:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800571a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800571e:	463a      	mov	r2, r7
 8005720:	4640      	mov	r0, r8
 8005722:	4798      	blx	r3
 8005724:	6923      	ldr	r3, [r4, #16]
 8005726:	3b01      	subs	r3, #1
 8005728:	6123      	str	r3, [r4, #16]
 800572a:	e7f1      	b.n	8005710 <_scanf_float+0x2fc>
 800572c:	46aa      	mov	sl, r5
 800572e:	9602      	str	r6, [sp, #8]
 8005730:	e7df      	b.n	80056f2 <_scanf_float+0x2de>
 8005732:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005736:	6923      	ldr	r3, [r4, #16]
 8005738:	2965      	cmp	r1, #101	; 0x65
 800573a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800573e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8005742:	6123      	str	r3, [r4, #16]
 8005744:	d00c      	beq.n	8005760 <_scanf_float+0x34c>
 8005746:	2945      	cmp	r1, #69	; 0x45
 8005748:	d00a      	beq.n	8005760 <_scanf_float+0x34c>
 800574a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800574e:	463a      	mov	r2, r7
 8005750:	4640      	mov	r0, r8
 8005752:	4798      	blx	r3
 8005754:	6923      	ldr	r3, [r4, #16]
 8005756:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800575a:	3b01      	subs	r3, #1
 800575c:	1eb5      	subs	r5, r6, #2
 800575e:	6123      	str	r3, [r4, #16]
 8005760:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005764:	463a      	mov	r2, r7
 8005766:	4640      	mov	r0, r8
 8005768:	4798      	blx	r3
 800576a:	462e      	mov	r6, r5
 800576c:	6825      	ldr	r5, [r4, #0]
 800576e:	f015 0510 	ands.w	r5, r5, #16
 8005772:	d14d      	bne.n	8005810 <_scanf_float+0x3fc>
 8005774:	7035      	strb	r5, [r6, #0]
 8005776:	6823      	ldr	r3, [r4, #0]
 8005778:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800577c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005780:	d11a      	bne.n	80057b8 <_scanf_float+0x3a4>
 8005782:	9b01      	ldr	r3, [sp, #4]
 8005784:	454b      	cmp	r3, r9
 8005786:	eba3 0209 	sub.w	r2, r3, r9
 800578a:	d122      	bne.n	80057d2 <_scanf_float+0x3be>
 800578c:	2200      	movs	r2, #0
 800578e:	4659      	mov	r1, fp
 8005790:	4640      	mov	r0, r8
 8005792:	f002 fb47 	bl	8007e24 <_strtod_r>
 8005796:	9b03      	ldr	r3, [sp, #12]
 8005798:	6821      	ldr	r1, [r4, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f011 0f02 	tst.w	r1, #2
 80057a0:	f103 0204 	add.w	r2, r3, #4
 80057a4:	d020      	beq.n	80057e8 <_scanf_float+0x3d4>
 80057a6:	9903      	ldr	r1, [sp, #12]
 80057a8:	600a      	str	r2, [r1, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	ed83 0b00 	vstr	d0, [r3]
 80057b0:	68e3      	ldr	r3, [r4, #12]
 80057b2:	3301      	adds	r3, #1
 80057b4:	60e3      	str	r3, [r4, #12]
 80057b6:	e66e      	b.n	8005496 <_scanf_float+0x82>
 80057b8:	9b04      	ldr	r3, [sp, #16]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d0e6      	beq.n	800578c <_scanf_float+0x378>
 80057be:	9905      	ldr	r1, [sp, #20]
 80057c0:	230a      	movs	r3, #10
 80057c2:	462a      	mov	r2, r5
 80057c4:	3101      	adds	r1, #1
 80057c6:	4640      	mov	r0, r8
 80057c8:	f002 fbb4 	bl	8007f34 <_strtol_r>
 80057cc:	9b04      	ldr	r3, [sp, #16]
 80057ce:	9e05      	ldr	r6, [sp, #20]
 80057d0:	1ac2      	subs	r2, r0, r3
 80057d2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80057d6:	429e      	cmp	r6, r3
 80057d8:	bf28      	it	cs
 80057da:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80057de:	490d      	ldr	r1, [pc, #52]	; (8005814 <_scanf_float+0x400>)
 80057e0:	4630      	mov	r0, r6
 80057e2:	f000 f8cb 	bl	800597c <siprintf>
 80057e6:	e7d1      	b.n	800578c <_scanf_float+0x378>
 80057e8:	f011 0f04 	tst.w	r1, #4
 80057ec:	9903      	ldr	r1, [sp, #12]
 80057ee:	600a      	str	r2, [r1, #0]
 80057f0:	d1db      	bne.n	80057aa <_scanf_float+0x396>
 80057f2:	eeb4 0b40 	vcmp.f64	d0, d0
 80057f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057fa:	681e      	ldr	r6, [r3, #0]
 80057fc:	d705      	bvc.n	800580a <_scanf_float+0x3f6>
 80057fe:	4806      	ldr	r0, [pc, #24]	; (8005818 <_scanf_float+0x404>)
 8005800:	f000 f99e 	bl	8005b40 <nanf>
 8005804:	ed86 0a00 	vstr	s0, [r6]
 8005808:	e7d2      	b.n	80057b0 <_scanf_float+0x39c>
 800580a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800580e:	e7f9      	b.n	8005804 <_scanf_float+0x3f0>
 8005810:	2500      	movs	r5, #0
 8005812:	e640      	b.n	8005496 <_scanf_float+0x82>
 8005814:	080091b0 	.word	0x080091b0
 8005818:	08009545 	.word	0x08009545

0800581c <std>:
 800581c:	2300      	movs	r3, #0
 800581e:	b510      	push	{r4, lr}
 8005820:	4604      	mov	r4, r0
 8005822:	e9c0 3300 	strd	r3, r3, [r0]
 8005826:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800582a:	6083      	str	r3, [r0, #8]
 800582c:	8181      	strh	r1, [r0, #12]
 800582e:	6643      	str	r3, [r0, #100]	; 0x64
 8005830:	81c2      	strh	r2, [r0, #14]
 8005832:	6183      	str	r3, [r0, #24]
 8005834:	4619      	mov	r1, r3
 8005836:	2208      	movs	r2, #8
 8005838:	305c      	adds	r0, #92	; 0x5c
 800583a:	f000 f902 	bl	8005a42 <memset>
 800583e:	4b05      	ldr	r3, [pc, #20]	; (8005854 <std+0x38>)
 8005840:	6263      	str	r3, [r4, #36]	; 0x24
 8005842:	4b05      	ldr	r3, [pc, #20]	; (8005858 <std+0x3c>)
 8005844:	62a3      	str	r3, [r4, #40]	; 0x28
 8005846:	4b05      	ldr	r3, [pc, #20]	; (800585c <std+0x40>)
 8005848:	62e3      	str	r3, [r4, #44]	; 0x2c
 800584a:	4b05      	ldr	r3, [pc, #20]	; (8005860 <std+0x44>)
 800584c:	6224      	str	r4, [r4, #32]
 800584e:	6323      	str	r3, [r4, #48]	; 0x30
 8005850:	bd10      	pop	{r4, pc}
 8005852:	bf00      	nop
 8005854:	080059bd 	.word	0x080059bd
 8005858:	080059df 	.word	0x080059df
 800585c:	08005a17 	.word	0x08005a17
 8005860:	08005a3b 	.word	0x08005a3b

08005864 <stdio_exit_handler>:
 8005864:	4a02      	ldr	r2, [pc, #8]	; (8005870 <stdio_exit_handler+0xc>)
 8005866:	4903      	ldr	r1, [pc, #12]	; (8005874 <stdio_exit_handler+0x10>)
 8005868:	4803      	ldr	r0, [pc, #12]	; (8005878 <stdio_exit_handler+0x14>)
 800586a:	f000 b869 	b.w	8005940 <_fwalk_sglue>
 800586e:	bf00      	nop
 8005870:	2000000c 	.word	0x2000000c
 8005874:	080082f5 	.word	0x080082f5
 8005878:	20000018 	.word	0x20000018

0800587c <cleanup_stdio>:
 800587c:	6841      	ldr	r1, [r0, #4]
 800587e:	4b0c      	ldr	r3, [pc, #48]	; (80058b0 <cleanup_stdio+0x34>)
 8005880:	4299      	cmp	r1, r3
 8005882:	b510      	push	{r4, lr}
 8005884:	4604      	mov	r4, r0
 8005886:	d001      	beq.n	800588c <cleanup_stdio+0x10>
 8005888:	f002 fd34 	bl	80082f4 <_fflush_r>
 800588c:	68a1      	ldr	r1, [r4, #8]
 800588e:	4b09      	ldr	r3, [pc, #36]	; (80058b4 <cleanup_stdio+0x38>)
 8005890:	4299      	cmp	r1, r3
 8005892:	d002      	beq.n	800589a <cleanup_stdio+0x1e>
 8005894:	4620      	mov	r0, r4
 8005896:	f002 fd2d 	bl	80082f4 <_fflush_r>
 800589a:	68e1      	ldr	r1, [r4, #12]
 800589c:	4b06      	ldr	r3, [pc, #24]	; (80058b8 <cleanup_stdio+0x3c>)
 800589e:	4299      	cmp	r1, r3
 80058a0:	d004      	beq.n	80058ac <cleanup_stdio+0x30>
 80058a2:	4620      	mov	r0, r4
 80058a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058a8:	f002 bd24 	b.w	80082f4 <_fflush_r>
 80058ac:	bd10      	pop	{r4, pc}
 80058ae:	bf00      	nop
 80058b0:	20000324 	.word	0x20000324
 80058b4:	2000038c 	.word	0x2000038c
 80058b8:	200003f4 	.word	0x200003f4

080058bc <global_stdio_init.part.0>:
 80058bc:	b510      	push	{r4, lr}
 80058be:	4b0b      	ldr	r3, [pc, #44]	; (80058ec <global_stdio_init.part.0+0x30>)
 80058c0:	4c0b      	ldr	r4, [pc, #44]	; (80058f0 <global_stdio_init.part.0+0x34>)
 80058c2:	4a0c      	ldr	r2, [pc, #48]	; (80058f4 <global_stdio_init.part.0+0x38>)
 80058c4:	601a      	str	r2, [r3, #0]
 80058c6:	4620      	mov	r0, r4
 80058c8:	2200      	movs	r2, #0
 80058ca:	2104      	movs	r1, #4
 80058cc:	f7ff ffa6 	bl	800581c <std>
 80058d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80058d4:	2201      	movs	r2, #1
 80058d6:	2109      	movs	r1, #9
 80058d8:	f7ff ffa0 	bl	800581c <std>
 80058dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80058e0:	2202      	movs	r2, #2
 80058e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058e6:	2112      	movs	r1, #18
 80058e8:	f7ff bf98 	b.w	800581c <std>
 80058ec:	2000045c 	.word	0x2000045c
 80058f0:	20000324 	.word	0x20000324
 80058f4:	08005865 	.word	0x08005865

080058f8 <__sfp_lock_acquire>:
 80058f8:	4801      	ldr	r0, [pc, #4]	; (8005900 <__sfp_lock_acquire+0x8>)
 80058fa:	f000 b91f 	b.w	8005b3c <__retarget_lock_acquire_recursive>
 80058fe:	bf00      	nop
 8005900:	20000465 	.word	0x20000465

08005904 <__sfp_lock_release>:
 8005904:	4801      	ldr	r0, [pc, #4]	; (800590c <__sfp_lock_release+0x8>)
 8005906:	f000 b91a 	b.w	8005b3e <__retarget_lock_release_recursive>
 800590a:	bf00      	nop
 800590c:	20000465 	.word	0x20000465

08005910 <__sinit>:
 8005910:	b510      	push	{r4, lr}
 8005912:	4604      	mov	r4, r0
 8005914:	f7ff fff0 	bl	80058f8 <__sfp_lock_acquire>
 8005918:	6a23      	ldr	r3, [r4, #32]
 800591a:	b11b      	cbz	r3, 8005924 <__sinit+0x14>
 800591c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005920:	f7ff bff0 	b.w	8005904 <__sfp_lock_release>
 8005924:	4b04      	ldr	r3, [pc, #16]	; (8005938 <__sinit+0x28>)
 8005926:	6223      	str	r3, [r4, #32]
 8005928:	4b04      	ldr	r3, [pc, #16]	; (800593c <__sinit+0x2c>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1f5      	bne.n	800591c <__sinit+0xc>
 8005930:	f7ff ffc4 	bl	80058bc <global_stdio_init.part.0>
 8005934:	e7f2      	b.n	800591c <__sinit+0xc>
 8005936:	bf00      	nop
 8005938:	0800587d 	.word	0x0800587d
 800593c:	2000045c 	.word	0x2000045c

08005940 <_fwalk_sglue>:
 8005940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005944:	4607      	mov	r7, r0
 8005946:	4688      	mov	r8, r1
 8005948:	4614      	mov	r4, r2
 800594a:	2600      	movs	r6, #0
 800594c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005950:	f1b9 0901 	subs.w	r9, r9, #1
 8005954:	d505      	bpl.n	8005962 <_fwalk_sglue+0x22>
 8005956:	6824      	ldr	r4, [r4, #0]
 8005958:	2c00      	cmp	r4, #0
 800595a:	d1f7      	bne.n	800594c <_fwalk_sglue+0xc>
 800595c:	4630      	mov	r0, r6
 800595e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005962:	89ab      	ldrh	r3, [r5, #12]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d907      	bls.n	8005978 <_fwalk_sglue+0x38>
 8005968:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800596c:	3301      	adds	r3, #1
 800596e:	d003      	beq.n	8005978 <_fwalk_sglue+0x38>
 8005970:	4629      	mov	r1, r5
 8005972:	4638      	mov	r0, r7
 8005974:	47c0      	blx	r8
 8005976:	4306      	orrs	r6, r0
 8005978:	3568      	adds	r5, #104	; 0x68
 800597a:	e7e9      	b.n	8005950 <_fwalk_sglue+0x10>

0800597c <siprintf>:
 800597c:	b40e      	push	{r1, r2, r3}
 800597e:	b500      	push	{lr}
 8005980:	b09c      	sub	sp, #112	; 0x70
 8005982:	ab1d      	add	r3, sp, #116	; 0x74
 8005984:	9002      	str	r0, [sp, #8]
 8005986:	9006      	str	r0, [sp, #24]
 8005988:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800598c:	4809      	ldr	r0, [pc, #36]	; (80059b4 <siprintf+0x38>)
 800598e:	9107      	str	r1, [sp, #28]
 8005990:	9104      	str	r1, [sp, #16]
 8005992:	4909      	ldr	r1, [pc, #36]	; (80059b8 <siprintf+0x3c>)
 8005994:	f853 2b04 	ldr.w	r2, [r3], #4
 8005998:	9105      	str	r1, [sp, #20]
 800599a:	6800      	ldr	r0, [r0, #0]
 800599c:	9301      	str	r3, [sp, #4]
 800599e:	a902      	add	r1, sp, #8
 80059a0:	f002 fb24 	bl	8007fec <_svfiprintf_r>
 80059a4:	9b02      	ldr	r3, [sp, #8]
 80059a6:	2200      	movs	r2, #0
 80059a8:	701a      	strb	r2, [r3, #0]
 80059aa:	b01c      	add	sp, #112	; 0x70
 80059ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80059b0:	b003      	add	sp, #12
 80059b2:	4770      	bx	lr
 80059b4:	20000064 	.word	0x20000064
 80059b8:	ffff0208 	.word	0xffff0208

080059bc <__sread>:
 80059bc:	b510      	push	{r4, lr}
 80059be:	460c      	mov	r4, r1
 80059c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059c4:	f000 f86c 	bl	8005aa0 <_read_r>
 80059c8:	2800      	cmp	r0, #0
 80059ca:	bfab      	itete	ge
 80059cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80059ce:	89a3      	ldrhlt	r3, [r4, #12]
 80059d0:	181b      	addge	r3, r3, r0
 80059d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80059d6:	bfac      	ite	ge
 80059d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80059da:	81a3      	strhlt	r3, [r4, #12]
 80059dc:	bd10      	pop	{r4, pc}

080059de <__swrite>:
 80059de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059e2:	461f      	mov	r7, r3
 80059e4:	898b      	ldrh	r3, [r1, #12]
 80059e6:	05db      	lsls	r3, r3, #23
 80059e8:	4605      	mov	r5, r0
 80059ea:	460c      	mov	r4, r1
 80059ec:	4616      	mov	r6, r2
 80059ee:	d505      	bpl.n	80059fc <__swrite+0x1e>
 80059f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059f4:	2302      	movs	r3, #2
 80059f6:	2200      	movs	r2, #0
 80059f8:	f000 f840 	bl	8005a7c <_lseek_r>
 80059fc:	89a3      	ldrh	r3, [r4, #12]
 80059fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a06:	81a3      	strh	r3, [r4, #12]
 8005a08:	4632      	mov	r2, r6
 8005a0a:	463b      	mov	r3, r7
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a12:	f000 b857 	b.w	8005ac4 <_write_r>

08005a16 <__sseek>:
 8005a16:	b510      	push	{r4, lr}
 8005a18:	460c      	mov	r4, r1
 8005a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a1e:	f000 f82d 	bl	8005a7c <_lseek_r>
 8005a22:	1c43      	adds	r3, r0, #1
 8005a24:	89a3      	ldrh	r3, [r4, #12]
 8005a26:	bf15      	itete	ne
 8005a28:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a32:	81a3      	strheq	r3, [r4, #12]
 8005a34:	bf18      	it	ne
 8005a36:	81a3      	strhne	r3, [r4, #12]
 8005a38:	bd10      	pop	{r4, pc}

08005a3a <__sclose>:
 8005a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a3e:	f000 b80d 	b.w	8005a5c <_close_r>

08005a42 <memset>:
 8005a42:	4402      	add	r2, r0
 8005a44:	4603      	mov	r3, r0
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d100      	bne.n	8005a4c <memset+0xa>
 8005a4a:	4770      	bx	lr
 8005a4c:	f803 1b01 	strb.w	r1, [r3], #1
 8005a50:	e7f9      	b.n	8005a46 <memset+0x4>
	...

08005a54 <_localeconv_r>:
 8005a54:	4800      	ldr	r0, [pc, #0]	; (8005a58 <_localeconv_r+0x4>)
 8005a56:	4770      	bx	lr
 8005a58:	20000158 	.word	0x20000158

08005a5c <_close_r>:
 8005a5c:	b538      	push	{r3, r4, r5, lr}
 8005a5e:	4d06      	ldr	r5, [pc, #24]	; (8005a78 <_close_r+0x1c>)
 8005a60:	2300      	movs	r3, #0
 8005a62:	4604      	mov	r4, r0
 8005a64:	4608      	mov	r0, r1
 8005a66:	602b      	str	r3, [r5, #0]
 8005a68:	f7fb fa1d 	bl	8000ea6 <_close>
 8005a6c:	1c43      	adds	r3, r0, #1
 8005a6e:	d102      	bne.n	8005a76 <_close_r+0x1a>
 8005a70:	682b      	ldr	r3, [r5, #0]
 8005a72:	b103      	cbz	r3, 8005a76 <_close_r+0x1a>
 8005a74:	6023      	str	r3, [r4, #0]
 8005a76:	bd38      	pop	{r3, r4, r5, pc}
 8005a78:	20000460 	.word	0x20000460

08005a7c <_lseek_r>:
 8005a7c:	b538      	push	{r3, r4, r5, lr}
 8005a7e:	4d07      	ldr	r5, [pc, #28]	; (8005a9c <_lseek_r+0x20>)
 8005a80:	4604      	mov	r4, r0
 8005a82:	4608      	mov	r0, r1
 8005a84:	4611      	mov	r1, r2
 8005a86:	2200      	movs	r2, #0
 8005a88:	602a      	str	r2, [r5, #0]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f7fb fa32 	bl	8000ef4 <_lseek>
 8005a90:	1c43      	adds	r3, r0, #1
 8005a92:	d102      	bne.n	8005a9a <_lseek_r+0x1e>
 8005a94:	682b      	ldr	r3, [r5, #0]
 8005a96:	b103      	cbz	r3, 8005a9a <_lseek_r+0x1e>
 8005a98:	6023      	str	r3, [r4, #0]
 8005a9a:	bd38      	pop	{r3, r4, r5, pc}
 8005a9c:	20000460 	.word	0x20000460

08005aa0 <_read_r>:
 8005aa0:	b538      	push	{r3, r4, r5, lr}
 8005aa2:	4d07      	ldr	r5, [pc, #28]	; (8005ac0 <_read_r+0x20>)
 8005aa4:	4604      	mov	r4, r0
 8005aa6:	4608      	mov	r0, r1
 8005aa8:	4611      	mov	r1, r2
 8005aaa:	2200      	movs	r2, #0
 8005aac:	602a      	str	r2, [r5, #0]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f7fb f9c0 	bl	8000e34 <_read>
 8005ab4:	1c43      	adds	r3, r0, #1
 8005ab6:	d102      	bne.n	8005abe <_read_r+0x1e>
 8005ab8:	682b      	ldr	r3, [r5, #0]
 8005aba:	b103      	cbz	r3, 8005abe <_read_r+0x1e>
 8005abc:	6023      	str	r3, [r4, #0]
 8005abe:	bd38      	pop	{r3, r4, r5, pc}
 8005ac0:	20000460 	.word	0x20000460

08005ac4 <_write_r>:
 8005ac4:	b538      	push	{r3, r4, r5, lr}
 8005ac6:	4d07      	ldr	r5, [pc, #28]	; (8005ae4 <_write_r+0x20>)
 8005ac8:	4604      	mov	r4, r0
 8005aca:	4608      	mov	r0, r1
 8005acc:	4611      	mov	r1, r2
 8005ace:	2200      	movs	r2, #0
 8005ad0:	602a      	str	r2, [r5, #0]
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	f7fb f9cb 	bl	8000e6e <_write>
 8005ad8:	1c43      	adds	r3, r0, #1
 8005ada:	d102      	bne.n	8005ae2 <_write_r+0x1e>
 8005adc:	682b      	ldr	r3, [r5, #0]
 8005ade:	b103      	cbz	r3, 8005ae2 <_write_r+0x1e>
 8005ae0:	6023      	str	r3, [r4, #0]
 8005ae2:	bd38      	pop	{r3, r4, r5, pc}
 8005ae4:	20000460 	.word	0x20000460

08005ae8 <__errno>:
 8005ae8:	4b01      	ldr	r3, [pc, #4]	; (8005af0 <__errno+0x8>)
 8005aea:	6818      	ldr	r0, [r3, #0]
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	20000064 	.word	0x20000064

08005af4 <__libc_init_array>:
 8005af4:	b570      	push	{r4, r5, r6, lr}
 8005af6:	4d0d      	ldr	r5, [pc, #52]	; (8005b2c <__libc_init_array+0x38>)
 8005af8:	4c0d      	ldr	r4, [pc, #52]	; (8005b30 <__libc_init_array+0x3c>)
 8005afa:	1b64      	subs	r4, r4, r5
 8005afc:	10a4      	asrs	r4, r4, #2
 8005afe:	2600      	movs	r6, #0
 8005b00:	42a6      	cmp	r6, r4
 8005b02:	d109      	bne.n	8005b18 <__libc_init_array+0x24>
 8005b04:	4d0b      	ldr	r5, [pc, #44]	; (8005b34 <__libc_init_array+0x40>)
 8005b06:	4c0c      	ldr	r4, [pc, #48]	; (8005b38 <__libc_init_array+0x44>)
 8005b08:	f003 fb0a 	bl	8009120 <_init>
 8005b0c:	1b64      	subs	r4, r4, r5
 8005b0e:	10a4      	asrs	r4, r4, #2
 8005b10:	2600      	movs	r6, #0
 8005b12:	42a6      	cmp	r6, r4
 8005b14:	d105      	bne.n	8005b22 <__libc_init_array+0x2e>
 8005b16:	bd70      	pop	{r4, r5, r6, pc}
 8005b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b1c:	4798      	blx	r3
 8005b1e:	3601      	adds	r6, #1
 8005b20:	e7ee      	b.n	8005b00 <__libc_init_array+0xc>
 8005b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b26:	4798      	blx	r3
 8005b28:	3601      	adds	r6, #1
 8005b2a:	e7f2      	b.n	8005b12 <__libc_init_array+0x1e>
 8005b2c:	080095b0 	.word	0x080095b0
 8005b30:	080095b0 	.word	0x080095b0
 8005b34:	080095b0 	.word	0x080095b0
 8005b38:	080095b4 	.word	0x080095b4

08005b3c <__retarget_lock_acquire_recursive>:
 8005b3c:	4770      	bx	lr

08005b3e <__retarget_lock_release_recursive>:
 8005b3e:	4770      	bx	lr

08005b40 <nanf>:
 8005b40:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005b48 <nanf+0x8>
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	7fc00000 	.word	0x7fc00000

08005b4c <quorem>:
 8005b4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b50:	6903      	ldr	r3, [r0, #16]
 8005b52:	690c      	ldr	r4, [r1, #16]
 8005b54:	42a3      	cmp	r3, r4
 8005b56:	4607      	mov	r7, r0
 8005b58:	db7e      	blt.n	8005c58 <quorem+0x10c>
 8005b5a:	3c01      	subs	r4, #1
 8005b5c:	f101 0814 	add.w	r8, r1, #20
 8005b60:	f100 0514 	add.w	r5, r0, #20
 8005b64:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b68:	9301      	str	r3, [sp, #4]
 8005b6a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b72:	3301      	adds	r3, #1
 8005b74:	429a      	cmp	r2, r3
 8005b76:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005b7a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b7e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b82:	d331      	bcc.n	8005be8 <quorem+0x9c>
 8005b84:	f04f 0e00 	mov.w	lr, #0
 8005b88:	4640      	mov	r0, r8
 8005b8a:	46ac      	mov	ip, r5
 8005b8c:	46f2      	mov	sl, lr
 8005b8e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005b92:	b293      	uxth	r3, r2
 8005b94:	fb06 e303 	mla	r3, r6, r3, lr
 8005b98:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005b9c:	0c1a      	lsrs	r2, r3, #16
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	ebaa 0303 	sub.w	r3, sl, r3
 8005ba4:	f8dc a000 	ldr.w	sl, [ip]
 8005ba8:	fa13 f38a 	uxtah	r3, r3, sl
 8005bac:	fb06 220e 	mla	r2, r6, lr, r2
 8005bb0:	9300      	str	r3, [sp, #0]
 8005bb2:	9b00      	ldr	r3, [sp, #0]
 8005bb4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005bb8:	b292      	uxth	r2, r2
 8005bba:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005bbe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005bc2:	f8bd 3000 	ldrh.w	r3, [sp]
 8005bc6:	4581      	cmp	r9, r0
 8005bc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bcc:	f84c 3b04 	str.w	r3, [ip], #4
 8005bd0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005bd4:	d2db      	bcs.n	8005b8e <quorem+0x42>
 8005bd6:	f855 300b 	ldr.w	r3, [r5, fp]
 8005bda:	b92b      	cbnz	r3, 8005be8 <quorem+0x9c>
 8005bdc:	9b01      	ldr	r3, [sp, #4]
 8005bde:	3b04      	subs	r3, #4
 8005be0:	429d      	cmp	r5, r3
 8005be2:	461a      	mov	r2, r3
 8005be4:	d32c      	bcc.n	8005c40 <quorem+0xf4>
 8005be6:	613c      	str	r4, [r7, #16]
 8005be8:	4638      	mov	r0, r7
 8005bea:	f001 f96b 	bl	8006ec4 <__mcmp>
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	db22      	blt.n	8005c38 <quorem+0xec>
 8005bf2:	3601      	adds	r6, #1
 8005bf4:	4629      	mov	r1, r5
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	f858 2b04 	ldr.w	r2, [r8], #4
 8005bfc:	f8d1 c000 	ldr.w	ip, [r1]
 8005c00:	b293      	uxth	r3, r2
 8005c02:	1ac3      	subs	r3, r0, r3
 8005c04:	0c12      	lsrs	r2, r2, #16
 8005c06:	fa13 f38c 	uxtah	r3, r3, ip
 8005c0a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005c0e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c18:	45c1      	cmp	r9, r8
 8005c1a:	f841 3b04 	str.w	r3, [r1], #4
 8005c1e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005c22:	d2e9      	bcs.n	8005bf8 <quorem+0xac>
 8005c24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c28:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c2c:	b922      	cbnz	r2, 8005c38 <quorem+0xec>
 8005c2e:	3b04      	subs	r3, #4
 8005c30:	429d      	cmp	r5, r3
 8005c32:	461a      	mov	r2, r3
 8005c34:	d30a      	bcc.n	8005c4c <quorem+0x100>
 8005c36:	613c      	str	r4, [r7, #16]
 8005c38:	4630      	mov	r0, r6
 8005c3a:	b003      	add	sp, #12
 8005c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c40:	6812      	ldr	r2, [r2, #0]
 8005c42:	3b04      	subs	r3, #4
 8005c44:	2a00      	cmp	r2, #0
 8005c46:	d1ce      	bne.n	8005be6 <quorem+0x9a>
 8005c48:	3c01      	subs	r4, #1
 8005c4a:	e7c9      	b.n	8005be0 <quorem+0x94>
 8005c4c:	6812      	ldr	r2, [r2, #0]
 8005c4e:	3b04      	subs	r3, #4
 8005c50:	2a00      	cmp	r2, #0
 8005c52:	d1f0      	bne.n	8005c36 <quorem+0xea>
 8005c54:	3c01      	subs	r4, #1
 8005c56:	e7eb      	b.n	8005c30 <quorem+0xe4>
 8005c58:	2000      	movs	r0, #0
 8005c5a:	e7ee      	b.n	8005c3a <quorem+0xee>
 8005c5c:	0000      	movs	r0, r0
	...

08005c60 <_dtoa_r>:
 8005c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c64:	ed2d 8b02 	vpush	{d8}
 8005c68:	69c5      	ldr	r5, [r0, #28]
 8005c6a:	b091      	sub	sp, #68	; 0x44
 8005c6c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005c70:	ec59 8b10 	vmov	r8, r9, d0
 8005c74:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8005c76:	9106      	str	r1, [sp, #24]
 8005c78:	4606      	mov	r6, r0
 8005c7a:	9208      	str	r2, [sp, #32]
 8005c7c:	930c      	str	r3, [sp, #48]	; 0x30
 8005c7e:	b975      	cbnz	r5, 8005c9e <_dtoa_r+0x3e>
 8005c80:	2010      	movs	r0, #16
 8005c82:	f000 fda5 	bl	80067d0 <malloc>
 8005c86:	4602      	mov	r2, r0
 8005c88:	61f0      	str	r0, [r6, #28]
 8005c8a:	b920      	cbnz	r0, 8005c96 <_dtoa_r+0x36>
 8005c8c:	4ba6      	ldr	r3, [pc, #664]	; (8005f28 <_dtoa_r+0x2c8>)
 8005c8e:	21ef      	movs	r1, #239	; 0xef
 8005c90:	48a6      	ldr	r0, [pc, #664]	; (8005f2c <_dtoa_r+0x2cc>)
 8005c92:	f002 fba9 	bl	80083e8 <__assert_func>
 8005c96:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005c9a:	6005      	str	r5, [r0, #0]
 8005c9c:	60c5      	str	r5, [r0, #12]
 8005c9e:	69f3      	ldr	r3, [r6, #28]
 8005ca0:	6819      	ldr	r1, [r3, #0]
 8005ca2:	b151      	cbz	r1, 8005cba <_dtoa_r+0x5a>
 8005ca4:	685a      	ldr	r2, [r3, #4]
 8005ca6:	604a      	str	r2, [r1, #4]
 8005ca8:	2301      	movs	r3, #1
 8005caa:	4093      	lsls	r3, r2
 8005cac:	608b      	str	r3, [r1, #8]
 8005cae:	4630      	mov	r0, r6
 8005cb0:	f000 fe82 	bl	80069b8 <_Bfree>
 8005cb4:	69f3      	ldr	r3, [r6, #28]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	601a      	str	r2, [r3, #0]
 8005cba:	f1b9 0300 	subs.w	r3, r9, #0
 8005cbe:	bfbb      	ittet	lt
 8005cc0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005cc4:	9303      	strlt	r3, [sp, #12]
 8005cc6:	2300      	movge	r3, #0
 8005cc8:	2201      	movlt	r2, #1
 8005cca:	bfac      	ite	ge
 8005ccc:	6023      	strge	r3, [r4, #0]
 8005cce:	6022      	strlt	r2, [r4, #0]
 8005cd0:	4b97      	ldr	r3, [pc, #604]	; (8005f30 <_dtoa_r+0x2d0>)
 8005cd2:	9c03      	ldr	r4, [sp, #12]
 8005cd4:	43a3      	bics	r3, r4
 8005cd6:	d11c      	bne.n	8005d12 <_dtoa_r+0xb2>
 8005cd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005cda:	f242 730f 	movw	r3, #9999	; 0x270f
 8005cde:	6013      	str	r3, [r2, #0]
 8005ce0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005ce4:	ea53 0308 	orrs.w	r3, r3, r8
 8005ce8:	f000 84fb 	beq.w	80066e2 <_dtoa_r+0xa82>
 8005cec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005cee:	b963      	cbnz	r3, 8005d0a <_dtoa_r+0xaa>
 8005cf0:	4b90      	ldr	r3, [pc, #576]	; (8005f34 <_dtoa_r+0x2d4>)
 8005cf2:	e020      	b.n	8005d36 <_dtoa_r+0xd6>
 8005cf4:	4b90      	ldr	r3, [pc, #576]	; (8005f38 <_dtoa_r+0x2d8>)
 8005cf6:	9301      	str	r3, [sp, #4]
 8005cf8:	3308      	adds	r3, #8
 8005cfa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005cfc:	6013      	str	r3, [r2, #0]
 8005cfe:	9801      	ldr	r0, [sp, #4]
 8005d00:	b011      	add	sp, #68	; 0x44
 8005d02:	ecbd 8b02 	vpop	{d8}
 8005d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d0a:	4b8a      	ldr	r3, [pc, #552]	; (8005f34 <_dtoa_r+0x2d4>)
 8005d0c:	9301      	str	r3, [sp, #4]
 8005d0e:	3303      	adds	r3, #3
 8005d10:	e7f3      	b.n	8005cfa <_dtoa_r+0x9a>
 8005d12:	ed9d 8b02 	vldr	d8, [sp, #8]
 8005d16:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d1e:	d10c      	bne.n	8005d3a <_dtoa_r+0xda>
 8005d20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d22:	2301      	movs	r3, #1
 8005d24:	6013      	str	r3, [r2, #0]
 8005d26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f000 84d7 	beq.w	80066dc <_dtoa_r+0xa7c>
 8005d2e:	4b83      	ldr	r3, [pc, #524]	; (8005f3c <_dtoa_r+0x2dc>)
 8005d30:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005d32:	6013      	str	r3, [r2, #0]
 8005d34:	3b01      	subs	r3, #1
 8005d36:	9301      	str	r3, [sp, #4]
 8005d38:	e7e1      	b.n	8005cfe <_dtoa_r+0x9e>
 8005d3a:	aa0e      	add	r2, sp, #56	; 0x38
 8005d3c:	a90f      	add	r1, sp, #60	; 0x3c
 8005d3e:	4630      	mov	r0, r6
 8005d40:	eeb0 0b48 	vmov.f64	d0, d8
 8005d44:	f001 f9d4 	bl	80070f0 <__d2b>
 8005d48:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8005d4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d4e:	4605      	mov	r5, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d046      	beq.n	8005de2 <_dtoa_r+0x182>
 8005d54:	eeb0 7b48 	vmov.f64	d7, d8
 8005d58:	ee18 1a90 	vmov	r1, s17
 8005d5c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005d60:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8005d64:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005d68:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005d6c:	2000      	movs	r0, #0
 8005d6e:	ee07 1a90 	vmov	s15, r1
 8005d72:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8005d76:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8005f10 <_dtoa_r+0x2b0>
 8005d7a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005d7e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8005f18 <_dtoa_r+0x2b8>
 8005d82:	eea7 6b05 	vfma.f64	d6, d7, d5
 8005d86:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8005f20 <_dtoa_r+0x2c0>
 8005d8a:	ee07 3a90 	vmov	s15, r3
 8005d8e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8005d92:	eeb0 7b46 	vmov.f64	d7, d6
 8005d96:	eea4 7b05 	vfma.f64	d7, d4, d5
 8005d9a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8005d9e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005da6:	ee16 ba90 	vmov	fp, s13
 8005daa:	9009      	str	r0, [sp, #36]	; 0x24
 8005dac:	d508      	bpl.n	8005dc0 <_dtoa_r+0x160>
 8005dae:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005db2:	eeb4 6b47 	vcmp.f64	d6, d7
 8005db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dba:	bf18      	it	ne
 8005dbc:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8005dc0:	f1bb 0f16 	cmp.w	fp, #22
 8005dc4:	d82b      	bhi.n	8005e1e <_dtoa_r+0x1be>
 8005dc6:	495e      	ldr	r1, [pc, #376]	; (8005f40 <_dtoa_r+0x2e0>)
 8005dc8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8005dcc:	ed91 7b00 	vldr	d7, [r1]
 8005dd0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dd8:	d501      	bpl.n	8005dde <_dtoa_r+0x17e>
 8005dda:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005dde:	2100      	movs	r1, #0
 8005de0:	e01e      	b.n	8005e20 <_dtoa_r+0x1c0>
 8005de2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005de4:	4413      	add	r3, r2
 8005de6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8005dea:	2920      	cmp	r1, #32
 8005dec:	bfc1      	itttt	gt
 8005dee:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8005df2:	408c      	lslgt	r4, r1
 8005df4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8005df8:	fa28 f101 	lsrgt.w	r1, r8, r1
 8005dfc:	bfd6      	itet	le
 8005dfe:	f1c1 0120 	rsble	r1, r1, #32
 8005e02:	4321      	orrgt	r1, r4
 8005e04:	fa08 f101 	lslle.w	r1, r8, r1
 8005e08:	ee07 1a90 	vmov	s15, r1
 8005e0c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005e10:	3b01      	subs	r3, #1
 8005e12:	ee17 1a90 	vmov	r1, s15
 8005e16:	2001      	movs	r0, #1
 8005e18:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005e1c:	e7a7      	b.n	8005d6e <_dtoa_r+0x10e>
 8005e1e:	2101      	movs	r1, #1
 8005e20:	1ad2      	subs	r2, r2, r3
 8005e22:	1e53      	subs	r3, r2, #1
 8005e24:	9305      	str	r3, [sp, #20]
 8005e26:	bf45      	ittet	mi
 8005e28:	f1c2 0301 	rsbmi	r3, r2, #1
 8005e2c:	9304      	strmi	r3, [sp, #16]
 8005e2e:	2300      	movpl	r3, #0
 8005e30:	2300      	movmi	r3, #0
 8005e32:	bf4c      	ite	mi
 8005e34:	9305      	strmi	r3, [sp, #20]
 8005e36:	9304      	strpl	r3, [sp, #16]
 8005e38:	f1bb 0f00 	cmp.w	fp, #0
 8005e3c:	910b      	str	r1, [sp, #44]	; 0x2c
 8005e3e:	db18      	blt.n	8005e72 <_dtoa_r+0x212>
 8005e40:	9b05      	ldr	r3, [sp, #20]
 8005e42:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8005e46:	445b      	add	r3, fp
 8005e48:	9305      	str	r3, [sp, #20]
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	9a06      	ldr	r2, [sp, #24]
 8005e4e:	2a09      	cmp	r2, #9
 8005e50:	d848      	bhi.n	8005ee4 <_dtoa_r+0x284>
 8005e52:	2a05      	cmp	r2, #5
 8005e54:	bfc4      	itt	gt
 8005e56:	3a04      	subgt	r2, #4
 8005e58:	9206      	strgt	r2, [sp, #24]
 8005e5a:	9a06      	ldr	r2, [sp, #24]
 8005e5c:	f1a2 0202 	sub.w	r2, r2, #2
 8005e60:	bfcc      	ite	gt
 8005e62:	2400      	movgt	r4, #0
 8005e64:	2401      	movle	r4, #1
 8005e66:	2a03      	cmp	r2, #3
 8005e68:	d847      	bhi.n	8005efa <_dtoa_r+0x29a>
 8005e6a:	e8df f002 	tbb	[pc, r2]
 8005e6e:	2d0b      	.short	0x2d0b
 8005e70:	392b      	.short	0x392b
 8005e72:	9b04      	ldr	r3, [sp, #16]
 8005e74:	2200      	movs	r2, #0
 8005e76:	eba3 030b 	sub.w	r3, r3, fp
 8005e7a:	9304      	str	r3, [sp, #16]
 8005e7c:	920a      	str	r2, [sp, #40]	; 0x28
 8005e7e:	f1cb 0300 	rsb	r3, fp, #0
 8005e82:	e7e3      	b.n	8005e4c <_dtoa_r+0x1ec>
 8005e84:	2200      	movs	r2, #0
 8005e86:	9207      	str	r2, [sp, #28]
 8005e88:	9a08      	ldr	r2, [sp, #32]
 8005e8a:	2a00      	cmp	r2, #0
 8005e8c:	dc38      	bgt.n	8005f00 <_dtoa_r+0x2a0>
 8005e8e:	f04f 0a01 	mov.w	sl, #1
 8005e92:	46d1      	mov	r9, sl
 8005e94:	4652      	mov	r2, sl
 8005e96:	f8cd a020 	str.w	sl, [sp, #32]
 8005e9a:	69f7      	ldr	r7, [r6, #28]
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	2004      	movs	r0, #4
 8005ea0:	f100 0c14 	add.w	ip, r0, #20
 8005ea4:	4594      	cmp	ip, r2
 8005ea6:	d930      	bls.n	8005f0a <_dtoa_r+0x2aa>
 8005ea8:	6079      	str	r1, [r7, #4]
 8005eaa:	4630      	mov	r0, r6
 8005eac:	930d      	str	r3, [sp, #52]	; 0x34
 8005eae:	f000 fd43 	bl	8006938 <_Balloc>
 8005eb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005eb4:	9001      	str	r0, [sp, #4]
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	2800      	cmp	r0, #0
 8005eba:	d145      	bne.n	8005f48 <_dtoa_r+0x2e8>
 8005ebc:	4b21      	ldr	r3, [pc, #132]	; (8005f44 <_dtoa_r+0x2e4>)
 8005ebe:	f240 11af 	movw	r1, #431	; 0x1af
 8005ec2:	e6e5      	b.n	8005c90 <_dtoa_r+0x30>
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	e7de      	b.n	8005e86 <_dtoa_r+0x226>
 8005ec8:	2200      	movs	r2, #0
 8005eca:	9207      	str	r2, [sp, #28]
 8005ecc:	9a08      	ldr	r2, [sp, #32]
 8005ece:	eb0b 0a02 	add.w	sl, fp, r2
 8005ed2:	f10a 0901 	add.w	r9, sl, #1
 8005ed6:	464a      	mov	r2, r9
 8005ed8:	2a01      	cmp	r2, #1
 8005eda:	bfb8      	it	lt
 8005edc:	2201      	movlt	r2, #1
 8005ede:	e7dc      	b.n	8005e9a <_dtoa_r+0x23a>
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	e7f2      	b.n	8005eca <_dtoa_r+0x26a>
 8005ee4:	2401      	movs	r4, #1
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8005eec:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	46d1      	mov	r9, sl
 8005ef4:	2212      	movs	r2, #18
 8005ef6:	9108      	str	r1, [sp, #32]
 8005ef8:	e7cf      	b.n	8005e9a <_dtoa_r+0x23a>
 8005efa:	2201      	movs	r2, #1
 8005efc:	9207      	str	r2, [sp, #28]
 8005efe:	e7f5      	b.n	8005eec <_dtoa_r+0x28c>
 8005f00:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005f04:	46d1      	mov	r9, sl
 8005f06:	4652      	mov	r2, sl
 8005f08:	e7c7      	b.n	8005e9a <_dtoa_r+0x23a>
 8005f0a:	3101      	adds	r1, #1
 8005f0c:	0040      	lsls	r0, r0, #1
 8005f0e:	e7c7      	b.n	8005ea0 <_dtoa_r+0x240>
 8005f10:	636f4361 	.word	0x636f4361
 8005f14:	3fd287a7 	.word	0x3fd287a7
 8005f18:	8b60c8b3 	.word	0x8b60c8b3
 8005f1c:	3fc68a28 	.word	0x3fc68a28
 8005f20:	509f79fb 	.word	0x509f79fb
 8005f24:	3fd34413 	.word	0x3fd34413
 8005f28:	080091c2 	.word	0x080091c2
 8005f2c:	080091d9 	.word	0x080091d9
 8005f30:	7ff00000 	.word	0x7ff00000
 8005f34:	080091be 	.word	0x080091be
 8005f38:	080091b5 	.word	0x080091b5
 8005f3c:	0800918d 	.word	0x0800918d
 8005f40:	080092c8 	.word	0x080092c8
 8005f44:	08009231 	.word	0x08009231
 8005f48:	69f2      	ldr	r2, [r6, #28]
 8005f4a:	9901      	ldr	r1, [sp, #4]
 8005f4c:	6011      	str	r1, [r2, #0]
 8005f4e:	f1b9 0f0e 	cmp.w	r9, #14
 8005f52:	d86c      	bhi.n	800602e <_dtoa_r+0x3ce>
 8005f54:	2c00      	cmp	r4, #0
 8005f56:	d06a      	beq.n	800602e <_dtoa_r+0x3ce>
 8005f58:	f1bb 0f00 	cmp.w	fp, #0
 8005f5c:	f340 80a0 	ble.w	80060a0 <_dtoa_r+0x440>
 8005f60:	4ac1      	ldr	r2, [pc, #772]	; (8006268 <_dtoa_r+0x608>)
 8005f62:	f00b 010f 	and.w	r1, fp, #15
 8005f66:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8005f6a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005f6e:	ed92 7b00 	vldr	d7, [r2]
 8005f72:	ea4f 122b 	mov.w	r2, fp, asr #4
 8005f76:	f000 8087 	beq.w	8006088 <_dtoa_r+0x428>
 8005f7a:	49bc      	ldr	r1, [pc, #752]	; (800626c <_dtoa_r+0x60c>)
 8005f7c:	ed91 6b08 	vldr	d6, [r1, #32]
 8005f80:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8005f84:	ed8d 6b02 	vstr	d6, [sp, #8]
 8005f88:	f002 020f 	and.w	r2, r2, #15
 8005f8c:	2103      	movs	r1, #3
 8005f8e:	48b7      	ldr	r0, [pc, #732]	; (800626c <_dtoa_r+0x60c>)
 8005f90:	2a00      	cmp	r2, #0
 8005f92:	d17b      	bne.n	800608c <_dtoa_r+0x42c>
 8005f94:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005f98:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005f9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005fa0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005fa2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005fa6:	2a00      	cmp	r2, #0
 8005fa8:	f000 80a0 	beq.w	80060ec <_dtoa_r+0x48c>
 8005fac:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005fb0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fb8:	f140 8098 	bpl.w	80060ec <_dtoa_r+0x48c>
 8005fbc:	f1b9 0f00 	cmp.w	r9, #0
 8005fc0:	f000 8094 	beq.w	80060ec <_dtoa_r+0x48c>
 8005fc4:	f1ba 0f00 	cmp.w	sl, #0
 8005fc8:	dd2f      	ble.n	800602a <_dtoa_r+0x3ca>
 8005fca:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8005fce:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005fd2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005fd6:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8005fda:	3101      	adds	r1, #1
 8005fdc:	4654      	mov	r4, sl
 8005fde:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005fe2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8005fe6:	ee07 1a90 	vmov	s15, r1
 8005fea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005fee:	eea7 5b06 	vfma.f64	d5, d7, d6
 8005ff2:	ee15 7a90 	vmov	r7, s11
 8005ff6:	ec51 0b15 	vmov	r0, r1, d5
 8005ffa:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8005ffe:	2c00      	cmp	r4, #0
 8006000:	d177      	bne.n	80060f2 <_dtoa_r+0x492>
 8006002:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006006:	ee36 6b47 	vsub.f64	d6, d6, d7
 800600a:	ec41 0b17 	vmov	d7, r0, r1
 800600e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006016:	f300 826a 	bgt.w	80064ee <_dtoa_r+0x88e>
 800601a:	eeb1 7b47 	vneg.f64	d7, d7
 800601e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006026:	f100 8260 	bmi.w	80064ea <_dtoa_r+0x88a>
 800602a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800602e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006030:	2a00      	cmp	r2, #0
 8006032:	f2c0 811d 	blt.w	8006270 <_dtoa_r+0x610>
 8006036:	f1bb 0f0e 	cmp.w	fp, #14
 800603a:	f300 8119 	bgt.w	8006270 <_dtoa_r+0x610>
 800603e:	4b8a      	ldr	r3, [pc, #552]	; (8006268 <_dtoa_r+0x608>)
 8006040:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006044:	ed93 6b00 	vldr	d6, [r3]
 8006048:	9b08      	ldr	r3, [sp, #32]
 800604a:	2b00      	cmp	r3, #0
 800604c:	f280 80b7 	bge.w	80061be <_dtoa_r+0x55e>
 8006050:	f1b9 0f00 	cmp.w	r9, #0
 8006054:	f300 80b3 	bgt.w	80061be <_dtoa_r+0x55e>
 8006058:	f040 8246 	bne.w	80064e8 <_dtoa_r+0x888>
 800605c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006060:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006064:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006068:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800606c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006070:	464c      	mov	r4, r9
 8006072:	464f      	mov	r7, r9
 8006074:	f280 821c 	bge.w	80064b0 <_dtoa_r+0x850>
 8006078:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800607c:	2331      	movs	r3, #49	; 0x31
 800607e:	f808 3b01 	strb.w	r3, [r8], #1
 8006082:	f10b 0b01 	add.w	fp, fp, #1
 8006086:	e218      	b.n	80064ba <_dtoa_r+0x85a>
 8006088:	2102      	movs	r1, #2
 800608a:	e780      	b.n	8005f8e <_dtoa_r+0x32e>
 800608c:	07d4      	lsls	r4, r2, #31
 800608e:	d504      	bpl.n	800609a <_dtoa_r+0x43a>
 8006090:	ed90 6b00 	vldr	d6, [r0]
 8006094:	3101      	adds	r1, #1
 8006096:	ee27 7b06 	vmul.f64	d7, d7, d6
 800609a:	1052      	asrs	r2, r2, #1
 800609c:	3008      	adds	r0, #8
 800609e:	e777      	b.n	8005f90 <_dtoa_r+0x330>
 80060a0:	d022      	beq.n	80060e8 <_dtoa_r+0x488>
 80060a2:	f1cb 0200 	rsb	r2, fp, #0
 80060a6:	4970      	ldr	r1, [pc, #448]	; (8006268 <_dtoa_r+0x608>)
 80060a8:	f002 000f 	and.w	r0, r2, #15
 80060ac:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80060b0:	ed91 7b00 	vldr	d7, [r1]
 80060b4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80060b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80060bc:	486b      	ldr	r0, [pc, #428]	; (800626c <_dtoa_r+0x60c>)
 80060be:	1112      	asrs	r2, r2, #4
 80060c0:	2400      	movs	r4, #0
 80060c2:	2102      	movs	r1, #2
 80060c4:	b92a      	cbnz	r2, 80060d2 <_dtoa_r+0x472>
 80060c6:	2c00      	cmp	r4, #0
 80060c8:	f43f af6a 	beq.w	8005fa0 <_dtoa_r+0x340>
 80060cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80060d0:	e766      	b.n	8005fa0 <_dtoa_r+0x340>
 80060d2:	07d7      	lsls	r7, r2, #31
 80060d4:	d505      	bpl.n	80060e2 <_dtoa_r+0x482>
 80060d6:	ed90 6b00 	vldr	d6, [r0]
 80060da:	3101      	adds	r1, #1
 80060dc:	2401      	movs	r4, #1
 80060de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80060e2:	1052      	asrs	r2, r2, #1
 80060e4:	3008      	adds	r0, #8
 80060e6:	e7ed      	b.n	80060c4 <_dtoa_r+0x464>
 80060e8:	2102      	movs	r1, #2
 80060ea:	e759      	b.n	8005fa0 <_dtoa_r+0x340>
 80060ec:	465a      	mov	r2, fp
 80060ee:	464c      	mov	r4, r9
 80060f0:	e775      	b.n	8005fde <_dtoa_r+0x37e>
 80060f2:	ec41 0b17 	vmov	d7, r0, r1
 80060f6:	495c      	ldr	r1, [pc, #368]	; (8006268 <_dtoa_r+0x608>)
 80060f8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80060fc:	ed11 4b02 	vldr	d4, [r1, #-8]
 8006100:	9901      	ldr	r1, [sp, #4]
 8006102:	440c      	add	r4, r1
 8006104:	9907      	ldr	r1, [sp, #28]
 8006106:	b351      	cbz	r1, 800615e <_dtoa_r+0x4fe>
 8006108:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800610c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8006110:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006114:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8006118:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800611c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006120:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006124:	ee14 1a90 	vmov	r1, s9
 8006128:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800612c:	3130      	adds	r1, #48	; 0x30
 800612e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006132:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800613a:	f808 1b01 	strb.w	r1, [r8], #1
 800613e:	d439      	bmi.n	80061b4 <_dtoa_r+0x554>
 8006140:	ee32 5b46 	vsub.f64	d5, d2, d6
 8006144:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8006148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800614c:	d472      	bmi.n	8006234 <_dtoa_r+0x5d4>
 800614e:	45a0      	cmp	r8, r4
 8006150:	f43f af6b 	beq.w	800602a <_dtoa_r+0x3ca>
 8006154:	ee27 7b03 	vmul.f64	d7, d7, d3
 8006158:	ee26 6b03 	vmul.f64	d6, d6, d3
 800615c:	e7e0      	b.n	8006120 <_dtoa_r+0x4c0>
 800615e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006162:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006166:	4620      	mov	r0, r4
 8006168:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800616c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006170:	ee14 1a90 	vmov	r1, s9
 8006174:	3130      	adds	r1, #48	; 0x30
 8006176:	f808 1b01 	strb.w	r1, [r8], #1
 800617a:	45a0      	cmp	r8, r4
 800617c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006180:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006184:	d118      	bne.n	80061b8 <_dtoa_r+0x558>
 8006186:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800618a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800618e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8006192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006196:	dc4d      	bgt.n	8006234 <_dtoa_r+0x5d4>
 8006198:	ee35 5b47 	vsub.f64	d5, d5, d7
 800619c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80061a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061a4:	f57f af41 	bpl.w	800602a <_dtoa_r+0x3ca>
 80061a8:	4680      	mov	r8, r0
 80061aa:	3801      	subs	r0, #1
 80061ac:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80061b0:	2b30      	cmp	r3, #48	; 0x30
 80061b2:	d0f9      	beq.n	80061a8 <_dtoa_r+0x548>
 80061b4:	4693      	mov	fp, r2
 80061b6:	e02a      	b.n	800620e <_dtoa_r+0x5ae>
 80061b8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80061bc:	e7d6      	b.n	800616c <_dtoa_r+0x50c>
 80061be:	ed9d 7b02 	vldr	d7, [sp, #8]
 80061c2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80061c6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80061ca:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80061ce:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80061d2:	ee15 3a10 	vmov	r3, s10
 80061d6:	3330      	adds	r3, #48	; 0x30
 80061d8:	f808 3b01 	strb.w	r3, [r8], #1
 80061dc:	9b01      	ldr	r3, [sp, #4]
 80061de:	eba8 0303 	sub.w	r3, r8, r3
 80061e2:	4599      	cmp	r9, r3
 80061e4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80061e8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80061ec:	d133      	bne.n	8006256 <_dtoa_r+0x5f6>
 80061ee:	ee37 7b07 	vadd.f64	d7, d7, d7
 80061f2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80061f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061fa:	dc1a      	bgt.n	8006232 <_dtoa_r+0x5d2>
 80061fc:	eeb4 7b46 	vcmp.f64	d7, d6
 8006200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006204:	d103      	bne.n	800620e <_dtoa_r+0x5ae>
 8006206:	ee15 3a10 	vmov	r3, s10
 800620a:	07d9      	lsls	r1, r3, #31
 800620c:	d411      	bmi.n	8006232 <_dtoa_r+0x5d2>
 800620e:	4629      	mov	r1, r5
 8006210:	4630      	mov	r0, r6
 8006212:	f000 fbd1 	bl	80069b8 <_Bfree>
 8006216:	2300      	movs	r3, #0
 8006218:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800621a:	f888 3000 	strb.w	r3, [r8]
 800621e:	f10b 0301 	add.w	r3, fp, #1
 8006222:	6013      	str	r3, [r2, #0]
 8006224:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006226:	2b00      	cmp	r3, #0
 8006228:	f43f ad69 	beq.w	8005cfe <_dtoa_r+0x9e>
 800622c:	f8c3 8000 	str.w	r8, [r3]
 8006230:	e565      	b.n	8005cfe <_dtoa_r+0x9e>
 8006232:	465a      	mov	r2, fp
 8006234:	4643      	mov	r3, r8
 8006236:	4698      	mov	r8, r3
 8006238:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800623c:	2939      	cmp	r1, #57	; 0x39
 800623e:	d106      	bne.n	800624e <_dtoa_r+0x5ee>
 8006240:	9901      	ldr	r1, [sp, #4]
 8006242:	4299      	cmp	r1, r3
 8006244:	d1f7      	bne.n	8006236 <_dtoa_r+0x5d6>
 8006246:	9801      	ldr	r0, [sp, #4]
 8006248:	2130      	movs	r1, #48	; 0x30
 800624a:	3201      	adds	r2, #1
 800624c:	7001      	strb	r1, [r0, #0]
 800624e:	7819      	ldrb	r1, [r3, #0]
 8006250:	3101      	adds	r1, #1
 8006252:	7019      	strb	r1, [r3, #0]
 8006254:	e7ae      	b.n	80061b4 <_dtoa_r+0x554>
 8006256:	ee27 7b04 	vmul.f64	d7, d7, d4
 800625a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800625e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006262:	d1b2      	bne.n	80061ca <_dtoa_r+0x56a>
 8006264:	e7d3      	b.n	800620e <_dtoa_r+0x5ae>
 8006266:	bf00      	nop
 8006268:	080092c8 	.word	0x080092c8
 800626c:	080092a0 	.word	0x080092a0
 8006270:	9907      	ldr	r1, [sp, #28]
 8006272:	2900      	cmp	r1, #0
 8006274:	f000 80d0 	beq.w	8006418 <_dtoa_r+0x7b8>
 8006278:	9906      	ldr	r1, [sp, #24]
 800627a:	2901      	cmp	r1, #1
 800627c:	f300 80b4 	bgt.w	80063e8 <_dtoa_r+0x788>
 8006280:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006282:	2900      	cmp	r1, #0
 8006284:	f000 80ac 	beq.w	80063e0 <_dtoa_r+0x780>
 8006288:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800628c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006290:	461c      	mov	r4, r3
 8006292:	9309      	str	r3, [sp, #36]	; 0x24
 8006294:	9b04      	ldr	r3, [sp, #16]
 8006296:	4413      	add	r3, r2
 8006298:	9304      	str	r3, [sp, #16]
 800629a:	9b05      	ldr	r3, [sp, #20]
 800629c:	2101      	movs	r1, #1
 800629e:	4413      	add	r3, r2
 80062a0:	4630      	mov	r0, r6
 80062a2:	9305      	str	r3, [sp, #20]
 80062a4:	f000 fc88 	bl	8006bb8 <__i2b>
 80062a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062aa:	4607      	mov	r7, r0
 80062ac:	f1b8 0f00 	cmp.w	r8, #0
 80062b0:	d00d      	beq.n	80062ce <_dtoa_r+0x66e>
 80062b2:	9a05      	ldr	r2, [sp, #20]
 80062b4:	2a00      	cmp	r2, #0
 80062b6:	dd0a      	ble.n	80062ce <_dtoa_r+0x66e>
 80062b8:	4542      	cmp	r2, r8
 80062ba:	9904      	ldr	r1, [sp, #16]
 80062bc:	bfa8      	it	ge
 80062be:	4642      	movge	r2, r8
 80062c0:	1a89      	subs	r1, r1, r2
 80062c2:	9104      	str	r1, [sp, #16]
 80062c4:	9905      	ldr	r1, [sp, #20]
 80062c6:	eba8 0802 	sub.w	r8, r8, r2
 80062ca:	1a8a      	subs	r2, r1, r2
 80062cc:	9205      	str	r2, [sp, #20]
 80062ce:	b303      	cbz	r3, 8006312 <_dtoa_r+0x6b2>
 80062d0:	9a07      	ldr	r2, [sp, #28]
 80062d2:	2a00      	cmp	r2, #0
 80062d4:	f000 80a5 	beq.w	8006422 <_dtoa_r+0x7c2>
 80062d8:	2c00      	cmp	r4, #0
 80062da:	dd13      	ble.n	8006304 <_dtoa_r+0x6a4>
 80062dc:	4639      	mov	r1, r7
 80062de:	4622      	mov	r2, r4
 80062e0:	4630      	mov	r0, r6
 80062e2:	930d      	str	r3, [sp, #52]	; 0x34
 80062e4:	f000 fd28 	bl	8006d38 <__pow5mult>
 80062e8:	462a      	mov	r2, r5
 80062ea:	4601      	mov	r1, r0
 80062ec:	4607      	mov	r7, r0
 80062ee:	4630      	mov	r0, r6
 80062f0:	f000 fc78 	bl	8006be4 <__multiply>
 80062f4:	4629      	mov	r1, r5
 80062f6:	9009      	str	r0, [sp, #36]	; 0x24
 80062f8:	4630      	mov	r0, r6
 80062fa:	f000 fb5d 	bl	80069b8 <_Bfree>
 80062fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006300:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006302:	4615      	mov	r5, r2
 8006304:	1b1a      	subs	r2, r3, r4
 8006306:	d004      	beq.n	8006312 <_dtoa_r+0x6b2>
 8006308:	4629      	mov	r1, r5
 800630a:	4630      	mov	r0, r6
 800630c:	f000 fd14 	bl	8006d38 <__pow5mult>
 8006310:	4605      	mov	r5, r0
 8006312:	2101      	movs	r1, #1
 8006314:	4630      	mov	r0, r6
 8006316:	f000 fc4f 	bl	8006bb8 <__i2b>
 800631a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800631c:	2b00      	cmp	r3, #0
 800631e:	4604      	mov	r4, r0
 8006320:	f340 8081 	ble.w	8006426 <_dtoa_r+0x7c6>
 8006324:	461a      	mov	r2, r3
 8006326:	4601      	mov	r1, r0
 8006328:	4630      	mov	r0, r6
 800632a:	f000 fd05 	bl	8006d38 <__pow5mult>
 800632e:	9b06      	ldr	r3, [sp, #24]
 8006330:	2b01      	cmp	r3, #1
 8006332:	4604      	mov	r4, r0
 8006334:	dd7a      	ble.n	800642c <_dtoa_r+0x7cc>
 8006336:	2300      	movs	r3, #0
 8006338:	9309      	str	r3, [sp, #36]	; 0x24
 800633a:	6922      	ldr	r2, [r4, #16]
 800633c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006340:	6910      	ldr	r0, [r2, #16]
 8006342:	f000 fbeb 	bl	8006b1c <__hi0bits>
 8006346:	f1c0 0020 	rsb	r0, r0, #32
 800634a:	9b05      	ldr	r3, [sp, #20]
 800634c:	4418      	add	r0, r3
 800634e:	f010 001f 	ands.w	r0, r0, #31
 8006352:	f000 8093 	beq.w	800647c <_dtoa_r+0x81c>
 8006356:	f1c0 0220 	rsb	r2, r0, #32
 800635a:	2a04      	cmp	r2, #4
 800635c:	f340 8085 	ble.w	800646a <_dtoa_r+0x80a>
 8006360:	9b04      	ldr	r3, [sp, #16]
 8006362:	f1c0 001c 	rsb	r0, r0, #28
 8006366:	4403      	add	r3, r0
 8006368:	9304      	str	r3, [sp, #16]
 800636a:	9b05      	ldr	r3, [sp, #20]
 800636c:	4480      	add	r8, r0
 800636e:	4403      	add	r3, r0
 8006370:	9305      	str	r3, [sp, #20]
 8006372:	9b04      	ldr	r3, [sp, #16]
 8006374:	2b00      	cmp	r3, #0
 8006376:	dd05      	ble.n	8006384 <_dtoa_r+0x724>
 8006378:	4629      	mov	r1, r5
 800637a:	461a      	mov	r2, r3
 800637c:	4630      	mov	r0, r6
 800637e:	f000 fd35 	bl	8006dec <__lshift>
 8006382:	4605      	mov	r5, r0
 8006384:	9b05      	ldr	r3, [sp, #20]
 8006386:	2b00      	cmp	r3, #0
 8006388:	dd05      	ble.n	8006396 <_dtoa_r+0x736>
 800638a:	4621      	mov	r1, r4
 800638c:	461a      	mov	r2, r3
 800638e:	4630      	mov	r0, r6
 8006390:	f000 fd2c 	bl	8006dec <__lshift>
 8006394:	4604      	mov	r4, r0
 8006396:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006398:	2b00      	cmp	r3, #0
 800639a:	d071      	beq.n	8006480 <_dtoa_r+0x820>
 800639c:	4621      	mov	r1, r4
 800639e:	4628      	mov	r0, r5
 80063a0:	f000 fd90 	bl	8006ec4 <__mcmp>
 80063a4:	2800      	cmp	r0, #0
 80063a6:	da6b      	bge.n	8006480 <_dtoa_r+0x820>
 80063a8:	2300      	movs	r3, #0
 80063aa:	4629      	mov	r1, r5
 80063ac:	220a      	movs	r2, #10
 80063ae:	4630      	mov	r0, r6
 80063b0:	f000 fb24 	bl	80069fc <__multadd>
 80063b4:	9b07      	ldr	r3, [sp, #28]
 80063b6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80063ba:	4605      	mov	r5, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f000 8197 	beq.w	80066f0 <_dtoa_r+0xa90>
 80063c2:	4639      	mov	r1, r7
 80063c4:	2300      	movs	r3, #0
 80063c6:	220a      	movs	r2, #10
 80063c8:	4630      	mov	r0, r6
 80063ca:	f000 fb17 	bl	80069fc <__multadd>
 80063ce:	f1ba 0f00 	cmp.w	sl, #0
 80063d2:	4607      	mov	r7, r0
 80063d4:	f300 8093 	bgt.w	80064fe <_dtoa_r+0x89e>
 80063d8:	9b06      	ldr	r3, [sp, #24]
 80063da:	2b02      	cmp	r3, #2
 80063dc:	dc57      	bgt.n	800648e <_dtoa_r+0x82e>
 80063de:	e08e      	b.n	80064fe <_dtoa_r+0x89e>
 80063e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063e2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80063e6:	e751      	b.n	800628c <_dtoa_r+0x62c>
 80063e8:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 80063ec:	42a3      	cmp	r3, r4
 80063ee:	bfbf      	itttt	lt
 80063f0:	1ae2      	sublt	r2, r4, r3
 80063f2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80063f4:	189b      	addlt	r3, r3, r2
 80063f6:	930a      	strlt	r3, [sp, #40]	; 0x28
 80063f8:	bfae      	itee	ge
 80063fa:	1b1c      	subge	r4, r3, r4
 80063fc:	4623      	movlt	r3, r4
 80063fe:	2400      	movlt	r4, #0
 8006400:	f1b9 0f00 	cmp.w	r9, #0
 8006404:	bfb5      	itete	lt
 8006406:	9a04      	ldrlt	r2, [sp, #16]
 8006408:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800640c:	eba2 0809 	sublt.w	r8, r2, r9
 8006410:	464a      	movge	r2, r9
 8006412:	bfb8      	it	lt
 8006414:	2200      	movlt	r2, #0
 8006416:	e73c      	b.n	8006292 <_dtoa_r+0x632>
 8006418:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800641c:	9f07      	ldr	r7, [sp, #28]
 800641e:	461c      	mov	r4, r3
 8006420:	e744      	b.n	80062ac <_dtoa_r+0x64c>
 8006422:	461a      	mov	r2, r3
 8006424:	e770      	b.n	8006308 <_dtoa_r+0x6a8>
 8006426:	9b06      	ldr	r3, [sp, #24]
 8006428:	2b01      	cmp	r3, #1
 800642a:	dc18      	bgt.n	800645e <_dtoa_r+0x7fe>
 800642c:	9b02      	ldr	r3, [sp, #8]
 800642e:	b9b3      	cbnz	r3, 800645e <_dtoa_r+0x7fe>
 8006430:	9b03      	ldr	r3, [sp, #12]
 8006432:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8006436:	b9a2      	cbnz	r2, 8006462 <_dtoa_r+0x802>
 8006438:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800643c:	0d12      	lsrs	r2, r2, #20
 800643e:	0512      	lsls	r2, r2, #20
 8006440:	b18a      	cbz	r2, 8006466 <_dtoa_r+0x806>
 8006442:	9b04      	ldr	r3, [sp, #16]
 8006444:	3301      	adds	r3, #1
 8006446:	9304      	str	r3, [sp, #16]
 8006448:	9b05      	ldr	r3, [sp, #20]
 800644a:	3301      	adds	r3, #1
 800644c:	9305      	str	r3, [sp, #20]
 800644e:	2301      	movs	r3, #1
 8006450:	9309      	str	r3, [sp, #36]	; 0x24
 8006452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006454:	2b00      	cmp	r3, #0
 8006456:	f47f af70 	bne.w	800633a <_dtoa_r+0x6da>
 800645a:	2001      	movs	r0, #1
 800645c:	e775      	b.n	800634a <_dtoa_r+0x6ea>
 800645e:	2300      	movs	r3, #0
 8006460:	e7f6      	b.n	8006450 <_dtoa_r+0x7f0>
 8006462:	9b02      	ldr	r3, [sp, #8]
 8006464:	e7f4      	b.n	8006450 <_dtoa_r+0x7f0>
 8006466:	9209      	str	r2, [sp, #36]	; 0x24
 8006468:	e7f3      	b.n	8006452 <_dtoa_r+0x7f2>
 800646a:	d082      	beq.n	8006372 <_dtoa_r+0x712>
 800646c:	9b04      	ldr	r3, [sp, #16]
 800646e:	321c      	adds	r2, #28
 8006470:	4413      	add	r3, r2
 8006472:	9304      	str	r3, [sp, #16]
 8006474:	9b05      	ldr	r3, [sp, #20]
 8006476:	4490      	add	r8, r2
 8006478:	4413      	add	r3, r2
 800647a:	e779      	b.n	8006370 <_dtoa_r+0x710>
 800647c:	4602      	mov	r2, r0
 800647e:	e7f5      	b.n	800646c <_dtoa_r+0x80c>
 8006480:	f1b9 0f00 	cmp.w	r9, #0
 8006484:	dc36      	bgt.n	80064f4 <_dtoa_r+0x894>
 8006486:	9b06      	ldr	r3, [sp, #24]
 8006488:	2b02      	cmp	r3, #2
 800648a:	dd33      	ble.n	80064f4 <_dtoa_r+0x894>
 800648c:	46ca      	mov	sl, r9
 800648e:	f1ba 0f00 	cmp.w	sl, #0
 8006492:	d10d      	bne.n	80064b0 <_dtoa_r+0x850>
 8006494:	4621      	mov	r1, r4
 8006496:	4653      	mov	r3, sl
 8006498:	2205      	movs	r2, #5
 800649a:	4630      	mov	r0, r6
 800649c:	f000 faae 	bl	80069fc <__multadd>
 80064a0:	4601      	mov	r1, r0
 80064a2:	4604      	mov	r4, r0
 80064a4:	4628      	mov	r0, r5
 80064a6:	f000 fd0d 	bl	8006ec4 <__mcmp>
 80064aa:	2800      	cmp	r0, #0
 80064ac:	f73f ade4 	bgt.w	8006078 <_dtoa_r+0x418>
 80064b0:	9b08      	ldr	r3, [sp, #32]
 80064b2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80064b6:	ea6f 0b03 	mvn.w	fp, r3
 80064ba:	f04f 0900 	mov.w	r9, #0
 80064be:	4621      	mov	r1, r4
 80064c0:	4630      	mov	r0, r6
 80064c2:	f000 fa79 	bl	80069b8 <_Bfree>
 80064c6:	2f00      	cmp	r7, #0
 80064c8:	f43f aea1 	beq.w	800620e <_dtoa_r+0x5ae>
 80064cc:	f1b9 0f00 	cmp.w	r9, #0
 80064d0:	d005      	beq.n	80064de <_dtoa_r+0x87e>
 80064d2:	45b9      	cmp	r9, r7
 80064d4:	d003      	beq.n	80064de <_dtoa_r+0x87e>
 80064d6:	4649      	mov	r1, r9
 80064d8:	4630      	mov	r0, r6
 80064da:	f000 fa6d 	bl	80069b8 <_Bfree>
 80064de:	4639      	mov	r1, r7
 80064e0:	4630      	mov	r0, r6
 80064e2:	f000 fa69 	bl	80069b8 <_Bfree>
 80064e6:	e692      	b.n	800620e <_dtoa_r+0x5ae>
 80064e8:	2400      	movs	r4, #0
 80064ea:	4627      	mov	r7, r4
 80064ec:	e7e0      	b.n	80064b0 <_dtoa_r+0x850>
 80064ee:	4693      	mov	fp, r2
 80064f0:	4627      	mov	r7, r4
 80064f2:	e5c1      	b.n	8006078 <_dtoa_r+0x418>
 80064f4:	9b07      	ldr	r3, [sp, #28]
 80064f6:	46ca      	mov	sl, r9
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f000 8100 	beq.w	80066fe <_dtoa_r+0xa9e>
 80064fe:	f1b8 0f00 	cmp.w	r8, #0
 8006502:	dd05      	ble.n	8006510 <_dtoa_r+0x8b0>
 8006504:	4639      	mov	r1, r7
 8006506:	4642      	mov	r2, r8
 8006508:	4630      	mov	r0, r6
 800650a:	f000 fc6f 	bl	8006dec <__lshift>
 800650e:	4607      	mov	r7, r0
 8006510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006512:	2b00      	cmp	r3, #0
 8006514:	d05d      	beq.n	80065d2 <_dtoa_r+0x972>
 8006516:	6879      	ldr	r1, [r7, #4]
 8006518:	4630      	mov	r0, r6
 800651a:	f000 fa0d 	bl	8006938 <_Balloc>
 800651e:	4680      	mov	r8, r0
 8006520:	b928      	cbnz	r0, 800652e <_dtoa_r+0x8ce>
 8006522:	4b82      	ldr	r3, [pc, #520]	; (800672c <_dtoa_r+0xacc>)
 8006524:	4602      	mov	r2, r0
 8006526:	f240 21ef 	movw	r1, #751	; 0x2ef
 800652a:	f7ff bbb1 	b.w	8005c90 <_dtoa_r+0x30>
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	3202      	adds	r2, #2
 8006532:	0092      	lsls	r2, r2, #2
 8006534:	f107 010c 	add.w	r1, r7, #12
 8006538:	300c      	adds	r0, #12
 800653a:	f001 ff3f 	bl	80083bc <memcpy>
 800653e:	2201      	movs	r2, #1
 8006540:	4641      	mov	r1, r8
 8006542:	4630      	mov	r0, r6
 8006544:	f000 fc52 	bl	8006dec <__lshift>
 8006548:	9b01      	ldr	r3, [sp, #4]
 800654a:	3301      	adds	r3, #1
 800654c:	9304      	str	r3, [sp, #16]
 800654e:	9b01      	ldr	r3, [sp, #4]
 8006550:	4453      	add	r3, sl
 8006552:	9308      	str	r3, [sp, #32]
 8006554:	9b02      	ldr	r3, [sp, #8]
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	46b9      	mov	r9, r7
 800655c:	9307      	str	r3, [sp, #28]
 800655e:	4607      	mov	r7, r0
 8006560:	9b04      	ldr	r3, [sp, #16]
 8006562:	4621      	mov	r1, r4
 8006564:	3b01      	subs	r3, #1
 8006566:	4628      	mov	r0, r5
 8006568:	9302      	str	r3, [sp, #8]
 800656a:	f7ff faef 	bl	8005b4c <quorem>
 800656e:	4603      	mov	r3, r0
 8006570:	3330      	adds	r3, #48	; 0x30
 8006572:	9005      	str	r0, [sp, #20]
 8006574:	4649      	mov	r1, r9
 8006576:	4628      	mov	r0, r5
 8006578:	9309      	str	r3, [sp, #36]	; 0x24
 800657a:	f000 fca3 	bl	8006ec4 <__mcmp>
 800657e:	463a      	mov	r2, r7
 8006580:	4682      	mov	sl, r0
 8006582:	4621      	mov	r1, r4
 8006584:	4630      	mov	r0, r6
 8006586:	f000 fcb9 	bl	8006efc <__mdiff>
 800658a:	68c2      	ldr	r2, [r0, #12]
 800658c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800658e:	4680      	mov	r8, r0
 8006590:	bb0a      	cbnz	r2, 80065d6 <_dtoa_r+0x976>
 8006592:	4601      	mov	r1, r0
 8006594:	4628      	mov	r0, r5
 8006596:	f000 fc95 	bl	8006ec4 <__mcmp>
 800659a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800659c:	4602      	mov	r2, r0
 800659e:	4641      	mov	r1, r8
 80065a0:	4630      	mov	r0, r6
 80065a2:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80065a6:	f000 fa07 	bl	80069b8 <_Bfree>
 80065aa:	9b06      	ldr	r3, [sp, #24]
 80065ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065ae:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80065b2:	ea43 0102 	orr.w	r1, r3, r2
 80065b6:	9b07      	ldr	r3, [sp, #28]
 80065b8:	4319      	orrs	r1, r3
 80065ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065bc:	d10d      	bne.n	80065da <_dtoa_r+0x97a>
 80065be:	2b39      	cmp	r3, #57	; 0x39
 80065c0:	d029      	beq.n	8006616 <_dtoa_r+0x9b6>
 80065c2:	f1ba 0f00 	cmp.w	sl, #0
 80065c6:	dd01      	ble.n	80065cc <_dtoa_r+0x96c>
 80065c8:	9b05      	ldr	r3, [sp, #20]
 80065ca:	3331      	adds	r3, #49	; 0x31
 80065cc:	9a02      	ldr	r2, [sp, #8]
 80065ce:	7013      	strb	r3, [r2, #0]
 80065d0:	e775      	b.n	80064be <_dtoa_r+0x85e>
 80065d2:	4638      	mov	r0, r7
 80065d4:	e7b8      	b.n	8006548 <_dtoa_r+0x8e8>
 80065d6:	2201      	movs	r2, #1
 80065d8:	e7e1      	b.n	800659e <_dtoa_r+0x93e>
 80065da:	f1ba 0f00 	cmp.w	sl, #0
 80065de:	db06      	blt.n	80065ee <_dtoa_r+0x98e>
 80065e0:	9906      	ldr	r1, [sp, #24]
 80065e2:	ea41 0a0a 	orr.w	sl, r1, sl
 80065e6:	9907      	ldr	r1, [sp, #28]
 80065e8:	ea5a 0a01 	orrs.w	sl, sl, r1
 80065ec:	d120      	bne.n	8006630 <_dtoa_r+0x9d0>
 80065ee:	2a00      	cmp	r2, #0
 80065f0:	ddec      	ble.n	80065cc <_dtoa_r+0x96c>
 80065f2:	4629      	mov	r1, r5
 80065f4:	2201      	movs	r2, #1
 80065f6:	4630      	mov	r0, r6
 80065f8:	9304      	str	r3, [sp, #16]
 80065fa:	f000 fbf7 	bl	8006dec <__lshift>
 80065fe:	4621      	mov	r1, r4
 8006600:	4605      	mov	r5, r0
 8006602:	f000 fc5f 	bl	8006ec4 <__mcmp>
 8006606:	2800      	cmp	r0, #0
 8006608:	9b04      	ldr	r3, [sp, #16]
 800660a:	dc02      	bgt.n	8006612 <_dtoa_r+0x9b2>
 800660c:	d1de      	bne.n	80065cc <_dtoa_r+0x96c>
 800660e:	07da      	lsls	r2, r3, #31
 8006610:	d5dc      	bpl.n	80065cc <_dtoa_r+0x96c>
 8006612:	2b39      	cmp	r3, #57	; 0x39
 8006614:	d1d8      	bne.n	80065c8 <_dtoa_r+0x968>
 8006616:	9a02      	ldr	r2, [sp, #8]
 8006618:	2339      	movs	r3, #57	; 0x39
 800661a:	7013      	strb	r3, [r2, #0]
 800661c:	4643      	mov	r3, r8
 800661e:	4698      	mov	r8, r3
 8006620:	3b01      	subs	r3, #1
 8006622:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8006626:	2a39      	cmp	r2, #57	; 0x39
 8006628:	d051      	beq.n	80066ce <_dtoa_r+0xa6e>
 800662a:	3201      	adds	r2, #1
 800662c:	701a      	strb	r2, [r3, #0]
 800662e:	e746      	b.n	80064be <_dtoa_r+0x85e>
 8006630:	2a00      	cmp	r2, #0
 8006632:	dd03      	ble.n	800663c <_dtoa_r+0x9dc>
 8006634:	2b39      	cmp	r3, #57	; 0x39
 8006636:	d0ee      	beq.n	8006616 <_dtoa_r+0x9b6>
 8006638:	3301      	adds	r3, #1
 800663a:	e7c7      	b.n	80065cc <_dtoa_r+0x96c>
 800663c:	9a04      	ldr	r2, [sp, #16]
 800663e:	9908      	ldr	r1, [sp, #32]
 8006640:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006644:	428a      	cmp	r2, r1
 8006646:	d02b      	beq.n	80066a0 <_dtoa_r+0xa40>
 8006648:	4629      	mov	r1, r5
 800664a:	2300      	movs	r3, #0
 800664c:	220a      	movs	r2, #10
 800664e:	4630      	mov	r0, r6
 8006650:	f000 f9d4 	bl	80069fc <__multadd>
 8006654:	45b9      	cmp	r9, r7
 8006656:	4605      	mov	r5, r0
 8006658:	f04f 0300 	mov.w	r3, #0
 800665c:	f04f 020a 	mov.w	r2, #10
 8006660:	4649      	mov	r1, r9
 8006662:	4630      	mov	r0, r6
 8006664:	d107      	bne.n	8006676 <_dtoa_r+0xa16>
 8006666:	f000 f9c9 	bl	80069fc <__multadd>
 800666a:	4681      	mov	r9, r0
 800666c:	4607      	mov	r7, r0
 800666e:	9b04      	ldr	r3, [sp, #16]
 8006670:	3301      	adds	r3, #1
 8006672:	9304      	str	r3, [sp, #16]
 8006674:	e774      	b.n	8006560 <_dtoa_r+0x900>
 8006676:	f000 f9c1 	bl	80069fc <__multadd>
 800667a:	4639      	mov	r1, r7
 800667c:	4681      	mov	r9, r0
 800667e:	2300      	movs	r3, #0
 8006680:	220a      	movs	r2, #10
 8006682:	4630      	mov	r0, r6
 8006684:	f000 f9ba 	bl	80069fc <__multadd>
 8006688:	4607      	mov	r7, r0
 800668a:	e7f0      	b.n	800666e <_dtoa_r+0xa0e>
 800668c:	f1ba 0f00 	cmp.w	sl, #0
 8006690:	9a01      	ldr	r2, [sp, #4]
 8006692:	bfcc      	ite	gt
 8006694:	46d0      	movgt	r8, sl
 8006696:	f04f 0801 	movle.w	r8, #1
 800669a:	4490      	add	r8, r2
 800669c:	f04f 0900 	mov.w	r9, #0
 80066a0:	4629      	mov	r1, r5
 80066a2:	2201      	movs	r2, #1
 80066a4:	4630      	mov	r0, r6
 80066a6:	9302      	str	r3, [sp, #8]
 80066a8:	f000 fba0 	bl	8006dec <__lshift>
 80066ac:	4621      	mov	r1, r4
 80066ae:	4605      	mov	r5, r0
 80066b0:	f000 fc08 	bl	8006ec4 <__mcmp>
 80066b4:	2800      	cmp	r0, #0
 80066b6:	dcb1      	bgt.n	800661c <_dtoa_r+0x9bc>
 80066b8:	d102      	bne.n	80066c0 <_dtoa_r+0xa60>
 80066ba:	9b02      	ldr	r3, [sp, #8]
 80066bc:	07db      	lsls	r3, r3, #31
 80066be:	d4ad      	bmi.n	800661c <_dtoa_r+0x9bc>
 80066c0:	4643      	mov	r3, r8
 80066c2:	4698      	mov	r8, r3
 80066c4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066c8:	2a30      	cmp	r2, #48	; 0x30
 80066ca:	d0fa      	beq.n	80066c2 <_dtoa_r+0xa62>
 80066cc:	e6f7      	b.n	80064be <_dtoa_r+0x85e>
 80066ce:	9a01      	ldr	r2, [sp, #4]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d1a4      	bne.n	800661e <_dtoa_r+0x9be>
 80066d4:	f10b 0b01 	add.w	fp, fp, #1
 80066d8:	2331      	movs	r3, #49	; 0x31
 80066da:	e778      	b.n	80065ce <_dtoa_r+0x96e>
 80066dc:	4b14      	ldr	r3, [pc, #80]	; (8006730 <_dtoa_r+0xad0>)
 80066de:	f7ff bb2a 	b.w	8005d36 <_dtoa_r+0xd6>
 80066e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f47f ab05 	bne.w	8005cf4 <_dtoa_r+0x94>
 80066ea:	4b12      	ldr	r3, [pc, #72]	; (8006734 <_dtoa_r+0xad4>)
 80066ec:	f7ff bb23 	b.w	8005d36 <_dtoa_r+0xd6>
 80066f0:	f1ba 0f00 	cmp.w	sl, #0
 80066f4:	dc03      	bgt.n	80066fe <_dtoa_r+0xa9e>
 80066f6:	9b06      	ldr	r3, [sp, #24]
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	f73f aec8 	bgt.w	800648e <_dtoa_r+0x82e>
 80066fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006702:	4621      	mov	r1, r4
 8006704:	4628      	mov	r0, r5
 8006706:	f7ff fa21 	bl	8005b4c <quorem>
 800670a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800670e:	f808 3b01 	strb.w	r3, [r8], #1
 8006712:	9a01      	ldr	r2, [sp, #4]
 8006714:	eba8 0202 	sub.w	r2, r8, r2
 8006718:	4592      	cmp	sl, r2
 800671a:	ddb7      	ble.n	800668c <_dtoa_r+0xa2c>
 800671c:	4629      	mov	r1, r5
 800671e:	2300      	movs	r3, #0
 8006720:	220a      	movs	r2, #10
 8006722:	4630      	mov	r0, r6
 8006724:	f000 f96a 	bl	80069fc <__multadd>
 8006728:	4605      	mov	r5, r0
 800672a:	e7ea      	b.n	8006702 <_dtoa_r+0xaa2>
 800672c:	08009231 	.word	0x08009231
 8006730:	0800918c 	.word	0x0800918c
 8006734:	080091b5 	.word	0x080091b5

08006738 <_free_r>:
 8006738:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800673a:	2900      	cmp	r1, #0
 800673c:	d044      	beq.n	80067c8 <_free_r+0x90>
 800673e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006742:	9001      	str	r0, [sp, #4]
 8006744:	2b00      	cmp	r3, #0
 8006746:	f1a1 0404 	sub.w	r4, r1, #4
 800674a:	bfb8      	it	lt
 800674c:	18e4      	addlt	r4, r4, r3
 800674e:	f000 f8e7 	bl	8006920 <__malloc_lock>
 8006752:	4a1e      	ldr	r2, [pc, #120]	; (80067cc <_free_r+0x94>)
 8006754:	9801      	ldr	r0, [sp, #4]
 8006756:	6813      	ldr	r3, [r2, #0]
 8006758:	b933      	cbnz	r3, 8006768 <_free_r+0x30>
 800675a:	6063      	str	r3, [r4, #4]
 800675c:	6014      	str	r4, [r2, #0]
 800675e:	b003      	add	sp, #12
 8006760:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006764:	f000 b8e2 	b.w	800692c <__malloc_unlock>
 8006768:	42a3      	cmp	r3, r4
 800676a:	d908      	bls.n	800677e <_free_r+0x46>
 800676c:	6825      	ldr	r5, [r4, #0]
 800676e:	1961      	adds	r1, r4, r5
 8006770:	428b      	cmp	r3, r1
 8006772:	bf01      	itttt	eq
 8006774:	6819      	ldreq	r1, [r3, #0]
 8006776:	685b      	ldreq	r3, [r3, #4]
 8006778:	1949      	addeq	r1, r1, r5
 800677a:	6021      	streq	r1, [r4, #0]
 800677c:	e7ed      	b.n	800675a <_free_r+0x22>
 800677e:	461a      	mov	r2, r3
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	b10b      	cbz	r3, 8006788 <_free_r+0x50>
 8006784:	42a3      	cmp	r3, r4
 8006786:	d9fa      	bls.n	800677e <_free_r+0x46>
 8006788:	6811      	ldr	r1, [r2, #0]
 800678a:	1855      	adds	r5, r2, r1
 800678c:	42a5      	cmp	r5, r4
 800678e:	d10b      	bne.n	80067a8 <_free_r+0x70>
 8006790:	6824      	ldr	r4, [r4, #0]
 8006792:	4421      	add	r1, r4
 8006794:	1854      	adds	r4, r2, r1
 8006796:	42a3      	cmp	r3, r4
 8006798:	6011      	str	r1, [r2, #0]
 800679a:	d1e0      	bne.n	800675e <_free_r+0x26>
 800679c:	681c      	ldr	r4, [r3, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	6053      	str	r3, [r2, #4]
 80067a2:	440c      	add	r4, r1
 80067a4:	6014      	str	r4, [r2, #0]
 80067a6:	e7da      	b.n	800675e <_free_r+0x26>
 80067a8:	d902      	bls.n	80067b0 <_free_r+0x78>
 80067aa:	230c      	movs	r3, #12
 80067ac:	6003      	str	r3, [r0, #0]
 80067ae:	e7d6      	b.n	800675e <_free_r+0x26>
 80067b0:	6825      	ldr	r5, [r4, #0]
 80067b2:	1961      	adds	r1, r4, r5
 80067b4:	428b      	cmp	r3, r1
 80067b6:	bf04      	itt	eq
 80067b8:	6819      	ldreq	r1, [r3, #0]
 80067ba:	685b      	ldreq	r3, [r3, #4]
 80067bc:	6063      	str	r3, [r4, #4]
 80067be:	bf04      	itt	eq
 80067c0:	1949      	addeq	r1, r1, r5
 80067c2:	6021      	streq	r1, [r4, #0]
 80067c4:	6054      	str	r4, [r2, #4]
 80067c6:	e7ca      	b.n	800675e <_free_r+0x26>
 80067c8:	b003      	add	sp, #12
 80067ca:	bd30      	pop	{r4, r5, pc}
 80067cc:	20000468 	.word	0x20000468

080067d0 <malloc>:
 80067d0:	4b02      	ldr	r3, [pc, #8]	; (80067dc <malloc+0xc>)
 80067d2:	4601      	mov	r1, r0
 80067d4:	6818      	ldr	r0, [r3, #0]
 80067d6:	f000 b823 	b.w	8006820 <_malloc_r>
 80067da:	bf00      	nop
 80067dc:	20000064 	.word	0x20000064

080067e0 <sbrk_aligned>:
 80067e0:	b570      	push	{r4, r5, r6, lr}
 80067e2:	4e0e      	ldr	r6, [pc, #56]	; (800681c <sbrk_aligned+0x3c>)
 80067e4:	460c      	mov	r4, r1
 80067e6:	6831      	ldr	r1, [r6, #0]
 80067e8:	4605      	mov	r5, r0
 80067ea:	b911      	cbnz	r1, 80067f2 <sbrk_aligned+0x12>
 80067ec:	f001 fdd6 	bl	800839c <_sbrk_r>
 80067f0:	6030      	str	r0, [r6, #0]
 80067f2:	4621      	mov	r1, r4
 80067f4:	4628      	mov	r0, r5
 80067f6:	f001 fdd1 	bl	800839c <_sbrk_r>
 80067fa:	1c43      	adds	r3, r0, #1
 80067fc:	d00a      	beq.n	8006814 <sbrk_aligned+0x34>
 80067fe:	1cc4      	adds	r4, r0, #3
 8006800:	f024 0403 	bic.w	r4, r4, #3
 8006804:	42a0      	cmp	r0, r4
 8006806:	d007      	beq.n	8006818 <sbrk_aligned+0x38>
 8006808:	1a21      	subs	r1, r4, r0
 800680a:	4628      	mov	r0, r5
 800680c:	f001 fdc6 	bl	800839c <_sbrk_r>
 8006810:	3001      	adds	r0, #1
 8006812:	d101      	bne.n	8006818 <sbrk_aligned+0x38>
 8006814:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006818:	4620      	mov	r0, r4
 800681a:	bd70      	pop	{r4, r5, r6, pc}
 800681c:	2000046c 	.word	0x2000046c

08006820 <_malloc_r>:
 8006820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006824:	1ccd      	adds	r5, r1, #3
 8006826:	f025 0503 	bic.w	r5, r5, #3
 800682a:	3508      	adds	r5, #8
 800682c:	2d0c      	cmp	r5, #12
 800682e:	bf38      	it	cc
 8006830:	250c      	movcc	r5, #12
 8006832:	2d00      	cmp	r5, #0
 8006834:	4607      	mov	r7, r0
 8006836:	db01      	blt.n	800683c <_malloc_r+0x1c>
 8006838:	42a9      	cmp	r1, r5
 800683a:	d905      	bls.n	8006848 <_malloc_r+0x28>
 800683c:	230c      	movs	r3, #12
 800683e:	603b      	str	r3, [r7, #0]
 8006840:	2600      	movs	r6, #0
 8006842:	4630      	mov	r0, r6
 8006844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006848:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800691c <_malloc_r+0xfc>
 800684c:	f000 f868 	bl	8006920 <__malloc_lock>
 8006850:	f8d8 3000 	ldr.w	r3, [r8]
 8006854:	461c      	mov	r4, r3
 8006856:	bb5c      	cbnz	r4, 80068b0 <_malloc_r+0x90>
 8006858:	4629      	mov	r1, r5
 800685a:	4638      	mov	r0, r7
 800685c:	f7ff ffc0 	bl	80067e0 <sbrk_aligned>
 8006860:	1c43      	adds	r3, r0, #1
 8006862:	4604      	mov	r4, r0
 8006864:	d155      	bne.n	8006912 <_malloc_r+0xf2>
 8006866:	f8d8 4000 	ldr.w	r4, [r8]
 800686a:	4626      	mov	r6, r4
 800686c:	2e00      	cmp	r6, #0
 800686e:	d145      	bne.n	80068fc <_malloc_r+0xdc>
 8006870:	2c00      	cmp	r4, #0
 8006872:	d048      	beq.n	8006906 <_malloc_r+0xe6>
 8006874:	6823      	ldr	r3, [r4, #0]
 8006876:	4631      	mov	r1, r6
 8006878:	4638      	mov	r0, r7
 800687a:	eb04 0903 	add.w	r9, r4, r3
 800687e:	f001 fd8d 	bl	800839c <_sbrk_r>
 8006882:	4581      	cmp	r9, r0
 8006884:	d13f      	bne.n	8006906 <_malloc_r+0xe6>
 8006886:	6821      	ldr	r1, [r4, #0]
 8006888:	1a6d      	subs	r5, r5, r1
 800688a:	4629      	mov	r1, r5
 800688c:	4638      	mov	r0, r7
 800688e:	f7ff ffa7 	bl	80067e0 <sbrk_aligned>
 8006892:	3001      	adds	r0, #1
 8006894:	d037      	beq.n	8006906 <_malloc_r+0xe6>
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	442b      	add	r3, r5
 800689a:	6023      	str	r3, [r4, #0]
 800689c:	f8d8 3000 	ldr.w	r3, [r8]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d038      	beq.n	8006916 <_malloc_r+0xf6>
 80068a4:	685a      	ldr	r2, [r3, #4]
 80068a6:	42a2      	cmp	r2, r4
 80068a8:	d12b      	bne.n	8006902 <_malloc_r+0xe2>
 80068aa:	2200      	movs	r2, #0
 80068ac:	605a      	str	r2, [r3, #4]
 80068ae:	e00f      	b.n	80068d0 <_malloc_r+0xb0>
 80068b0:	6822      	ldr	r2, [r4, #0]
 80068b2:	1b52      	subs	r2, r2, r5
 80068b4:	d41f      	bmi.n	80068f6 <_malloc_r+0xd6>
 80068b6:	2a0b      	cmp	r2, #11
 80068b8:	d917      	bls.n	80068ea <_malloc_r+0xca>
 80068ba:	1961      	adds	r1, r4, r5
 80068bc:	42a3      	cmp	r3, r4
 80068be:	6025      	str	r5, [r4, #0]
 80068c0:	bf18      	it	ne
 80068c2:	6059      	strne	r1, [r3, #4]
 80068c4:	6863      	ldr	r3, [r4, #4]
 80068c6:	bf08      	it	eq
 80068c8:	f8c8 1000 	streq.w	r1, [r8]
 80068cc:	5162      	str	r2, [r4, r5]
 80068ce:	604b      	str	r3, [r1, #4]
 80068d0:	4638      	mov	r0, r7
 80068d2:	f104 060b 	add.w	r6, r4, #11
 80068d6:	f000 f829 	bl	800692c <__malloc_unlock>
 80068da:	f026 0607 	bic.w	r6, r6, #7
 80068de:	1d23      	adds	r3, r4, #4
 80068e0:	1af2      	subs	r2, r6, r3
 80068e2:	d0ae      	beq.n	8006842 <_malloc_r+0x22>
 80068e4:	1b9b      	subs	r3, r3, r6
 80068e6:	50a3      	str	r3, [r4, r2]
 80068e8:	e7ab      	b.n	8006842 <_malloc_r+0x22>
 80068ea:	42a3      	cmp	r3, r4
 80068ec:	6862      	ldr	r2, [r4, #4]
 80068ee:	d1dd      	bne.n	80068ac <_malloc_r+0x8c>
 80068f0:	f8c8 2000 	str.w	r2, [r8]
 80068f4:	e7ec      	b.n	80068d0 <_malloc_r+0xb0>
 80068f6:	4623      	mov	r3, r4
 80068f8:	6864      	ldr	r4, [r4, #4]
 80068fa:	e7ac      	b.n	8006856 <_malloc_r+0x36>
 80068fc:	4634      	mov	r4, r6
 80068fe:	6876      	ldr	r6, [r6, #4]
 8006900:	e7b4      	b.n	800686c <_malloc_r+0x4c>
 8006902:	4613      	mov	r3, r2
 8006904:	e7cc      	b.n	80068a0 <_malloc_r+0x80>
 8006906:	230c      	movs	r3, #12
 8006908:	603b      	str	r3, [r7, #0]
 800690a:	4638      	mov	r0, r7
 800690c:	f000 f80e 	bl	800692c <__malloc_unlock>
 8006910:	e797      	b.n	8006842 <_malloc_r+0x22>
 8006912:	6025      	str	r5, [r4, #0]
 8006914:	e7dc      	b.n	80068d0 <_malloc_r+0xb0>
 8006916:	605b      	str	r3, [r3, #4]
 8006918:	deff      	udf	#255	; 0xff
 800691a:	bf00      	nop
 800691c:	20000468 	.word	0x20000468

08006920 <__malloc_lock>:
 8006920:	4801      	ldr	r0, [pc, #4]	; (8006928 <__malloc_lock+0x8>)
 8006922:	f7ff b90b 	b.w	8005b3c <__retarget_lock_acquire_recursive>
 8006926:	bf00      	nop
 8006928:	20000464 	.word	0x20000464

0800692c <__malloc_unlock>:
 800692c:	4801      	ldr	r0, [pc, #4]	; (8006934 <__malloc_unlock+0x8>)
 800692e:	f7ff b906 	b.w	8005b3e <__retarget_lock_release_recursive>
 8006932:	bf00      	nop
 8006934:	20000464 	.word	0x20000464

08006938 <_Balloc>:
 8006938:	b570      	push	{r4, r5, r6, lr}
 800693a:	69c6      	ldr	r6, [r0, #28]
 800693c:	4604      	mov	r4, r0
 800693e:	460d      	mov	r5, r1
 8006940:	b976      	cbnz	r6, 8006960 <_Balloc+0x28>
 8006942:	2010      	movs	r0, #16
 8006944:	f7ff ff44 	bl	80067d0 <malloc>
 8006948:	4602      	mov	r2, r0
 800694a:	61e0      	str	r0, [r4, #28]
 800694c:	b920      	cbnz	r0, 8006958 <_Balloc+0x20>
 800694e:	4b18      	ldr	r3, [pc, #96]	; (80069b0 <_Balloc+0x78>)
 8006950:	4818      	ldr	r0, [pc, #96]	; (80069b4 <_Balloc+0x7c>)
 8006952:	216b      	movs	r1, #107	; 0x6b
 8006954:	f001 fd48 	bl	80083e8 <__assert_func>
 8006958:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800695c:	6006      	str	r6, [r0, #0]
 800695e:	60c6      	str	r6, [r0, #12]
 8006960:	69e6      	ldr	r6, [r4, #28]
 8006962:	68f3      	ldr	r3, [r6, #12]
 8006964:	b183      	cbz	r3, 8006988 <_Balloc+0x50>
 8006966:	69e3      	ldr	r3, [r4, #28]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800696e:	b9b8      	cbnz	r0, 80069a0 <_Balloc+0x68>
 8006970:	2101      	movs	r1, #1
 8006972:	fa01 f605 	lsl.w	r6, r1, r5
 8006976:	1d72      	adds	r2, r6, #5
 8006978:	0092      	lsls	r2, r2, #2
 800697a:	4620      	mov	r0, r4
 800697c:	f001 fd52 	bl	8008424 <_calloc_r>
 8006980:	b160      	cbz	r0, 800699c <_Balloc+0x64>
 8006982:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006986:	e00e      	b.n	80069a6 <_Balloc+0x6e>
 8006988:	2221      	movs	r2, #33	; 0x21
 800698a:	2104      	movs	r1, #4
 800698c:	4620      	mov	r0, r4
 800698e:	f001 fd49 	bl	8008424 <_calloc_r>
 8006992:	69e3      	ldr	r3, [r4, #28]
 8006994:	60f0      	str	r0, [r6, #12]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1e4      	bne.n	8006966 <_Balloc+0x2e>
 800699c:	2000      	movs	r0, #0
 800699e:	bd70      	pop	{r4, r5, r6, pc}
 80069a0:	6802      	ldr	r2, [r0, #0]
 80069a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80069a6:	2300      	movs	r3, #0
 80069a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80069ac:	e7f7      	b.n	800699e <_Balloc+0x66>
 80069ae:	bf00      	nop
 80069b0:	080091c2 	.word	0x080091c2
 80069b4:	08009242 	.word	0x08009242

080069b8 <_Bfree>:
 80069b8:	b570      	push	{r4, r5, r6, lr}
 80069ba:	69c6      	ldr	r6, [r0, #28]
 80069bc:	4605      	mov	r5, r0
 80069be:	460c      	mov	r4, r1
 80069c0:	b976      	cbnz	r6, 80069e0 <_Bfree+0x28>
 80069c2:	2010      	movs	r0, #16
 80069c4:	f7ff ff04 	bl	80067d0 <malloc>
 80069c8:	4602      	mov	r2, r0
 80069ca:	61e8      	str	r0, [r5, #28]
 80069cc:	b920      	cbnz	r0, 80069d8 <_Bfree+0x20>
 80069ce:	4b09      	ldr	r3, [pc, #36]	; (80069f4 <_Bfree+0x3c>)
 80069d0:	4809      	ldr	r0, [pc, #36]	; (80069f8 <_Bfree+0x40>)
 80069d2:	218f      	movs	r1, #143	; 0x8f
 80069d4:	f001 fd08 	bl	80083e8 <__assert_func>
 80069d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069dc:	6006      	str	r6, [r0, #0]
 80069de:	60c6      	str	r6, [r0, #12]
 80069e0:	b13c      	cbz	r4, 80069f2 <_Bfree+0x3a>
 80069e2:	69eb      	ldr	r3, [r5, #28]
 80069e4:	6862      	ldr	r2, [r4, #4]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80069ec:	6021      	str	r1, [r4, #0]
 80069ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80069f2:	bd70      	pop	{r4, r5, r6, pc}
 80069f4:	080091c2 	.word	0x080091c2
 80069f8:	08009242 	.word	0x08009242

080069fc <__multadd>:
 80069fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a00:	690d      	ldr	r5, [r1, #16]
 8006a02:	4607      	mov	r7, r0
 8006a04:	460c      	mov	r4, r1
 8006a06:	461e      	mov	r6, r3
 8006a08:	f101 0c14 	add.w	ip, r1, #20
 8006a0c:	2000      	movs	r0, #0
 8006a0e:	f8dc 3000 	ldr.w	r3, [ip]
 8006a12:	b299      	uxth	r1, r3
 8006a14:	fb02 6101 	mla	r1, r2, r1, r6
 8006a18:	0c1e      	lsrs	r6, r3, #16
 8006a1a:	0c0b      	lsrs	r3, r1, #16
 8006a1c:	fb02 3306 	mla	r3, r2, r6, r3
 8006a20:	b289      	uxth	r1, r1
 8006a22:	3001      	adds	r0, #1
 8006a24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006a28:	4285      	cmp	r5, r0
 8006a2a:	f84c 1b04 	str.w	r1, [ip], #4
 8006a2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006a32:	dcec      	bgt.n	8006a0e <__multadd+0x12>
 8006a34:	b30e      	cbz	r6, 8006a7a <__multadd+0x7e>
 8006a36:	68a3      	ldr	r3, [r4, #8]
 8006a38:	42ab      	cmp	r3, r5
 8006a3a:	dc19      	bgt.n	8006a70 <__multadd+0x74>
 8006a3c:	6861      	ldr	r1, [r4, #4]
 8006a3e:	4638      	mov	r0, r7
 8006a40:	3101      	adds	r1, #1
 8006a42:	f7ff ff79 	bl	8006938 <_Balloc>
 8006a46:	4680      	mov	r8, r0
 8006a48:	b928      	cbnz	r0, 8006a56 <__multadd+0x5a>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	4b0c      	ldr	r3, [pc, #48]	; (8006a80 <__multadd+0x84>)
 8006a4e:	480d      	ldr	r0, [pc, #52]	; (8006a84 <__multadd+0x88>)
 8006a50:	21ba      	movs	r1, #186	; 0xba
 8006a52:	f001 fcc9 	bl	80083e8 <__assert_func>
 8006a56:	6922      	ldr	r2, [r4, #16]
 8006a58:	3202      	adds	r2, #2
 8006a5a:	f104 010c 	add.w	r1, r4, #12
 8006a5e:	0092      	lsls	r2, r2, #2
 8006a60:	300c      	adds	r0, #12
 8006a62:	f001 fcab 	bl	80083bc <memcpy>
 8006a66:	4621      	mov	r1, r4
 8006a68:	4638      	mov	r0, r7
 8006a6a:	f7ff ffa5 	bl	80069b8 <_Bfree>
 8006a6e:	4644      	mov	r4, r8
 8006a70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a74:	3501      	adds	r5, #1
 8006a76:	615e      	str	r6, [r3, #20]
 8006a78:	6125      	str	r5, [r4, #16]
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a80:	08009231 	.word	0x08009231
 8006a84:	08009242 	.word	0x08009242

08006a88 <__s2b>:
 8006a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a8c:	460c      	mov	r4, r1
 8006a8e:	4615      	mov	r5, r2
 8006a90:	461f      	mov	r7, r3
 8006a92:	2209      	movs	r2, #9
 8006a94:	3308      	adds	r3, #8
 8006a96:	4606      	mov	r6, r0
 8006a98:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	db09      	blt.n	8006ab8 <__s2b+0x30>
 8006aa4:	4630      	mov	r0, r6
 8006aa6:	f7ff ff47 	bl	8006938 <_Balloc>
 8006aaa:	b940      	cbnz	r0, 8006abe <__s2b+0x36>
 8006aac:	4602      	mov	r2, r0
 8006aae:	4b19      	ldr	r3, [pc, #100]	; (8006b14 <__s2b+0x8c>)
 8006ab0:	4819      	ldr	r0, [pc, #100]	; (8006b18 <__s2b+0x90>)
 8006ab2:	21d3      	movs	r1, #211	; 0xd3
 8006ab4:	f001 fc98 	bl	80083e8 <__assert_func>
 8006ab8:	0052      	lsls	r2, r2, #1
 8006aba:	3101      	adds	r1, #1
 8006abc:	e7f0      	b.n	8006aa0 <__s2b+0x18>
 8006abe:	9b08      	ldr	r3, [sp, #32]
 8006ac0:	6143      	str	r3, [r0, #20]
 8006ac2:	2d09      	cmp	r5, #9
 8006ac4:	f04f 0301 	mov.w	r3, #1
 8006ac8:	6103      	str	r3, [r0, #16]
 8006aca:	dd16      	ble.n	8006afa <__s2b+0x72>
 8006acc:	f104 0909 	add.w	r9, r4, #9
 8006ad0:	46c8      	mov	r8, r9
 8006ad2:	442c      	add	r4, r5
 8006ad4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006ad8:	4601      	mov	r1, r0
 8006ada:	3b30      	subs	r3, #48	; 0x30
 8006adc:	220a      	movs	r2, #10
 8006ade:	4630      	mov	r0, r6
 8006ae0:	f7ff ff8c 	bl	80069fc <__multadd>
 8006ae4:	45a0      	cmp	r8, r4
 8006ae6:	d1f5      	bne.n	8006ad4 <__s2b+0x4c>
 8006ae8:	f1a5 0408 	sub.w	r4, r5, #8
 8006aec:	444c      	add	r4, r9
 8006aee:	1b2d      	subs	r5, r5, r4
 8006af0:	1963      	adds	r3, r4, r5
 8006af2:	42bb      	cmp	r3, r7
 8006af4:	db04      	blt.n	8006b00 <__s2b+0x78>
 8006af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006afa:	340a      	adds	r4, #10
 8006afc:	2509      	movs	r5, #9
 8006afe:	e7f6      	b.n	8006aee <__s2b+0x66>
 8006b00:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006b04:	4601      	mov	r1, r0
 8006b06:	3b30      	subs	r3, #48	; 0x30
 8006b08:	220a      	movs	r2, #10
 8006b0a:	4630      	mov	r0, r6
 8006b0c:	f7ff ff76 	bl	80069fc <__multadd>
 8006b10:	e7ee      	b.n	8006af0 <__s2b+0x68>
 8006b12:	bf00      	nop
 8006b14:	08009231 	.word	0x08009231
 8006b18:	08009242 	.word	0x08009242

08006b1c <__hi0bits>:
 8006b1c:	0c03      	lsrs	r3, r0, #16
 8006b1e:	041b      	lsls	r3, r3, #16
 8006b20:	b9d3      	cbnz	r3, 8006b58 <__hi0bits+0x3c>
 8006b22:	0400      	lsls	r0, r0, #16
 8006b24:	2310      	movs	r3, #16
 8006b26:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006b2a:	bf04      	itt	eq
 8006b2c:	0200      	lsleq	r0, r0, #8
 8006b2e:	3308      	addeq	r3, #8
 8006b30:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006b34:	bf04      	itt	eq
 8006b36:	0100      	lsleq	r0, r0, #4
 8006b38:	3304      	addeq	r3, #4
 8006b3a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006b3e:	bf04      	itt	eq
 8006b40:	0080      	lsleq	r0, r0, #2
 8006b42:	3302      	addeq	r3, #2
 8006b44:	2800      	cmp	r0, #0
 8006b46:	db05      	blt.n	8006b54 <__hi0bits+0x38>
 8006b48:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006b4c:	f103 0301 	add.w	r3, r3, #1
 8006b50:	bf08      	it	eq
 8006b52:	2320      	moveq	r3, #32
 8006b54:	4618      	mov	r0, r3
 8006b56:	4770      	bx	lr
 8006b58:	2300      	movs	r3, #0
 8006b5a:	e7e4      	b.n	8006b26 <__hi0bits+0xa>

08006b5c <__lo0bits>:
 8006b5c:	6803      	ldr	r3, [r0, #0]
 8006b5e:	f013 0207 	ands.w	r2, r3, #7
 8006b62:	d00c      	beq.n	8006b7e <__lo0bits+0x22>
 8006b64:	07d9      	lsls	r1, r3, #31
 8006b66:	d422      	bmi.n	8006bae <__lo0bits+0x52>
 8006b68:	079a      	lsls	r2, r3, #30
 8006b6a:	bf49      	itett	mi
 8006b6c:	085b      	lsrmi	r3, r3, #1
 8006b6e:	089b      	lsrpl	r3, r3, #2
 8006b70:	6003      	strmi	r3, [r0, #0]
 8006b72:	2201      	movmi	r2, #1
 8006b74:	bf5c      	itt	pl
 8006b76:	6003      	strpl	r3, [r0, #0]
 8006b78:	2202      	movpl	r2, #2
 8006b7a:	4610      	mov	r0, r2
 8006b7c:	4770      	bx	lr
 8006b7e:	b299      	uxth	r1, r3
 8006b80:	b909      	cbnz	r1, 8006b86 <__lo0bits+0x2a>
 8006b82:	0c1b      	lsrs	r3, r3, #16
 8006b84:	2210      	movs	r2, #16
 8006b86:	b2d9      	uxtb	r1, r3
 8006b88:	b909      	cbnz	r1, 8006b8e <__lo0bits+0x32>
 8006b8a:	3208      	adds	r2, #8
 8006b8c:	0a1b      	lsrs	r3, r3, #8
 8006b8e:	0719      	lsls	r1, r3, #28
 8006b90:	bf04      	itt	eq
 8006b92:	091b      	lsreq	r3, r3, #4
 8006b94:	3204      	addeq	r2, #4
 8006b96:	0799      	lsls	r1, r3, #30
 8006b98:	bf04      	itt	eq
 8006b9a:	089b      	lsreq	r3, r3, #2
 8006b9c:	3202      	addeq	r2, #2
 8006b9e:	07d9      	lsls	r1, r3, #31
 8006ba0:	d403      	bmi.n	8006baa <__lo0bits+0x4e>
 8006ba2:	085b      	lsrs	r3, r3, #1
 8006ba4:	f102 0201 	add.w	r2, r2, #1
 8006ba8:	d003      	beq.n	8006bb2 <__lo0bits+0x56>
 8006baa:	6003      	str	r3, [r0, #0]
 8006bac:	e7e5      	b.n	8006b7a <__lo0bits+0x1e>
 8006bae:	2200      	movs	r2, #0
 8006bb0:	e7e3      	b.n	8006b7a <__lo0bits+0x1e>
 8006bb2:	2220      	movs	r2, #32
 8006bb4:	e7e1      	b.n	8006b7a <__lo0bits+0x1e>
	...

08006bb8 <__i2b>:
 8006bb8:	b510      	push	{r4, lr}
 8006bba:	460c      	mov	r4, r1
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	f7ff febb 	bl	8006938 <_Balloc>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	b928      	cbnz	r0, 8006bd2 <__i2b+0x1a>
 8006bc6:	4b05      	ldr	r3, [pc, #20]	; (8006bdc <__i2b+0x24>)
 8006bc8:	4805      	ldr	r0, [pc, #20]	; (8006be0 <__i2b+0x28>)
 8006bca:	f240 1145 	movw	r1, #325	; 0x145
 8006bce:	f001 fc0b 	bl	80083e8 <__assert_func>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	6144      	str	r4, [r0, #20]
 8006bd6:	6103      	str	r3, [r0, #16]
 8006bd8:	bd10      	pop	{r4, pc}
 8006bda:	bf00      	nop
 8006bdc:	08009231 	.word	0x08009231
 8006be0:	08009242 	.word	0x08009242

08006be4 <__multiply>:
 8006be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be8:	4691      	mov	r9, r2
 8006bea:	690a      	ldr	r2, [r1, #16]
 8006bec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	bfb8      	it	lt
 8006bf4:	460b      	movlt	r3, r1
 8006bf6:	460c      	mov	r4, r1
 8006bf8:	bfbc      	itt	lt
 8006bfa:	464c      	movlt	r4, r9
 8006bfc:	4699      	movlt	r9, r3
 8006bfe:	6927      	ldr	r7, [r4, #16]
 8006c00:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006c04:	68a3      	ldr	r3, [r4, #8]
 8006c06:	6861      	ldr	r1, [r4, #4]
 8006c08:	eb07 060a 	add.w	r6, r7, sl
 8006c0c:	42b3      	cmp	r3, r6
 8006c0e:	b085      	sub	sp, #20
 8006c10:	bfb8      	it	lt
 8006c12:	3101      	addlt	r1, #1
 8006c14:	f7ff fe90 	bl	8006938 <_Balloc>
 8006c18:	b930      	cbnz	r0, 8006c28 <__multiply+0x44>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	4b44      	ldr	r3, [pc, #272]	; (8006d30 <__multiply+0x14c>)
 8006c1e:	4845      	ldr	r0, [pc, #276]	; (8006d34 <__multiply+0x150>)
 8006c20:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006c24:	f001 fbe0 	bl	80083e8 <__assert_func>
 8006c28:	f100 0514 	add.w	r5, r0, #20
 8006c2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c30:	462b      	mov	r3, r5
 8006c32:	2200      	movs	r2, #0
 8006c34:	4543      	cmp	r3, r8
 8006c36:	d321      	bcc.n	8006c7c <__multiply+0x98>
 8006c38:	f104 0314 	add.w	r3, r4, #20
 8006c3c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006c40:	f109 0314 	add.w	r3, r9, #20
 8006c44:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006c48:	9202      	str	r2, [sp, #8]
 8006c4a:	1b3a      	subs	r2, r7, r4
 8006c4c:	3a15      	subs	r2, #21
 8006c4e:	f022 0203 	bic.w	r2, r2, #3
 8006c52:	3204      	adds	r2, #4
 8006c54:	f104 0115 	add.w	r1, r4, #21
 8006c58:	428f      	cmp	r7, r1
 8006c5a:	bf38      	it	cc
 8006c5c:	2204      	movcc	r2, #4
 8006c5e:	9201      	str	r2, [sp, #4]
 8006c60:	9a02      	ldr	r2, [sp, #8]
 8006c62:	9303      	str	r3, [sp, #12]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d80c      	bhi.n	8006c82 <__multiply+0x9e>
 8006c68:	2e00      	cmp	r6, #0
 8006c6a:	dd03      	ble.n	8006c74 <__multiply+0x90>
 8006c6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d05b      	beq.n	8006d2c <__multiply+0x148>
 8006c74:	6106      	str	r6, [r0, #16]
 8006c76:	b005      	add	sp, #20
 8006c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c7c:	f843 2b04 	str.w	r2, [r3], #4
 8006c80:	e7d8      	b.n	8006c34 <__multiply+0x50>
 8006c82:	f8b3 a000 	ldrh.w	sl, [r3]
 8006c86:	f1ba 0f00 	cmp.w	sl, #0
 8006c8a:	d024      	beq.n	8006cd6 <__multiply+0xf2>
 8006c8c:	f104 0e14 	add.w	lr, r4, #20
 8006c90:	46a9      	mov	r9, r5
 8006c92:	f04f 0c00 	mov.w	ip, #0
 8006c96:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006c9a:	f8d9 1000 	ldr.w	r1, [r9]
 8006c9e:	fa1f fb82 	uxth.w	fp, r2
 8006ca2:	b289      	uxth	r1, r1
 8006ca4:	fb0a 110b 	mla	r1, sl, fp, r1
 8006ca8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006cac:	f8d9 2000 	ldr.w	r2, [r9]
 8006cb0:	4461      	add	r1, ip
 8006cb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006cb6:	fb0a c20b 	mla	r2, sl, fp, ip
 8006cba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006cbe:	b289      	uxth	r1, r1
 8006cc0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006cc4:	4577      	cmp	r7, lr
 8006cc6:	f849 1b04 	str.w	r1, [r9], #4
 8006cca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006cce:	d8e2      	bhi.n	8006c96 <__multiply+0xb2>
 8006cd0:	9a01      	ldr	r2, [sp, #4]
 8006cd2:	f845 c002 	str.w	ip, [r5, r2]
 8006cd6:	9a03      	ldr	r2, [sp, #12]
 8006cd8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006cdc:	3304      	adds	r3, #4
 8006cde:	f1b9 0f00 	cmp.w	r9, #0
 8006ce2:	d021      	beq.n	8006d28 <__multiply+0x144>
 8006ce4:	6829      	ldr	r1, [r5, #0]
 8006ce6:	f104 0c14 	add.w	ip, r4, #20
 8006cea:	46ae      	mov	lr, r5
 8006cec:	f04f 0a00 	mov.w	sl, #0
 8006cf0:	f8bc b000 	ldrh.w	fp, [ip]
 8006cf4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006cf8:	fb09 220b 	mla	r2, r9, fp, r2
 8006cfc:	4452      	add	r2, sl
 8006cfe:	b289      	uxth	r1, r1
 8006d00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006d04:	f84e 1b04 	str.w	r1, [lr], #4
 8006d08:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006d0c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006d10:	f8be 1000 	ldrh.w	r1, [lr]
 8006d14:	fb09 110a 	mla	r1, r9, sl, r1
 8006d18:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006d1c:	4567      	cmp	r7, ip
 8006d1e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006d22:	d8e5      	bhi.n	8006cf0 <__multiply+0x10c>
 8006d24:	9a01      	ldr	r2, [sp, #4]
 8006d26:	50a9      	str	r1, [r5, r2]
 8006d28:	3504      	adds	r5, #4
 8006d2a:	e799      	b.n	8006c60 <__multiply+0x7c>
 8006d2c:	3e01      	subs	r6, #1
 8006d2e:	e79b      	b.n	8006c68 <__multiply+0x84>
 8006d30:	08009231 	.word	0x08009231
 8006d34:	08009242 	.word	0x08009242

08006d38 <__pow5mult>:
 8006d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d3c:	4615      	mov	r5, r2
 8006d3e:	f012 0203 	ands.w	r2, r2, #3
 8006d42:	4606      	mov	r6, r0
 8006d44:	460f      	mov	r7, r1
 8006d46:	d007      	beq.n	8006d58 <__pow5mult+0x20>
 8006d48:	4c25      	ldr	r4, [pc, #148]	; (8006de0 <__pow5mult+0xa8>)
 8006d4a:	3a01      	subs	r2, #1
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d52:	f7ff fe53 	bl	80069fc <__multadd>
 8006d56:	4607      	mov	r7, r0
 8006d58:	10ad      	asrs	r5, r5, #2
 8006d5a:	d03d      	beq.n	8006dd8 <__pow5mult+0xa0>
 8006d5c:	69f4      	ldr	r4, [r6, #28]
 8006d5e:	b97c      	cbnz	r4, 8006d80 <__pow5mult+0x48>
 8006d60:	2010      	movs	r0, #16
 8006d62:	f7ff fd35 	bl	80067d0 <malloc>
 8006d66:	4602      	mov	r2, r0
 8006d68:	61f0      	str	r0, [r6, #28]
 8006d6a:	b928      	cbnz	r0, 8006d78 <__pow5mult+0x40>
 8006d6c:	4b1d      	ldr	r3, [pc, #116]	; (8006de4 <__pow5mult+0xac>)
 8006d6e:	481e      	ldr	r0, [pc, #120]	; (8006de8 <__pow5mult+0xb0>)
 8006d70:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006d74:	f001 fb38 	bl	80083e8 <__assert_func>
 8006d78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d7c:	6004      	str	r4, [r0, #0]
 8006d7e:	60c4      	str	r4, [r0, #12]
 8006d80:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006d84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d88:	b94c      	cbnz	r4, 8006d9e <__pow5mult+0x66>
 8006d8a:	f240 2171 	movw	r1, #625	; 0x271
 8006d8e:	4630      	mov	r0, r6
 8006d90:	f7ff ff12 	bl	8006bb8 <__i2b>
 8006d94:	2300      	movs	r3, #0
 8006d96:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d9a:	4604      	mov	r4, r0
 8006d9c:	6003      	str	r3, [r0, #0]
 8006d9e:	f04f 0900 	mov.w	r9, #0
 8006da2:	07eb      	lsls	r3, r5, #31
 8006da4:	d50a      	bpl.n	8006dbc <__pow5mult+0x84>
 8006da6:	4639      	mov	r1, r7
 8006da8:	4622      	mov	r2, r4
 8006daa:	4630      	mov	r0, r6
 8006dac:	f7ff ff1a 	bl	8006be4 <__multiply>
 8006db0:	4639      	mov	r1, r7
 8006db2:	4680      	mov	r8, r0
 8006db4:	4630      	mov	r0, r6
 8006db6:	f7ff fdff 	bl	80069b8 <_Bfree>
 8006dba:	4647      	mov	r7, r8
 8006dbc:	106d      	asrs	r5, r5, #1
 8006dbe:	d00b      	beq.n	8006dd8 <__pow5mult+0xa0>
 8006dc0:	6820      	ldr	r0, [r4, #0]
 8006dc2:	b938      	cbnz	r0, 8006dd4 <__pow5mult+0x9c>
 8006dc4:	4622      	mov	r2, r4
 8006dc6:	4621      	mov	r1, r4
 8006dc8:	4630      	mov	r0, r6
 8006dca:	f7ff ff0b 	bl	8006be4 <__multiply>
 8006dce:	6020      	str	r0, [r4, #0]
 8006dd0:	f8c0 9000 	str.w	r9, [r0]
 8006dd4:	4604      	mov	r4, r0
 8006dd6:	e7e4      	b.n	8006da2 <__pow5mult+0x6a>
 8006dd8:	4638      	mov	r0, r7
 8006dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dde:	bf00      	nop
 8006de0:	08009390 	.word	0x08009390
 8006de4:	080091c2 	.word	0x080091c2
 8006de8:	08009242 	.word	0x08009242

08006dec <__lshift>:
 8006dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006df0:	460c      	mov	r4, r1
 8006df2:	6849      	ldr	r1, [r1, #4]
 8006df4:	6923      	ldr	r3, [r4, #16]
 8006df6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006dfa:	68a3      	ldr	r3, [r4, #8]
 8006dfc:	4607      	mov	r7, r0
 8006dfe:	4691      	mov	r9, r2
 8006e00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e04:	f108 0601 	add.w	r6, r8, #1
 8006e08:	42b3      	cmp	r3, r6
 8006e0a:	db0b      	blt.n	8006e24 <__lshift+0x38>
 8006e0c:	4638      	mov	r0, r7
 8006e0e:	f7ff fd93 	bl	8006938 <_Balloc>
 8006e12:	4605      	mov	r5, r0
 8006e14:	b948      	cbnz	r0, 8006e2a <__lshift+0x3e>
 8006e16:	4602      	mov	r2, r0
 8006e18:	4b28      	ldr	r3, [pc, #160]	; (8006ebc <__lshift+0xd0>)
 8006e1a:	4829      	ldr	r0, [pc, #164]	; (8006ec0 <__lshift+0xd4>)
 8006e1c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006e20:	f001 fae2 	bl	80083e8 <__assert_func>
 8006e24:	3101      	adds	r1, #1
 8006e26:	005b      	lsls	r3, r3, #1
 8006e28:	e7ee      	b.n	8006e08 <__lshift+0x1c>
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	f100 0114 	add.w	r1, r0, #20
 8006e30:	f100 0210 	add.w	r2, r0, #16
 8006e34:	4618      	mov	r0, r3
 8006e36:	4553      	cmp	r3, sl
 8006e38:	db33      	blt.n	8006ea2 <__lshift+0xb6>
 8006e3a:	6920      	ldr	r0, [r4, #16]
 8006e3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e40:	f104 0314 	add.w	r3, r4, #20
 8006e44:	f019 091f 	ands.w	r9, r9, #31
 8006e48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006e50:	d02b      	beq.n	8006eaa <__lshift+0xbe>
 8006e52:	f1c9 0e20 	rsb	lr, r9, #32
 8006e56:	468a      	mov	sl, r1
 8006e58:	2200      	movs	r2, #0
 8006e5a:	6818      	ldr	r0, [r3, #0]
 8006e5c:	fa00 f009 	lsl.w	r0, r0, r9
 8006e60:	4310      	orrs	r0, r2
 8006e62:	f84a 0b04 	str.w	r0, [sl], #4
 8006e66:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e6a:	459c      	cmp	ip, r3
 8006e6c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006e70:	d8f3      	bhi.n	8006e5a <__lshift+0x6e>
 8006e72:	ebac 0304 	sub.w	r3, ip, r4
 8006e76:	3b15      	subs	r3, #21
 8006e78:	f023 0303 	bic.w	r3, r3, #3
 8006e7c:	3304      	adds	r3, #4
 8006e7e:	f104 0015 	add.w	r0, r4, #21
 8006e82:	4584      	cmp	ip, r0
 8006e84:	bf38      	it	cc
 8006e86:	2304      	movcc	r3, #4
 8006e88:	50ca      	str	r2, [r1, r3]
 8006e8a:	b10a      	cbz	r2, 8006e90 <__lshift+0xa4>
 8006e8c:	f108 0602 	add.w	r6, r8, #2
 8006e90:	3e01      	subs	r6, #1
 8006e92:	4638      	mov	r0, r7
 8006e94:	612e      	str	r6, [r5, #16]
 8006e96:	4621      	mov	r1, r4
 8006e98:	f7ff fd8e 	bl	80069b8 <_Bfree>
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ea2:	f842 0f04 	str.w	r0, [r2, #4]!
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	e7c5      	b.n	8006e36 <__lshift+0x4a>
 8006eaa:	3904      	subs	r1, #4
 8006eac:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eb0:	f841 2f04 	str.w	r2, [r1, #4]!
 8006eb4:	459c      	cmp	ip, r3
 8006eb6:	d8f9      	bhi.n	8006eac <__lshift+0xc0>
 8006eb8:	e7ea      	b.n	8006e90 <__lshift+0xa4>
 8006eba:	bf00      	nop
 8006ebc:	08009231 	.word	0x08009231
 8006ec0:	08009242 	.word	0x08009242

08006ec4 <__mcmp>:
 8006ec4:	b530      	push	{r4, r5, lr}
 8006ec6:	6902      	ldr	r2, [r0, #16]
 8006ec8:	690c      	ldr	r4, [r1, #16]
 8006eca:	1b12      	subs	r2, r2, r4
 8006ecc:	d10e      	bne.n	8006eec <__mcmp+0x28>
 8006ece:	f100 0314 	add.w	r3, r0, #20
 8006ed2:	3114      	adds	r1, #20
 8006ed4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006ed8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006edc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006ee0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006ee4:	42a5      	cmp	r5, r4
 8006ee6:	d003      	beq.n	8006ef0 <__mcmp+0x2c>
 8006ee8:	d305      	bcc.n	8006ef6 <__mcmp+0x32>
 8006eea:	2201      	movs	r2, #1
 8006eec:	4610      	mov	r0, r2
 8006eee:	bd30      	pop	{r4, r5, pc}
 8006ef0:	4283      	cmp	r3, r0
 8006ef2:	d3f3      	bcc.n	8006edc <__mcmp+0x18>
 8006ef4:	e7fa      	b.n	8006eec <__mcmp+0x28>
 8006ef6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006efa:	e7f7      	b.n	8006eec <__mcmp+0x28>

08006efc <__mdiff>:
 8006efc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f00:	460c      	mov	r4, r1
 8006f02:	4606      	mov	r6, r0
 8006f04:	4611      	mov	r1, r2
 8006f06:	4620      	mov	r0, r4
 8006f08:	4690      	mov	r8, r2
 8006f0a:	f7ff ffdb 	bl	8006ec4 <__mcmp>
 8006f0e:	1e05      	subs	r5, r0, #0
 8006f10:	d110      	bne.n	8006f34 <__mdiff+0x38>
 8006f12:	4629      	mov	r1, r5
 8006f14:	4630      	mov	r0, r6
 8006f16:	f7ff fd0f 	bl	8006938 <_Balloc>
 8006f1a:	b930      	cbnz	r0, 8006f2a <__mdiff+0x2e>
 8006f1c:	4b3a      	ldr	r3, [pc, #232]	; (8007008 <__mdiff+0x10c>)
 8006f1e:	4602      	mov	r2, r0
 8006f20:	f240 2137 	movw	r1, #567	; 0x237
 8006f24:	4839      	ldr	r0, [pc, #228]	; (800700c <__mdiff+0x110>)
 8006f26:	f001 fa5f 	bl	80083e8 <__assert_func>
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f34:	bfa4      	itt	ge
 8006f36:	4643      	movge	r3, r8
 8006f38:	46a0      	movge	r8, r4
 8006f3a:	4630      	mov	r0, r6
 8006f3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006f40:	bfa6      	itte	ge
 8006f42:	461c      	movge	r4, r3
 8006f44:	2500      	movge	r5, #0
 8006f46:	2501      	movlt	r5, #1
 8006f48:	f7ff fcf6 	bl	8006938 <_Balloc>
 8006f4c:	b920      	cbnz	r0, 8006f58 <__mdiff+0x5c>
 8006f4e:	4b2e      	ldr	r3, [pc, #184]	; (8007008 <__mdiff+0x10c>)
 8006f50:	4602      	mov	r2, r0
 8006f52:	f240 2145 	movw	r1, #581	; 0x245
 8006f56:	e7e5      	b.n	8006f24 <__mdiff+0x28>
 8006f58:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006f5c:	6926      	ldr	r6, [r4, #16]
 8006f5e:	60c5      	str	r5, [r0, #12]
 8006f60:	f104 0914 	add.w	r9, r4, #20
 8006f64:	f108 0514 	add.w	r5, r8, #20
 8006f68:	f100 0e14 	add.w	lr, r0, #20
 8006f6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006f70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006f74:	f108 0210 	add.w	r2, r8, #16
 8006f78:	46f2      	mov	sl, lr
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006f80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006f84:	fa11 f88b 	uxtah	r8, r1, fp
 8006f88:	b299      	uxth	r1, r3
 8006f8a:	0c1b      	lsrs	r3, r3, #16
 8006f8c:	eba8 0801 	sub.w	r8, r8, r1
 8006f90:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006f94:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006f98:	fa1f f888 	uxth.w	r8, r8
 8006f9c:	1419      	asrs	r1, r3, #16
 8006f9e:	454e      	cmp	r6, r9
 8006fa0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006fa4:	f84a 3b04 	str.w	r3, [sl], #4
 8006fa8:	d8e8      	bhi.n	8006f7c <__mdiff+0x80>
 8006faa:	1b33      	subs	r3, r6, r4
 8006fac:	3b15      	subs	r3, #21
 8006fae:	f023 0303 	bic.w	r3, r3, #3
 8006fb2:	3304      	adds	r3, #4
 8006fb4:	3415      	adds	r4, #21
 8006fb6:	42a6      	cmp	r6, r4
 8006fb8:	bf38      	it	cc
 8006fba:	2304      	movcc	r3, #4
 8006fbc:	441d      	add	r5, r3
 8006fbe:	4473      	add	r3, lr
 8006fc0:	469e      	mov	lr, r3
 8006fc2:	462e      	mov	r6, r5
 8006fc4:	4566      	cmp	r6, ip
 8006fc6:	d30e      	bcc.n	8006fe6 <__mdiff+0xea>
 8006fc8:	f10c 0203 	add.w	r2, ip, #3
 8006fcc:	1b52      	subs	r2, r2, r5
 8006fce:	f022 0203 	bic.w	r2, r2, #3
 8006fd2:	3d03      	subs	r5, #3
 8006fd4:	45ac      	cmp	ip, r5
 8006fd6:	bf38      	it	cc
 8006fd8:	2200      	movcc	r2, #0
 8006fda:	4413      	add	r3, r2
 8006fdc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006fe0:	b17a      	cbz	r2, 8007002 <__mdiff+0x106>
 8006fe2:	6107      	str	r7, [r0, #16]
 8006fe4:	e7a4      	b.n	8006f30 <__mdiff+0x34>
 8006fe6:	f856 8b04 	ldr.w	r8, [r6], #4
 8006fea:	fa11 f288 	uxtah	r2, r1, r8
 8006fee:	1414      	asrs	r4, r2, #16
 8006ff0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006ff4:	b292      	uxth	r2, r2
 8006ff6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006ffa:	f84e 2b04 	str.w	r2, [lr], #4
 8006ffe:	1421      	asrs	r1, r4, #16
 8007000:	e7e0      	b.n	8006fc4 <__mdiff+0xc8>
 8007002:	3f01      	subs	r7, #1
 8007004:	e7ea      	b.n	8006fdc <__mdiff+0xe0>
 8007006:	bf00      	nop
 8007008:	08009231 	.word	0x08009231
 800700c:	08009242 	.word	0x08009242

08007010 <__ulp>:
 8007010:	b082      	sub	sp, #8
 8007012:	ed8d 0b00 	vstr	d0, [sp]
 8007016:	9a01      	ldr	r2, [sp, #4]
 8007018:	4b0f      	ldr	r3, [pc, #60]	; (8007058 <__ulp+0x48>)
 800701a:	4013      	ands	r3, r2
 800701c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007020:	2b00      	cmp	r3, #0
 8007022:	dc08      	bgt.n	8007036 <__ulp+0x26>
 8007024:	425b      	negs	r3, r3
 8007026:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800702a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800702e:	da04      	bge.n	800703a <__ulp+0x2a>
 8007030:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007034:	4113      	asrs	r3, r2
 8007036:	2200      	movs	r2, #0
 8007038:	e008      	b.n	800704c <__ulp+0x3c>
 800703a:	f1a2 0314 	sub.w	r3, r2, #20
 800703e:	2b1e      	cmp	r3, #30
 8007040:	bfda      	itte	le
 8007042:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007046:	40da      	lsrle	r2, r3
 8007048:	2201      	movgt	r2, #1
 800704a:	2300      	movs	r3, #0
 800704c:	4619      	mov	r1, r3
 800704e:	4610      	mov	r0, r2
 8007050:	ec41 0b10 	vmov	d0, r0, r1
 8007054:	b002      	add	sp, #8
 8007056:	4770      	bx	lr
 8007058:	7ff00000 	.word	0x7ff00000

0800705c <__b2d>:
 800705c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007060:	6906      	ldr	r6, [r0, #16]
 8007062:	f100 0814 	add.w	r8, r0, #20
 8007066:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800706a:	1f37      	subs	r7, r6, #4
 800706c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007070:	4610      	mov	r0, r2
 8007072:	f7ff fd53 	bl	8006b1c <__hi0bits>
 8007076:	f1c0 0320 	rsb	r3, r0, #32
 800707a:	280a      	cmp	r0, #10
 800707c:	600b      	str	r3, [r1, #0]
 800707e:	491b      	ldr	r1, [pc, #108]	; (80070ec <__b2d+0x90>)
 8007080:	dc15      	bgt.n	80070ae <__b2d+0x52>
 8007082:	f1c0 0c0b 	rsb	ip, r0, #11
 8007086:	fa22 f30c 	lsr.w	r3, r2, ip
 800708a:	45b8      	cmp	r8, r7
 800708c:	ea43 0501 	orr.w	r5, r3, r1
 8007090:	bf34      	ite	cc
 8007092:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007096:	2300      	movcs	r3, #0
 8007098:	3015      	adds	r0, #21
 800709a:	fa02 f000 	lsl.w	r0, r2, r0
 800709e:	fa23 f30c 	lsr.w	r3, r3, ip
 80070a2:	4303      	orrs	r3, r0
 80070a4:	461c      	mov	r4, r3
 80070a6:	ec45 4b10 	vmov	d0, r4, r5
 80070aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070ae:	45b8      	cmp	r8, r7
 80070b0:	bf3a      	itte	cc
 80070b2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80070b6:	f1a6 0708 	subcc.w	r7, r6, #8
 80070ba:	2300      	movcs	r3, #0
 80070bc:	380b      	subs	r0, #11
 80070be:	d012      	beq.n	80070e6 <__b2d+0x8a>
 80070c0:	f1c0 0120 	rsb	r1, r0, #32
 80070c4:	fa23 f401 	lsr.w	r4, r3, r1
 80070c8:	4082      	lsls	r2, r0
 80070ca:	4322      	orrs	r2, r4
 80070cc:	4547      	cmp	r7, r8
 80070ce:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80070d2:	bf8c      	ite	hi
 80070d4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80070d8:	2200      	movls	r2, #0
 80070da:	4083      	lsls	r3, r0
 80070dc:	40ca      	lsrs	r2, r1
 80070de:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80070e2:	4313      	orrs	r3, r2
 80070e4:	e7de      	b.n	80070a4 <__b2d+0x48>
 80070e6:	ea42 0501 	orr.w	r5, r2, r1
 80070ea:	e7db      	b.n	80070a4 <__b2d+0x48>
 80070ec:	3ff00000 	.word	0x3ff00000

080070f0 <__d2b>:
 80070f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80070f4:	460f      	mov	r7, r1
 80070f6:	2101      	movs	r1, #1
 80070f8:	ec59 8b10 	vmov	r8, r9, d0
 80070fc:	4616      	mov	r6, r2
 80070fe:	f7ff fc1b 	bl	8006938 <_Balloc>
 8007102:	4604      	mov	r4, r0
 8007104:	b930      	cbnz	r0, 8007114 <__d2b+0x24>
 8007106:	4602      	mov	r2, r0
 8007108:	4b24      	ldr	r3, [pc, #144]	; (800719c <__d2b+0xac>)
 800710a:	4825      	ldr	r0, [pc, #148]	; (80071a0 <__d2b+0xb0>)
 800710c:	f240 310f 	movw	r1, #783	; 0x30f
 8007110:	f001 f96a 	bl	80083e8 <__assert_func>
 8007114:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007118:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800711c:	bb2d      	cbnz	r5, 800716a <__d2b+0x7a>
 800711e:	9301      	str	r3, [sp, #4]
 8007120:	f1b8 0300 	subs.w	r3, r8, #0
 8007124:	d026      	beq.n	8007174 <__d2b+0x84>
 8007126:	4668      	mov	r0, sp
 8007128:	9300      	str	r3, [sp, #0]
 800712a:	f7ff fd17 	bl	8006b5c <__lo0bits>
 800712e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007132:	b1e8      	cbz	r0, 8007170 <__d2b+0x80>
 8007134:	f1c0 0320 	rsb	r3, r0, #32
 8007138:	fa02 f303 	lsl.w	r3, r2, r3
 800713c:	430b      	orrs	r3, r1
 800713e:	40c2      	lsrs	r2, r0
 8007140:	6163      	str	r3, [r4, #20]
 8007142:	9201      	str	r2, [sp, #4]
 8007144:	9b01      	ldr	r3, [sp, #4]
 8007146:	61a3      	str	r3, [r4, #24]
 8007148:	2b00      	cmp	r3, #0
 800714a:	bf14      	ite	ne
 800714c:	2202      	movne	r2, #2
 800714e:	2201      	moveq	r2, #1
 8007150:	6122      	str	r2, [r4, #16]
 8007152:	b1bd      	cbz	r5, 8007184 <__d2b+0x94>
 8007154:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007158:	4405      	add	r5, r0
 800715a:	603d      	str	r5, [r7, #0]
 800715c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007160:	6030      	str	r0, [r6, #0]
 8007162:	4620      	mov	r0, r4
 8007164:	b003      	add	sp, #12
 8007166:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800716a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800716e:	e7d6      	b.n	800711e <__d2b+0x2e>
 8007170:	6161      	str	r1, [r4, #20]
 8007172:	e7e7      	b.n	8007144 <__d2b+0x54>
 8007174:	a801      	add	r0, sp, #4
 8007176:	f7ff fcf1 	bl	8006b5c <__lo0bits>
 800717a:	9b01      	ldr	r3, [sp, #4]
 800717c:	6163      	str	r3, [r4, #20]
 800717e:	3020      	adds	r0, #32
 8007180:	2201      	movs	r2, #1
 8007182:	e7e5      	b.n	8007150 <__d2b+0x60>
 8007184:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007188:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800718c:	6038      	str	r0, [r7, #0]
 800718e:	6918      	ldr	r0, [r3, #16]
 8007190:	f7ff fcc4 	bl	8006b1c <__hi0bits>
 8007194:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007198:	e7e2      	b.n	8007160 <__d2b+0x70>
 800719a:	bf00      	nop
 800719c:	08009231 	.word	0x08009231
 80071a0:	08009242 	.word	0x08009242

080071a4 <__ratio>:
 80071a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071a8:	4688      	mov	r8, r1
 80071aa:	4669      	mov	r1, sp
 80071ac:	4681      	mov	r9, r0
 80071ae:	f7ff ff55 	bl	800705c <__b2d>
 80071b2:	a901      	add	r1, sp, #4
 80071b4:	4640      	mov	r0, r8
 80071b6:	ec55 4b10 	vmov	r4, r5, d0
 80071ba:	ee10 aa10 	vmov	sl, s0
 80071be:	f7ff ff4d 	bl	800705c <__b2d>
 80071c2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80071c6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80071ca:	1ad2      	subs	r2, r2, r3
 80071cc:	e9dd 3100 	ldrd	r3, r1, [sp]
 80071d0:	1a5b      	subs	r3, r3, r1
 80071d2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80071d6:	ec57 6b10 	vmov	r6, r7, d0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	bfd6      	itet	le
 80071de:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80071e2:	462a      	movgt	r2, r5
 80071e4:	463a      	movle	r2, r7
 80071e6:	46ab      	mov	fp, r5
 80071e8:	bfd6      	itet	le
 80071ea:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80071ee:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80071f2:	ee00 3a90 	vmovle	s1, r3
 80071f6:	ec4b ab17 	vmov	d7, sl, fp
 80071fa:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80071fe:	b003      	add	sp, #12
 8007200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007204 <__copybits>:
 8007204:	3901      	subs	r1, #1
 8007206:	b570      	push	{r4, r5, r6, lr}
 8007208:	1149      	asrs	r1, r1, #5
 800720a:	6914      	ldr	r4, [r2, #16]
 800720c:	3101      	adds	r1, #1
 800720e:	f102 0314 	add.w	r3, r2, #20
 8007212:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007216:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800721a:	1f05      	subs	r5, r0, #4
 800721c:	42a3      	cmp	r3, r4
 800721e:	d30c      	bcc.n	800723a <__copybits+0x36>
 8007220:	1aa3      	subs	r3, r4, r2
 8007222:	3b11      	subs	r3, #17
 8007224:	f023 0303 	bic.w	r3, r3, #3
 8007228:	3211      	adds	r2, #17
 800722a:	42a2      	cmp	r2, r4
 800722c:	bf88      	it	hi
 800722e:	2300      	movhi	r3, #0
 8007230:	4418      	add	r0, r3
 8007232:	2300      	movs	r3, #0
 8007234:	4288      	cmp	r0, r1
 8007236:	d305      	bcc.n	8007244 <__copybits+0x40>
 8007238:	bd70      	pop	{r4, r5, r6, pc}
 800723a:	f853 6b04 	ldr.w	r6, [r3], #4
 800723e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007242:	e7eb      	b.n	800721c <__copybits+0x18>
 8007244:	f840 3b04 	str.w	r3, [r0], #4
 8007248:	e7f4      	b.n	8007234 <__copybits+0x30>

0800724a <__any_on>:
 800724a:	f100 0214 	add.w	r2, r0, #20
 800724e:	6900      	ldr	r0, [r0, #16]
 8007250:	114b      	asrs	r3, r1, #5
 8007252:	4298      	cmp	r0, r3
 8007254:	b510      	push	{r4, lr}
 8007256:	db11      	blt.n	800727c <__any_on+0x32>
 8007258:	dd0a      	ble.n	8007270 <__any_on+0x26>
 800725a:	f011 011f 	ands.w	r1, r1, #31
 800725e:	d007      	beq.n	8007270 <__any_on+0x26>
 8007260:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007264:	fa24 f001 	lsr.w	r0, r4, r1
 8007268:	fa00 f101 	lsl.w	r1, r0, r1
 800726c:	428c      	cmp	r4, r1
 800726e:	d10b      	bne.n	8007288 <__any_on+0x3e>
 8007270:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007274:	4293      	cmp	r3, r2
 8007276:	d803      	bhi.n	8007280 <__any_on+0x36>
 8007278:	2000      	movs	r0, #0
 800727a:	bd10      	pop	{r4, pc}
 800727c:	4603      	mov	r3, r0
 800727e:	e7f7      	b.n	8007270 <__any_on+0x26>
 8007280:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007284:	2900      	cmp	r1, #0
 8007286:	d0f5      	beq.n	8007274 <__any_on+0x2a>
 8007288:	2001      	movs	r0, #1
 800728a:	e7f6      	b.n	800727a <__any_on+0x30>

0800728c <sulp>:
 800728c:	b570      	push	{r4, r5, r6, lr}
 800728e:	4604      	mov	r4, r0
 8007290:	460d      	mov	r5, r1
 8007292:	4616      	mov	r6, r2
 8007294:	ec45 4b10 	vmov	d0, r4, r5
 8007298:	f7ff feba 	bl	8007010 <__ulp>
 800729c:	b17e      	cbz	r6, 80072be <sulp+0x32>
 800729e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80072a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	dd09      	ble.n	80072be <sulp+0x32>
 80072aa:	051b      	lsls	r3, r3, #20
 80072ac:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80072b0:	2000      	movs	r0, #0
 80072b2:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80072b6:	ec41 0b17 	vmov	d7, r0, r1
 80072ba:	ee20 0b07 	vmul.f64	d0, d0, d7
 80072be:	bd70      	pop	{r4, r5, r6, pc}

080072c0 <_strtod_l>:
 80072c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c4:	ed2d 8b0e 	vpush	{d8-d14}
 80072c8:	b097      	sub	sp, #92	; 0x5c
 80072ca:	4604      	mov	r4, r0
 80072cc:	920d      	str	r2, [sp, #52]	; 0x34
 80072ce:	2200      	movs	r2, #0
 80072d0:	9212      	str	r2, [sp, #72]	; 0x48
 80072d2:	468a      	mov	sl, r1
 80072d4:	f04f 0800 	mov.w	r8, #0
 80072d8:	f04f 0900 	mov.w	r9, #0
 80072dc:	460a      	mov	r2, r1
 80072de:	9211      	str	r2, [sp, #68]	; 0x44
 80072e0:	7811      	ldrb	r1, [r2, #0]
 80072e2:	292b      	cmp	r1, #43	; 0x2b
 80072e4:	d04c      	beq.n	8007380 <_strtod_l+0xc0>
 80072e6:	d839      	bhi.n	800735c <_strtod_l+0x9c>
 80072e8:	290d      	cmp	r1, #13
 80072ea:	d833      	bhi.n	8007354 <_strtod_l+0x94>
 80072ec:	2908      	cmp	r1, #8
 80072ee:	d833      	bhi.n	8007358 <_strtod_l+0x98>
 80072f0:	2900      	cmp	r1, #0
 80072f2:	d03c      	beq.n	800736e <_strtod_l+0xae>
 80072f4:	2200      	movs	r2, #0
 80072f6:	9208      	str	r2, [sp, #32]
 80072f8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80072fa:	7832      	ldrb	r2, [r6, #0]
 80072fc:	2a30      	cmp	r2, #48	; 0x30
 80072fe:	f040 80b8 	bne.w	8007472 <_strtod_l+0x1b2>
 8007302:	7872      	ldrb	r2, [r6, #1]
 8007304:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007308:	2a58      	cmp	r2, #88	; 0x58
 800730a:	d170      	bne.n	80073ee <_strtod_l+0x12e>
 800730c:	9302      	str	r3, [sp, #8]
 800730e:	9b08      	ldr	r3, [sp, #32]
 8007310:	9301      	str	r3, [sp, #4]
 8007312:	ab12      	add	r3, sp, #72	; 0x48
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	4a91      	ldr	r2, [pc, #580]	; (800755c <_strtod_l+0x29c>)
 8007318:	ab13      	add	r3, sp, #76	; 0x4c
 800731a:	a911      	add	r1, sp, #68	; 0x44
 800731c:	4620      	mov	r0, r4
 800731e:	f001 f8ff 	bl	8008520 <__gethex>
 8007322:	f010 070f 	ands.w	r7, r0, #15
 8007326:	4605      	mov	r5, r0
 8007328:	d005      	beq.n	8007336 <_strtod_l+0x76>
 800732a:	2f06      	cmp	r7, #6
 800732c:	d12a      	bne.n	8007384 <_strtod_l+0xc4>
 800732e:	3601      	adds	r6, #1
 8007330:	2300      	movs	r3, #0
 8007332:	9611      	str	r6, [sp, #68]	; 0x44
 8007334:	9308      	str	r3, [sp, #32]
 8007336:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007338:	2b00      	cmp	r3, #0
 800733a:	f040 8555 	bne.w	8007de8 <_strtod_l+0xb28>
 800733e:	9b08      	ldr	r3, [sp, #32]
 8007340:	ec49 8b10 	vmov	d0, r8, r9
 8007344:	b1cb      	cbz	r3, 800737a <_strtod_l+0xba>
 8007346:	eeb1 0b40 	vneg.f64	d0, d0
 800734a:	b017      	add	sp, #92	; 0x5c
 800734c:	ecbd 8b0e 	vpop	{d8-d14}
 8007350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007354:	2920      	cmp	r1, #32
 8007356:	d1cd      	bne.n	80072f4 <_strtod_l+0x34>
 8007358:	3201      	adds	r2, #1
 800735a:	e7c0      	b.n	80072de <_strtod_l+0x1e>
 800735c:	292d      	cmp	r1, #45	; 0x2d
 800735e:	d1c9      	bne.n	80072f4 <_strtod_l+0x34>
 8007360:	2101      	movs	r1, #1
 8007362:	9108      	str	r1, [sp, #32]
 8007364:	1c51      	adds	r1, r2, #1
 8007366:	9111      	str	r1, [sp, #68]	; 0x44
 8007368:	7852      	ldrb	r2, [r2, #1]
 800736a:	2a00      	cmp	r2, #0
 800736c:	d1c4      	bne.n	80072f8 <_strtod_l+0x38>
 800736e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007370:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8007374:	2b00      	cmp	r3, #0
 8007376:	f040 8535 	bne.w	8007de4 <_strtod_l+0xb24>
 800737a:	ec49 8b10 	vmov	d0, r8, r9
 800737e:	e7e4      	b.n	800734a <_strtod_l+0x8a>
 8007380:	2100      	movs	r1, #0
 8007382:	e7ee      	b.n	8007362 <_strtod_l+0xa2>
 8007384:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007386:	b13a      	cbz	r2, 8007398 <_strtod_l+0xd8>
 8007388:	2135      	movs	r1, #53	; 0x35
 800738a:	a814      	add	r0, sp, #80	; 0x50
 800738c:	f7ff ff3a 	bl	8007204 <__copybits>
 8007390:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007392:	4620      	mov	r0, r4
 8007394:	f7ff fb10 	bl	80069b8 <_Bfree>
 8007398:	1e7b      	subs	r3, r7, #1
 800739a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800739c:	2b04      	cmp	r3, #4
 800739e:	d806      	bhi.n	80073ae <_strtod_l+0xee>
 80073a0:	e8df f003 	tbb	[pc, r3]
 80073a4:	201d0314 	.word	0x201d0314
 80073a8:	14          	.byte	0x14
 80073a9:	00          	.byte	0x00
 80073aa:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 80073ae:	05eb      	lsls	r3, r5, #23
 80073b0:	bf48      	it	mi
 80073b2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80073b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80073ba:	0d1b      	lsrs	r3, r3, #20
 80073bc:	051b      	lsls	r3, r3, #20
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1b9      	bne.n	8007336 <_strtod_l+0x76>
 80073c2:	f7fe fb91 	bl	8005ae8 <__errno>
 80073c6:	2322      	movs	r3, #34	; 0x22
 80073c8:	6003      	str	r3, [r0, #0]
 80073ca:	e7b4      	b.n	8007336 <_strtod_l+0x76>
 80073cc:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 80073d0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80073d4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80073d8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80073dc:	e7e7      	b.n	80073ae <_strtod_l+0xee>
 80073de:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8007564 <_strtod_l+0x2a4>
 80073e2:	e7e4      	b.n	80073ae <_strtod_l+0xee>
 80073e4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80073e8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80073ec:	e7df      	b.n	80073ae <_strtod_l+0xee>
 80073ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80073f0:	1c5a      	adds	r2, r3, #1
 80073f2:	9211      	str	r2, [sp, #68]	; 0x44
 80073f4:	785b      	ldrb	r3, [r3, #1]
 80073f6:	2b30      	cmp	r3, #48	; 0x30
 80073f8:	d0f9      	beq.n	80073ee <_strtod_l+0x12e>
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d09b      	beq.n	8007336 <_strtod_l+0x76>
 80073fe:	2301      	movs	r3, #1
 8007400:	9306      	str	r3, [sp, #24]
 8007402:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007404:	9309      	str	r3, [sp, #36]	; 0x24
 8007406:	2300      	movs	r3, #0
 8007408:	9305      	str	r3, [sp, #20]
 800740a:	9307      	str	r3, [sp, #28]
 800740c:	461e      	mov	r6, r3
 800740e:	220a      	movs	r2, #10
 8007410:	9811      	ldr	r0, [sp, #68]	; 0x44
 8007412:	7805      	ldrb	r5, [r0, #0]
 8007414:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8007418:	b2d9      	uxtb	r1, r3
 800741a:	2909      	cmp	r1, #9
 800741c:	d92b      	bls.n	8007476 <_strtod_l+0x1b6>
 800741e:	4950      	ldr	r1, [pc, #320]	; (8007560 <_strtod_l+0x2a0>)
 8007420:	2201      	movs	r2, #1
 8007422:	f000 ffa9 	bl	8008378 <strncmp>
 8007426:	2800      	cmp	r0, #0
 8007428:	d035      	beq.n	8007496 <_strtod_l+0x1d6>
 800742a:	2000      	movs	r0, #0
 800742c:	462a      	mov	r2, r5
 800742e:	4633      	mov	r3, r6
 8007430:	4683      	mov	fp, r0
 8007432:	4601      	mov	r1, r0
 8007434:	2a65      	cmp	r2, #101	; 0x65
 8007436:	d001      	beq.n	800743c <_strtod_l+0x17c>
 8007438:	2a45      	cmp	r2, #69	; 0x45
 800743a:	d118      	bne.n	800746e <_strtod_l+0x1ae>
 800743c:	b91b      	cbnz	r3, 8007446 <_strtod_l+0x186>
 800743e:	9b06      	ldr	r3, [sp, #24]
 8007440:	4303      	orrs	r3, r0
 8007442:	d094      	beq.n	800736e <_strtod_l+0xae>
 8007444:	2300      	movs	r3, #0
 8007446:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800744a:	f10a 0201 	add.w	r2, sl, #1
 800744e:	9211      	str	r2, [sp, #68]	; 0x44
 8007450:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8007454:	2a2b      	cmp	r2, #43	; 0x2b
 8007456:	d075      	beq.n	8007544 <_strtod_l+0x284>
 8007458:	2a2d      	cmp	r2, #45	; 0x2d
 800745a:	d07b      	beq.n	8007554 <_strtod_l+0x294>
 800745c:	f04f 0e00 	mov.w	lr, #0
 8007460:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8007464:	2d09      	cmp	r5, #9
 8007466:	f240 8083 	bls.w	8007570 <_strtod_l+0x2b0>
 800746a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800746e:	2500      	movs	r5, #0
 8007470:	e09e      	b.n	80075b0 <_strtod_l+0x2f0>
 8007472:	2300      	movs	r3, #0
 8007474:	e7c4      	b.n	8007400 <_strtod_l+0x140>
 8007476:	2e08      	cmp	r6, #8
 8007478:	bfd5      	itete	le
 800747a:	9907      	ldrle	r1, [sp, #28]
 800747c:	9905      	ldrgt	r1, [sp, #20]
 800747e:	fb02 3301 	mlale	r3, r2, r1, r3
 8007482:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007486:	f100 0001 	add.w	r0, r0, #1
 800748a:	bfd4      	ite	le
 800748c:	9307      	strle	r3, [sp, #28]
 800748e:	9305      	strgt	r3, [sp, #20]
 8007490:	3601      	adds	r6, #1
 8007492:	9011      	str	r0, [sp, #68]	; 0x44
 8007494:	e7bc      	b.n	8007410 <_strtod_l+0x150>
 8007496:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007498:	1c5a      	adds	r2, r3, #1
 800749a:	9211      	str	r2, [sp, #68]	; 0x44
 800749c:	785a      	ldrb	r2, [r3, #1]
 800749e:	b3ae      	cbz	r6, 800750c <_strtod_l+0x24c>
 80074a0:	4683      	mov	fp, r0
 80074a2:	4633      	mov	r3, r6
 80074a4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80074a8:	2909      	cmp	r1, #9
 80074aa:	d912      	bls.n	80074d2 <_strtod_l+0x212>
 80074ac:	2101      	movs	r1, #1
 80074ae:	e7c1      	b.n	8007434 <_strtod_l+0x174>
 80074b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80074b2:	1c5a      	adds	r2, r3, #1
 80074b4:	9211      	str	r2, [sp, #68]	; 0x44
 80074b6:	785a      	ldrb	r2, [r3, #1]
 80074b8:	3001      	adds	r0, #1
 80074ba:	2a30      	cmp	r2, #48	; 0x30
 80074bc:	d0f8      	beq.n	80074b0 <_strtod_l+0x1f0>
 80074be:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80074c2:	2b08      	cmp	r3, #8
 80074c4:	f200 8495 	bhi.w	8007df2 <_strtod_l+0xb32>
 80074c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80074ca:	9309      	str	r3, [sp, #36]	; 0x24
 80074cc:	4683      	mov	fp, r0
 80074ce:	2000      	movs	r0, #0
 80074d0:	4603      	mov	r3, r0
 80074d2:	3a30      	subs	r2, #48	; 0x30
 80074d4:	f100 0101 	add.w	r1, r0, #1
 80074d8:	d012      	beq.n	8007500 <_strtod_l+0x240>
 80074da:	448b      	add	fp, r1
 80074dc:	eb00 0c03 	add.w	ip, r0, r3
 80074e0:	4619      	mov	r1, r3
 80074e2:	250a      	movs	r5, #10
 80074e4:	4561      	cmp	r1, ip
 80074e6:	d113      	bne.n	8007510 <_strtod_l+0x250>
 80074e8:	1819      	adds	r1, r3, r0
 80074ea:	2908      	cmp	r1, #8
 80074ec:	f103 0301 	add.w	r3, r3, #1
 80074f0:	4403      	add	r3, r0
 80074f2:	dc1b      	bgt.n	800752c <_strtod_l+0x26c>
 80074f4:	9807      	ldr	r0, [sp, #28]
 80074f6:	210a      	movs	r1, #10
 80074f8:	fb01 2200 	mla	r2, r1, r0, r2
 80074fc:	9207      	str	r2, [sp, #28]
 80074fe:	2100      	movs	r1, #0
 8007500:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007502:	1c50      	adds	r0, r2, #1
 8007504:	9011      	str	r0, [sp, #68]	; 0x44
 8007506:	7852      	ldrb	r2, [r2, #1]
 8007508:	4608      	mov	r0, r1
 800750a:	e7cb      	b.n	80074a4 <_strtod_l+0x1e4>
 800750c:	4630      	mov	r0, r6
 800750e:	e7d4      	b.n	80074ba <_strtod_l+0x1fa>
 8007510:	2908      	cmp	r1, #8
 8007512:	f101 0101 	add.w	r1, r1, #1
 8007516:	dc03      	bgt.n	8007520 <_strtod_l+0x260>
 8007518:	9f07      	ldr	r7, [sp, #28]
 800751a:	436f      	muls	r7, r5
 800751c:	9707      	str	r7, [sp, #28]
 800751e:	e7e1      	b.n	80074e4 <_strtod_l+0x224>
 8007520:	2910      	cmp	r1, #16
 8007522:	bfde      	ittt	le
 8007524:	9f05      	ldrle	r7, [sp, #20]
 8007526:	436f      	mulle	r7, r5
 8007528:	9705      	strle	r7, [sp, #20]
 800752a:	e7db      	b.n	80074e4 <_strtod_l+0x224>
 800752c:	2b10      	cmp	r3, #16
 800752e:	bfdf      	itttt	le
 8007530:	9805      	ldrle	r0, [sp, #20]
 8007532:	210a      	movle	r1, #10
 8007534:	fb01 2200 	mlale	r2, r1, r0, r2
 8007538:	9205      	strle	r2, [sp, #20]
 800753a:	e7e0      	b.n	80074fe <_strtod_l+0x23e>
 800753c:	f04f 0b00 	mov.w	fp, #0
 8007540:	2101      	movs	r1, #1
 8007542:	e77c      	b.n	800743e <_strtod_l+0x17e>
 8007544:	f04f 0e00 	mov.w	lr, #0
 8007548:	f10a 0202 	add.w	r2, sl, #2
 800754c:	9211      	str	r2, [sp, #68]	; 0x44
 800754e:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8007552:	e785      	b.n	8007460 <_strtod_l+0x1a0>
 8007554:	f04f 0e01 	mov.w	lr, #1
 8007558:	e7f6      	b.n	8007548 <_strtod_l+0x288>
 800755a:	bf00      	nop
 800755c:	080093a0 	.word	0x080093a0
 8007560:	0800939c 	.word	0x0800939c
 8007564:	7ff00000 	.word	0x7ff00000
 8007568:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800756a:	1c55      	adds	r5, r2, #1
 800756c:	9511      	str	r5, [sp, #68]	; 0x44
 800756e:	7852      	ldrb	r2, [r2, #1]
 8007570:	2a30      	cmp	r2, #48	; 0x30
 8007572:	d0f9      	beq.n	8007568 <_strtod_l+0x2a8>
 8007574:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8007578:	2d08      	cmp	r5, #8
 800757a:	f63f af78 	bhi.w	800746e <_strtod_l+0x1ae>
 800757e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8007582:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007584:	920a      	str	r2, [sp, #40]	; 0x28
 8007586:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007588:	1c55      	adds	r5, r2, #1
 800758a:	9511      	str	r5, [sp, #68]	; 0x44
 800758c:	7852      	ldrb	r2, [r2, #1]
 800758e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8007592:	2f09      	cmp	r7, #9
 8007594:	d937      	bls.n	8007606 <_strtod_l+0x346>
 8007596:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007598:	1bed      	subs	r5, r5, r7
 800759a:	2d08      	cmp	r5, #8
 800759c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80075a0:	dc02      	bgt.n	80075a8 <_strtod_l+0x2e8>
 80075a2:	4565      	cmp	r5, ip
 80075a4:	bfa8      	it	ge
 80075a6:	4665      	movge	r5, ip
 80075a8:	f1be 0f00 	cmp.w	lr, #0
 80075ac:	d000      	beq.n	80075b0 <_strtod_l+0x2f0>
 80075ae:	426d      	negs	r5, r5
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d14d      	bne.n	8007650 <_strtod_l+0x390>
 80075b4:	9b06      	ldr	r3, [sp, #24]
 80075b6:	4303      	orrs	r3, r0
 80075b8:	f47f aebd 	bne.w	8007336 <_strtod_l+0x76>
 80075bc:	2900      	cmp	r1, #0
 80075be:	f47f aed6 	bne.w	800736e <_strtod_l+0xae>
 80075c2:	2a69      	cmp	r2, #105	; 0x69
 80075c4:	d027      	beq.n	8007616 <_strtod_l+0x356>
 80075c6:	dc24      	bgt.n	8007612 <_strtod_l+0x352>
 80075c8:	2a49      	cmp	r2, #73	; 0x49
 80075ca:	d024      	beq.n	8007616 <_strtod_l+0x356>
 80075cc:	2a4e      	cmp	r2, #78	; 0x4e
 80075ce:	f47f aece 	bne.w	800736e <_strtod_l+0xae>
 80075d2:	4995      	ldr	r1, [pc, #596]	; (8007828 <_strtod_l+0x568>)
 80075d4:	a811      	add	r0, sp, #68	; 0x44
 80075d6:	f001 f9e3 	bl	80089a0 <__match>
 80075da:	2800      	cmp	r0, #0
 80075dc:	f43f aec7 	beq.w	800736e <_strtod_l+0xae>
 80075e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	2b28      	cmp	r3, #40	; 0x28
 80075e6:	d12d      	bne.n	8007644 <_strtod_l+0x384>
 80075e8:	4990      	ldr	r1, [pc, #576]	; (800782c <_strtod_l+0x56c>)
 80075ea:	aa14      	add	r2, sp, #80	; 0x50
 80075ec:	a811      	add	r0, sp, #68	; 0x44
 80075ee:	f001 f9eb 	bl	80089c8 <__hexnan>
 80075f2:	2805      	cmp	r0, #5
 80075f4:	d126      	bne.n	8007644 <_strtod_l+0x384>
 80075f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075f8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80075fc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007600:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007604:	e697      	b.n	8007336 <_strtod_l+0x76>
 8007606:	250a      	movs	r5, #10
 8007608:	fb05 2c0c 	mla	ip, r5, ip, r2
 800760c:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8007610:	e7b9      	b.n	8007586 <_strtod_l+0x2c6>
 8007612:	2a6e      	cmp	r2, #110	; 0x6e
 8007614:	e7db      	b.n	80075ce <_strtod_l+0x30e>
 8007616:	4986      	ldr	r1, [pc, #536]	; (8007830 <_strtod_l+0x570>)
 8007618:	a811      	add	r0, sp, #68	; 0x44
 800761a:	f001 f9c1 	bl	80089a0 <__match>
 800761e:	2800      	cmp	r0, #0
 8007620:	f43f aea5 	beq.w	800736e <_strtod_l+0xae>
 8007624:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007626:	4983      	ldr	r1, [pc, #524]	; (8007834 <_strtod_l+0x574>)
 8007628:	3b01      	subs	r3, #1
 800762a:	a811      	add	r0, sp, #68	; 0x44
 800762c:	9311      	str	r3, [sp, #68]	; 0x44
 800762e:	f001 f9b7 	bl	80089a0 <__match>
 8007632:	b910      	cbnz	r0, 800763a <_strtod_l+0x37a>
 8007634:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007636:	3301      	adds	r3, #1
 8007638:	9311      	str	r3, [sp, #68]	; 0x44
 800763a:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8007848 <_strtod_l+0x588>
 800763e:	f04f 0800 	mov.w	r8, #0
 8007642:	e678      	b.n	8007336 <_strtod_l+0x76>
 8007644:	487c      	ldr	r0, [pc, #496]	; (8007838 <_strtod_l+0x578>)
 8007646:	f000 fec7 	bl	80083d8 <nan>
 800764a:	ec59 8b10 	vmov	r8, r9, d0
 800764e:	e672      	b.n	8007336 <_strtod_l+0x76>
 8007650:	eddd 7a07 	vldr	s15, [sp, #28]
 8007654:	eba5 020b 	sub.w	r2, r5, fp
 8007658:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800765c:	2e00      	cmp	r6, #0
 800765e:	bf08      	it	eq
 8007660:	461e      	moveq	r6, r3
 8007662:	2b10      	cmp	r3, #16
 8007664:	9206      	str	r2, [sp, #24]
 8007666:	461a      	mov	r2, r3
 8007668:	bfa8      	it	ge
 800766a:	2210      	movge	r2, #16
 800766c:	2b09      	cmp	r3, #9
 800766e:	ec59 8b17 	vmov	r8, r9, d7
 8007672:	dd0c      	ble.n	800768e <_strtod_l+0x3ce>
 8007674:	4971      	ldr	r1, [pc, #452]	; (800783c <_strtod_l+0x57c>)
 8007676:	eddd 6a05 	vldr	s13, [sp, #20]
 800767a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800767e:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8007682:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8007686:	eea7 6b05 	vfma.f64	d6, d7, d5
 800768a:	ec59 8b16 	vmov	r8, r9, d6
 800768e:	2b0f      	cmp	r3, #15
 8007690:	dc37      	bgt.n	8007702 <_strtod_l+0x442>
 8007692:	9906      	ldr	r1, [sp, #24]
 8007694:	2900      	cmp	r1, #0
 8007696:	f43f ae4e 	beq.w	8007336 <_strtod_l+0x76>
 800769a:	dd23      	ble.n	80076e4 <_strtod_l+0x424>
 800769c:	2916      	cmp	r1, #22
 800769e:	dc0b      	bgt.n	80076b8 <_strtod_l+0x3f8>
 80076a0:	4b66      	ldr	r3, [pc, #408]	; (800783c <_strtod_l+0x57c>)
 80076a2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80076a6:	ed93 7b00 	vldr	d7, [r3]
 80076aa:	ec49 8b16 	vmov	d6, r8, r9
 80076ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80076b2:	ec59 8b17 	vmov	r8, r9, d7
 80076b6:	e63e      	b.n	8007336 <_strtod_l+0x76>
 80076b8:	9806      	ldr	r0, [sp, #24]
 80076ba:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80076be:	4281      	cmp	r1, r0
 80076c0:	db1f      	blt.n	8007702 <_strtod_l+0x442>
 80076c2:	4a5e      	ldr	r2, [pc, #376]	; (800783c <_strtod_l+0x57c>)
 80076c4:	f1c3 030f 	rsb	r3, r3, #15
 80076c8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80076cc:	ed91 7b00 	vldr	d7, [r1]
 80076d0:	ec49 8b16 	vmov	d6, r8, r9
 80076d4:	1ac3      	subs	r3, r0, r3
 80076d6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80076da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80076de:	ed92 6b00 	vldr	d6, [r2]
 80076e2:	e7e4      	b.n	80076ae <_strtod_l+0x3ee>
 80076e4:	9906      	ldr	r1, [sp, #24]
 80076e6:	3116      	adds	r1, #22
 80076e8:	db0b      	blt.n	8007702 <_strtod_l+0x442>
 80076ea:	4b54      	ldr	r3, [pc, #336]	; (800783c <_strtod_l+0x57c>)
 80076ec:	ebab 0505 	sub.w	r5, fp, r5
 80076f0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80076f4:	ed95 7b00 	vldr	d7, [r5]
 80076f8:	ec49 8b16 	vmov	d6, r8, r9
 80076fc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007700:	e7d7      	b.n	80076b2 <_strtod_l+0x3f2>
 8007702:	9906      	ldr	r1, [sp, #24]
 8007704:	1a9a      	subs	r2, r3, r2
 8007706:	440a      	add	r2, r1
 8007708:	2a00      	cmp	r2, #0
 800770a:	dd6e      	ble.n	80077ea <_strtod_l+0x52a>
 800770c:	f012 000f 	ands.w	r0, r2, #15
 8007710:	d00a      	beq.n	8007728 <_strtod_l+0x468>
 8007712:	494a      	ldr	r1, [pc, #296]	; (800783c <_strtod_l+0x57c>)
 8007714:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007718:	ed91 7b00 	vldr	d7, [r1]
 800771c:	ec49 8b16 	vmov	d6, r8, r9
 8007720:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007724:	ec59 8b17 	vmov	r8, r9, d7
 8007728:	f032 020f 	bics.w	r2, r2, #15
 800772c:	d04e      	beq.n	80077cc <_strtod_l+0x50c>
 800772e:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8007732:	dd22      	ble.n	800777a <_strtod_l+0x4ba>
 8007734:	2500      	movs	r5, #0
 8007736:	462e      	mov	r6, r5
 8007738:	9507      	str	r5, [sp, #28]
 800773a:	462f      	mov	r7, r5
 800773c:	2322      	movs	r3, #34	; 0x22
 800773e:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007848 <_strtod_l+0x588>
 8007742:	6023      	str	r3, [r4, #0]
 8007744:	f04f 0800 	mov.w	r8, #0
 8007748:	9b07      	ldr	r3, [sp, #28]
 800774a:	2b00      	cmp	r3, #0
 800774c:	f43f adf3 	beq.w	8007336 <_strtod_l+0x76>
 8007750:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007752:	4620      	mov	r0, r4
 8007754:	f7ff f930 	bl	80069b8 <_Bfree>
 8007758:	4639      	mov	r1, r7
 800775a:	4620      	mov	r0, r4
 800775c:	f7ff f92c 	bl	80069b8 <_Bfree>
 8007760:	4631      	mov	r1, r6
 8007762:	4620      	mov	r0, r4
 8007764:	f7ff f928 	bl	80069b8 <_Bfree>
 8007768:	9907      	ldr	r1, [sp, #28]
 800776a:	4620      	mov	r0, r4
 800776c:	f7ff f924 	bl	80069b8 <_Bfree>
 8007770:	4629      	mov	r1, r5
 8007772:	4620      	mov	r0, r4
 8007774:	f7ff f920 	bl	80069b8 <_Bfree>
 8007778:	e5dd      	b.n	8007336 <_strtod_l+0x76>
 800777a:	2000      	movs	r0, #0
 800777c:	ec49 8b17 	vmov	d7, r8, r9
 8007780:	4f2f      	ldr	r7, [pc, #188]	; (8007840 <_strtod_l+0x580>)
 8007782:	1112      	asrs	r2, r2, #4
 8007784:	4601      	mov	r1, r0
 8007786:	2a01      	cmp	r2, #1
 8007788:	dc23      	bgt.n	80077d2 <_strtod_l+0x512>
 800778a:	b108      	cbz	r0, 8007790 <_strtod_l+0x4d0>
 800778c:	ec59 8b17 	vmov	r8, r9, d7
 8007790:	4a2b      	ldr	r2, [pc, #172]	; (8007840 <_strtod_l+0x580>)
 8007792:	482c      	ldr	r0, [pc, #176]	; (8007844 <_strtod_l+0x584>)
 8007794:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007798:	ed92 7b00 	vldr	d7, [r2]
 800779c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80077a0:	ec49 8b16 	vmov	d6, r8, r9
 80077a4:	4a28      	ldr	r2, [pc, #160]	; (8007848 <_strtod_l+0x588>)
 80077a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80077aa:	ee17 1a90 	vmov	r1, s15
 80077ae:	400a      	ands	r2, r1
 80077b0:	4282      	cmp	r2, r0
 80077b2:	ec59 8b17 	vmov	r8, r9, d7
 80077b6:	d8bd      	bhi.n	8007734 <_strtod_l+0x474>
 80077b8:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80077bc:	4282      	cmp	r2, r0
 80077be:	bf86      	itte	hi
 80077c0:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 800784c <_strtod_l+0x58c>
 80077c4:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80077c8:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 80077cc:	2200      	movs	r2, #0
 80077ce:	9205      	str	r2, [sp, #20]
 80077d0:	e076      	b.n	80078c0 <_strtod_l+0x600>
 80077d2:	f012 0f01 	tst.w	r2, #1
 80077d6:	d004      	beq.n	80077e2 <_strtod_l+0x522>
 80077d8:	ed97 6b00 	vldr	d6, [r7]
 80077dc:	2001      	movs	r0, #1
 80077de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80077e2:	3101      	adds	r1, #1
 80077e4:	1052      	asrs	r2, r2, #1
 80077e6:	3708      	adds	r7, #8
 80077e8:	e7cd      	b.n	8007786 <_strtod_l+0x4c6>
 80077ea:	d0ef      	beq.n	80077cc <_strtod_l+0x50c>
 80077ec:	4252      	negs	r2, r2
 80077ee:	f012 000f 	ands.w	r0, r2, #15
 80077f2:	d00a      	beq.n	800780a <_strtod_l+0x54a>
 80077f4:	4911      	ldr	r1, [pc, #68]	; (800783c <_strtod_l+0x57c>)
 80077f6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80077fa:	ed91 7b00 	vldr	d7, [r1]
 80077fe:	ec49 8b16 	vmov	d6, r8, r9
 8007802:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007806:	ec59 8b17 	vmov	r8, r9, d7
 800780a:	1112      	asrs	r2, r2, #4
 800780c:	d0de      	beq.n	80077cc <_strtod_l+0x50c>
 800780e:	2a1f      	cmp	r2, #31
 8007810:	dd1e      	ble.n	8007850 <_strtod_l+0x590>
 8007812:	2500      	movs	r5, #0
 8007814:	462e      	mov	r6, r5
 8007816:	9507      	str	r5, [sp, #28]
 8007818:	462f      	mov	r7, r5
 800781a:	2322      	movs	r3, #34	; 0x22
 800781c:	f04f 0800 	mov.w	r8, #0
 8007820:	f04f 0900 	mov.w	r9, #0
 8007824:	6023      	str	r3, [r4, #0]
 8007826:	e78f      	b.n	8007748 <_strtod_l+0x488>
 8007828:	08009189 	.word	0x08009189
 800782c:	080093b4 	.word	0x080093b4
 8007830:	08009181 	.word	0x08009181
 8007834:	080091b8 	.word	0x080091b8
 8007838:	08009545 	.word	0x08009545
 800783c:	080092c8 	.word	0x080092c8
 8007840:	080092a0 	.word	0x080092a0
 8007844:	7ca00000 	.word	0x7ca00000
 8007848:	7ff00000 	.word	0x7ff00000
 800784c:	7fefffff 	.word	0x7fefffff
 8007850:	f012 0110 	ands.w	r1, r2, #16
 8007854:	bf18      	it	ne
 8007856:	216a      	movne	r1, #106	; 0x6a
 8007858:	9105      	str	r1, [sp, #20]
 800785a:	ec49 8b17 	vmov	d7, r8, r9
 800785e:	49be      	ldr	r1, [pc, #760]	; (8007b58 <_strtod_l+0x898>)
 8007860:	2000      	movs	r0, #0
 8007862:	07d7      	lsls	r7, r2, #31
 8007864:	d504      	bpl.n	8007870 <_strtod_l+0x5b0>
 8007866:	ed91 6b00 	vldr	d6, [r1]
 800786a:	2001      	movs	r0, #1
 800786c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007870:	1052      	asrs	r2, r2, #1
 8007872:	f101 0108 	add.w	r1, r1, #8
 8007876:	d1f4      	bne.n	8007862 <_strtod_l+0x5a2>
 8007878:	b108      	cbz	r0, 800787e <_strtod_l+0x5be>
 800787a:	ec59 8b17 	vmov	r8, r9, d7
 800787e:	9a05      	ldr	r2, [sp, #20]
 8007880:	b1ba      	cbz	r2, 80078b2 <_strtod_l+0x5f2>
 8007882:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8007886:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800788a:	2a00      	cmp	r2, #0
 800788c:	4648      	mov	r0, r9
 800788e:	dd10      	ble.n	80078b2 <_strtod_l+0x5f2>
 8007890:	2a1f      	cmp	r2, #31
 8007892:	f340 812c 	ble.w	8007aee <_strtod_l+0x82e>
 8007896:	2a34      	cmp	r2, #52	; 0x34
 8007898:	bfde      	ittt	le
 800789a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800789e:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 80078a2:	408a      	lslle	r2, r1
 80078a4:	f04f 0800 	mov.w	r8, #0
 80078a8:	bfcc      	ite	gt
 80078aa:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80078ae:	ea02 0900 	andle.w	r9, r2, r0
 80078b2:	ec49 8b17 	vmov	d7, r8, r9
 80078b6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80078ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078be:	d0a8      	beq.n	8007812 <_strtod_l+0x552>
 80078c0:	9a07      	ldr	r2, [sp, #28]
 80078c2:	9200      	str	r2, [sp, #0]
 80078c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078c6:	4632      	mov	r2, r6
 80078c8:	4620      	mov	r0, r4
 80078ca:	f7ff f8dd 	bl	8006a88 <__s2b>
 80078ce:	9007      	str	r0, [sp, #28]
 80078d0:	2800      	cmp	r0, #0
 80078d2:	f43f af2f 	beq.w	8007734 <_strtod_l+0x474>
 80078d6:	9a06      	ldr	r2, [sp, #24]
 80078d8:	2a00      	cmp	r2, #0
 80078da:	ebab 0305 	sub.w	r3, fp, r5
 80078de:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8007b38 <_strtod_l+0x878>
 80078e2:	bfa8      	it	ge
 80078e4:	2300      	movge	r3, #0
 80078e6:	ed9f ab96 	vldr	d10, [pc, #600]	; 8007b40 <_strtod_l+0x880>
 80078ea:	ed9f bb97 	vldr	d11, [pc, #604]	; 8007b48 <_strtod_l+0x888>
 80078ee:	9309      	str	r3, [sp, #36]	; 0x24
 80078f0:	2500      	movs	r5, #0
 80078f2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80078f6:	930c      	str	r3, [sp, #48]	; 0x30
 80078f8:	462e      	mov	r6, r5
 80078fa:	9b07      	ldr	r3, [sp, #28]
 80078fc:	4620      	mov	r0, r4
 80078fe:	6859      	ldr	r1, [r3, #4]
 8007900:	f7ff f81a 	bl	8006938 <_Balloc>
 8007904:	4607      	mov	r7, r0
 8007906:	2800      	cmp	r0, #0
 8007908:	f43f af18 	beq.w	800773c <_strtod_l+0x47c>
 800790c:	9b07      	ldr	r3, [sp, #28]
 800790e:	691a      	ldr	r2, [r3, #16]
 8007910:	3202      	adds	r2, #2
 8007912:	f103 010c 	add.w	r1, r3, #12
 8007916:	0092      	lsls	r2, r2, #2
 8007918:	300c      	adds	r0, #12
 800791a:	f000 fd4f 	bl	80083bc <memcpy>
 800791e:	ec49 8b10 	vmov	d0, r8, r9
 8007922:	aa14      	add	r2, sp, #80	; 0x50
 8007924:	a913      	add	r1, sp, #76	; 0x4c
 8007926:	4620      	mov	r0, r4
 8007928:	f7ff fbe2 	bl	80070f0 <__d2b>
 800792c:	ec49 8b18 	vmov	d8, r8, r9
 8007930:	9012      	str	r0, [sp, #72]	; 0x48
 8007932:	2800      	cmp	r0, #0
 8007934:	f43f af02 	beq.w	800773c <_strtod_l+0x47c>
 8007938:	2101      	movs	r1, #1
 800793a:	4620      	mov	r0, r4
 800793c:	f7ff f93c 	bl	8006bb8 <__i2b>
 8007940:	4606      	mov	r6, r0
 8007942:	2800      	cmp	r0, #0
 8007944:	f43f aefa 	beq.w	800773c <_strtod_l+0x47c>
 8007948:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800794a:	9914      	ldr	r1, [sp, #80]	; 0x50
 800794c:	2b00      	cmp	r3, #0
 800794e:	bfab      	itete	ge
 8007950:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8007952:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8007954:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8007958:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800795c:	bfac      	ite	ge
 800795e:	eb03 0b02 	addge.w	fp, r3, r2
 8007962:	eba2 0a03 	sublt.w	sl, r2, r3
 8007966:	9a05      	ldr	r2, [sp, #20]
 8007968:	1a9b      	subs	r3, r3, r2
 800796a:	440b      	add	r3, r1
 800796c:	4a7b      	ldr	r2, [pc, #492]	; (8007b5c <_strtod_l+0x89c>)
 800796e:	3b01      	subs	r3, #1
 8007970:	4293      	cmp	r3, r2
 8007972:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8007976:	f280 80cd 	bge.w	8007b14 <_strtod_l+0x854>
 800797a:	1ad2      	subs	r2, r2, r3
 800797c:	2a1f      	cmp	r2, #31
 800797e:	eba1 0102 	sub.w	r1, r1, r2
 8007982:	f04f 0001 	mov.w	r0, #1
 8007986:	f300 80b9 	bgt.w	8007afc <_strtod_l+0x83c>
 800798a:	fa00 f302 	lsl.w	r3, r0, r2
 800798e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007990:	2300      	movs	r3, #0
 8007992:	930a      	str	r3, [sp, #40]	; 0x28
 8007994:	eb0b 0301 	add.w	r3, fp, r1
 8007998:	9a05      	ldr	r2, [sp, #20]
 800799a:	459b      	cmp	fp, r3
 800799c:	448a      	add	sl, r1
 800799e:	4492      	add	sl, r2
 80079a0:	465a      	mov	r2, fp
 80079a2:	bfa8      	it	ge
 80079a4:	461a      	movge	r2, r3
 80079a6:	4552      	cmp	r2, sl
 80079a8:	bfa8      	it	ge
 80079aa:	4652      	movge	r2, sl
 80079ac:	2a00      	cmp	r2, #0
 80079ae:	bfc2      	ittt	gt
 80079b0:	1a9b      	subgt	r3, r3, r2
 80079b2:	ebaa 0a02 	subgt.w	sl, sl, r2
 80079b6:	ebab 0b02 	subgt.w	fp, fp, r2
 80079ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079bc:	2a00      	cmp	r2, #0
 80079be:	dd18      	ble.n	80079f2 <_strtod_l+0x732>
 80079c0:	4631      	mov	r1, r6
 80079c2:	4620      	mov	r0, r4
 80079c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80079c6:	f7ff f9b7 	bl	8006d38 <__pow5mult>
 80079ca:	4606      	mov	r6, r0
 80079cc:	2800      	cmp	r0, #0
 80079ce:	f43f aeb5 	beq.w	800773c <_strtod_l+0x47c>
 80079d2:	4601      	mov	r1, r0
 80079d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80079d6:	4620      	mov	r0, r4
 80079d8:	f7ff f904 	bl	8006be4 <__multiply>
 80079dc:	900e      	str	r0, [sp, #56]	; 0x38
 80079de:	2800      	cmp	r0, #0
 80079e0:	f43f aeac 	beq.w	800773c <_strtod_l+0x47c>
 80079e4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80079e6:	4620      	mov	r0, r4
 80079e8:	f7fe ffe6 	bl	80069b8 <_Bfree>
 80079ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079f0:	9212      	str	r2, [sp, #72]	; 0x48
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	f300 8093 	bgt.w	8007b1e <_strtod_l+0x85e>
 80079f8:	9b06      	ldr	r3, [sp, #24]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	dd08      	ble.n	8007a10 <_strtod_l+0x750>
 80079fe:	4639      	mov	r1, r7
 8007a00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a02:	4620      	mov	r0, r4
 8007a04:	f7ff f998 	bl	8006d38 <__pow5mult>
 8007a08:	4607      	mov	r7, r0
 8007a0a:	2800      	cmp	r0, #0
 8007a0c:	f43f ae96 	beq.w	800773c <_strtod_l+0x47c>
 8007a10:	f1ba 0f00 	cmp.w	sl, #0
 8007a14:	dd08      	ble.n	8007a28 <_strtod_l+0x768>
 8007a16:	4639      	mov	r1, r7
 8007a18:	4652      	mov	r2, sl
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f7ff f9e6 	bl	8006dec <__lshift>
 8007a20:	4607      	mov	r7, r0
 8007a22:	2800      	cmp	r0, #0
 8007a24:	f43f ae8a 	beq.w	800773c <_strtod_l+0x47c>
 8007a28:	f1bb 0f00 	cmp.w	fp, #0
 8007a2c:	dd08      	ble.n	8007a40 <_strtod_l+0x780>
 8007a2e:	4631      	mov	r1, r6
 8007a30:	465a      	mov	r2, fp
 8007a32:	4620      	mov	r0, r4
 8007a34:	f7ff f9da 	bl	8006dec <__lshift>
 8007a38:	4606      	mov	r6, r0
 8007a3a:	2800      	cmp	r0, #0
 8007a3c:	f43f ae7e 	beq.w	800773c <_strtod_l+0x47c>
 8007a40:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007a42:	463a      	mov	r2, r7
 8007a44:	4620      	mov	r0, r4
 8007a46:	f7ff fa59 	bl	8006efc <__mdiff>
 8007a4a:	4605      	mov	r5, r0
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	f43f ae75 	beq.w	800773c <_strtod_l+0x47c>
 8007a52:	2300      	movs	r3, #0
 8007a54:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8007a58:	60c3      	str	r3, [r0, #12]
 8007a5a:	4631      	mov	r1, r6
 8007a5c:	f7ff fa32 	bl	8006ec4 <__mcmp>
 8007a60:	2800      	cmp	r0, #0
 8007a62:	da7f      	bge.n	8007b64 <_strtod_l+0x8a4>
 8007a64:	ea5a 0a08 	orrs.w	sl, sl, r8
 8007a68:	f040 80a5 	bne.w	8007bb6 <_strtod_l+0x8f6>
 8007a6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f040 80a0 	bne.w	8007bb6 <_strtod_l+0x8f6>
 8007a76:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a7a:	0d1b      	lsrs	r3, r3, #20
 8007a7c:	051b      	lsls	r3, r3, #20
 8007a7e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007a82:	f240 8098 	bls.w	8007bb6 <_strtod_l+0x8f6>
 8007a86:	696b      	ldr	r3, [r5, #20]
 8007a88:	b91b      	cbnz	r3, 8007a92 <_strtod_l+0x7d2>
 8007a8a:	692b      	ldr	r3, [r5, #16]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	f340 8092 	ble.w	8007bb6 <_strtod_l+0x8f6>
 8007a92:	4629      	mov	r1, r5
 8007a94:	2201      	movs	r2, #1
 8007a96:	4620      	mov	r0, r4
 8007a98:	f7ff f9a8 	bl	8006dec <__lshift>
 8007a9c:	4631      	mov	r1, r6
 8007a9e:	4605      	mov	r5, r0
 8007aa0:	f7ff fa10 	bl	8006ec4 <__mcmp>
 8007aa4:	2800      	cmp	r0, #0
 8007aa6:	f340 8086 	ble.w	8007bb6 <_strtod_l+0x8f6>
 8007aaa:	9905      	ldr	r1, [sp, #20]
 8007aac:	4a2c      	ldr	r2, [pc, #176]	; (8007b60 <_strtod_l+0x8a0>)
 8007aae:	464b      	mov	r3, r9
 8007ab0:	2900      	cmp	r1, #0
 8007ab2:	f000 809f 	beq.w	8007bf4 <_strtod_l+0x934>
 8007ab6:	ea02 0109 	and.w	r1, r2, r9
 8007aba:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007abe:	f300 8099 	bgt.w	8007bf4 <_strtod_l+0x934>
 8007ac2:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007ac6:	f77f aea8 	ble.w	800781a <_strtod_l+0x55a>
 8007aca:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8007b50 <_strtod_l+0x890>
 8007ace:	ec49 8b16 	vmov	d6, r8, r9
 8007ad2:	4b23      	ldr	r3, [pc, #140]	; (8007b60 <_strtod_l+0x8a0>)
 8007ad4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007ad8:	ee17 2a90 	vmov	r2, s15
 8007adc:	4013      	ands	r3, r2
 8007ade:	ec59 8b17 	vmov	r8, r9, d7
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f47f ae34 	bne.w	8007750 <_strtod_l+0x490>
 8007ae8:	2322      	movs	r3, #34	; 0x22
 8007aea:	6023      	str	r3, [r4, #0]
 8007aec:	e630      	b.n	8007750 <_strtod_l+0x490>
 8007aee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007af2:	fa01 f202 	lsl.w	r2, r1, r2
 8007af6:	ea02 0808 	and.w	r8, r2, r8
 8007afa:	e6da      	b.n	80078b2 <_strtod_l+0x5f2>
 8007afc:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8007b00:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8007b04:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8007b08:	33e2      	adds	r3, #226	; 0xe2
 8007b0a:	fa00 f303 	lsl.w	r3, r0, r3
 8007b0e:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8007b12:	e73f      	b.n	8007994 <_strtod_l+0x6d4>
 8007b14:	2200      	movs	r2, #0
 8007b16:	2301      	movs	r3, #1
 8007b18:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007b1c:	e73a      	b.n	8007994 <_strtod_l+0x6d4>
 8007b1e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007b20:	461a      	mov	r2, r3
 8007b22:	4620      	mov	r0, r4
 8007b24:	f7ff f962 	bl	8006dec <__lshift>
 8007b28:	9012      	str	r0, [sp, #72]	; 0x48
 8007b2a:	2800      	cmp	r0, #0
 8007b2c:	f47f af64 	bne.w	80079f8 <_strtod_l+0x738>
 8007b30:	e604      	b.n	800773c <_strtod_l+0x47c>
 8007b32:	bf00      	nop
 8007b34:	f3af 8000 	nop.w
 8007b38:	94a03595 	.word	0x94a03595
 8007b3c:	3fcfffff 	.word	0x3fcfffff
 8007b40:	94a03595 	.word	0x94a03595
 8007b44:	3fdfffff 	.word	0x3fdfffff
 8007b48:	35afe535 	.word	0x35afe535
 8007b4c:	3fe00000 	.word	0x3fe00000
 8007b50:	00000000 	.word	0x00000000
 8007b54:	39500000 	.word	0x39500000
 8007b58:	080093c8 	.word	0x080093c8
 8007b5c:	fffffc02 	.word	0xfffffc02
 8007b60:	7ff00000 	.word	0x7ff00000
 8007b64:	46cb      	mov	fp, r9
 8007b66:	d15f      	bne.n	8007c28 <_strtod_l+0x968>
 8007b68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b6c:	f1ba 0f00 	cmp.w	sl, #0
 8007b70:	d02a      	beq.n	8007bc8 <_strtod_l+0x908>
 8007b72:	4aa7      	ldr	r2, [pc, #668]	; (8007e10 <_strtod_l+0xb50>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d12b      	bne.n	8007bd0 <_strtod_l+0x910>
 8007b78:	9b05      	ldr	r3, [sp, #20]
 8007b7a:	4642      	mov	r2, r8
 8007b7c:	b1fb      	cbz	r3, 8007bbe <_strtod_l+0x8fe>
 8007b7e:	4ba5      	ldr	r3, [pc, #660]	; (8007e14 <_strtod_l+0xb54>)
 8007b80:	ea09 0303 	and.w	r3, r9, r3
 8007b84:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007b88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007b8c:	d81a      	bhi.n	8007bc4 <_strtod_l+0x904>
 8007b8e:	0d1b      	lsrs	r3, r3, #20
 8007b90:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007b94:	fa01 f303 	lsl.w	r3, r1, r3
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d119      	bne.n	8007bd0 <_strtod_l+0x910>
 8007b9c:	4b9e      	ldr	r3, [pc, #632]	; (8007e18 <_strtod_l+0xb58>)
 8007b9e:	459b      	cmp	fp, r3
 8007ba0:	d102      	bne.n	8007ba8 <_strtod_l+0x8e8>
 8007ba2:	3201      	adds	r2, #1
 8007ba4:	f43f adca 	beq.w	800773c <_strtod_l+0x47c>
 8007ba8:	4b9a      	ldr	r3, [pc, #616]	; (8007e14 <_strtod_l+0xb54>)
 8007baa:	ea0b 0303 	and.w	r3, fp, r3
 8007bae:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007bb2:	f04f 0800 	mov.w	r8, #0
 8007bb6:	9b05      	ldr	r3, [sp, #20]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d186      	bne.n	8007aca <_strtod_l+0x80a>
 8007bbc:	e5c8      	b.n	8007750 <_strtod_l+0x490>
 8007bbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bc2:	e7e9      	b.n	8007b98 <_strtod_l+0x8d8>
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	e7e7      	b.n	8007b98 <_strtod_l+0x8d8>
 8007bc8:	ea53 0308 	orrs.w	r3, r3, r8
 8007bcc:	f43f af6d 	beq.w	8007aaa <_strtod_l+0x7ea>
 8007bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bd2:	b1cb      	cbz	r3, 8007c08 <_strtod_l+0x948>
 8007bd4:	ea13 0f0b 	tst.w	r3, fp
 8007bd8:	d0ed      	beq.n	8007bb6 <_strtod_l+0x8f6>
 8007bda:	9a05      	ldr	r2, [sp, #20]
 8007bdc:	4640      	mov	r0, r8
 8007bde:	4649      	mov	r1, r9
 8007be0:	f1ba 0f00 	cmp.w	sl, #0
 8007be4:	d014      	beq.n	8007c10 <_strtod_l+0x950>
 8007be6:	f7ff fb51 	bl	800728c <sulp>
 8007bea:	ee38 7b00 	vadd.f64	d7, d8, d0
 8007bee:	ec59 8b17 	vmov	r8, r9, d7
 8007bf2:	e7e0      	b.n	8007bb6 <_strtod_l+0x8f6>
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007bfa:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007bfe:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007c02:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8007c06:	e7d6      	b.n	8007bb6 <_strtod_l+0x8f6>
 8007c08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c0a:	ea13 0f08 	tst.w	r3, r8
 8007c0e:	e7e3      	b.n	8007bd8 <_strtod_l+0x918>
 8007c10:	f7ff fb3c 	bl	800728c <sulp>
 8007c14:	ee38 0b40 	vsub.f64	d0, d8, d0
 8007c18:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8007c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c20:	ec59 8b10 	vmov	r8, r9, d0
 8007c24:	d1c7      	bne.n	8007bb6 <_strtod_l+0x8f6>
 8007c26:	e5f8      	b.n	800781a <_strtod_l+0x55a>
 8007c28:	4631      	mov	r1, r6
 8007c2a:	4628      	mov	r0, r5
 8007c2c:	f7ff faba 	bl	80071a4 <__ratio>
 8007c30:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8007c34:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c3c:	d85f      	bhi.n	8007cfe <_strtod_l+0xa3e>
 8007c3e:	f1ba 0f00 	cmp.w	sl, #0
 8007c42:	d166      	bne.n	8007d12 <_strtod_l+0xa52>
 8007c44:	f1b8 0f00 	cmp.w	r8, #0
 8007c48:	d14d      	bne.n	8007ce6 <_strtod_l+0xa26>
 8007c4a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c4e:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d162      	bne.n	8007d1c <_strtod_l+0xa5c>
 8007c56:	eeb4 0bcd 	vcmpe.f64	d0, d13
 8007c5a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8007c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c62:	d401      	bmi.n	8007c68 <_strtod_l+0x9a8>
 8007c64:	ee20 db0d 	vmul.f64	d13, d0, d13
 8007c68:	eeb1 cb4d 	vneg.f64	d12, d13
 8007c6c:	4869      	ldr	r0, [pc, #420]	; (8007e14 <_strtod_l+0xb54>)
 8007c6e:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8007e20 <_strtod_l+0xb60>
 8007c72:	ea0b 0100 	and.w	r1, fp, r0
 8007c76:	4561      	cmp	r1, ip
 8007c78:	ec53 2b1c 	vmov	r2, r3, d12
 8007c7c:	d17a      	bne.n	8007d74 <_strtod_l+0xab4>
 8007c7e:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8007c82:	ec49 8b10 	vmov	d0, r8, r9
 8007c86:	910a      	str	r1, [sp, #40]	; 0x28
 8007c88:	f7ff f9c2 	bl	8007010 <__ulp>
 8007c8c:	ec49 8b1e 	vmov	d14, r8, r9
 8007c90:	4860      	ldr	r0, [pc, #384]	; (8007e14 <_strtod_l+0xb54>)
 8007c92:	eea0 eb0c 	vfma.f64	d14, d0, d12
 8007c96:	ee1e 3a90 	vmov	r3, s29
 8007c9a:	4a60      	ldr	r2, [pc, #384]	; (8007e1c <_strtod_l+0xb5c>)
 8007c9c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007c9e:	4018      	ands	r0, r3
 8007ca0:	4290      	cmp	r0, r2
 8007ca2:	ec59 8b1e 	vmov	r8, r9, d14
 8007ca6:	d93c      	bls.n	8007d22 <_strtod_l+0xa62>
 8007ca8:	ee18 2a90 	vmov	r2, s17
 8007cac:	4b5a      	ldr	r3, [pc, #360]	; (8007e18 <_strtod_l+0xb58>)
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d104      	bne.n	8007cbc <_strtod_l+0x9fc>
 8007cb2:	ee18 3a10 	vmov	r3, s16
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	f43f ad40 	beq.w	800773c <_strtod_l+0x47c>
 8007cbc:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8007e18 <_strtod_l+0xb58>
 8007cc0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8007cc4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	f7fe fe76 	bl	80069b8 <_Bfree>
 8007ccc:	4639      	mov	r1, r7
 8007cce:	4620      	mov	r0, r4
 8007cd0:	f7fe fe72 	bl	80069b8 <_Bfree>
 8007cd4:	4631      	mov	r1, r6
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	f7fe fe6e 	bl	80069b8 <_Bfree>
 8007cdc:	4629      	mov	r1, r5
 8007cde:	4620      	mov	r0, r4
 8007ce0:	f7fe fe6a 	bl	80069b8 <_Bfree>
 8007ce4:	e609      	b.n	80078fa <_strtod_l+0x63a>
 8007ce6:	f1b8 0f01 	cmp.w	r8, #1
 8007cea:	d103      	bne.n	8007cf4 <_strtod_l+0xa34>
 8007cec:	f1b9 0f00 	cmp.w	r9, #0
 8007cf0:	f43f ad93 	beq.w	800781a <_strtod_l+0x55a>
 8007cf4:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8007cf8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8007cfc:	e7b6      	b.n	8007c6c <_strtod_l+0x9ac>
 8007cfe:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8007d02:	ee20 db0d 	vmul.f64	d13, d0, d13
 8007d06:	f1ba 0f00 	cmp.w	sl, #0
 8007d0a:	d0ad      	beq.n	8007c68 <_strtod_l+0x9a8>
 8007d0c:	eeb0 cb4d 	vmov.f64	d12, d13
 8007d10:	e7ac      	b.n	8007c6c <_strtod_l+0x9ac>
 8007d12:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 8007d16:	eeb0 db4c 	vmov.f64	d13, d12
 8007d1a:	e7a7      	b.n	8007c6c <_strtod_l+0x9ac>
 8007d1c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8007d20:	e7a4      	b.n	8007c6c <_strtod_l+0x9ac>
 8007d22:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007d26:	9b05      	ldr	r3, [sp, #20]
 8007d28:	46cb      	mov	fp, r9
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d1ca      	bne.n	8007cc4 <_strtod_l+0xa04>
 8007d2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007d32:	0d1b      	lsrs	r3, r3, #20
 8007d34:	051b      	lsls	r3, r3, #20
 8007d36:	4299      	cmp	r1, r3
 8007d38:	d1c4      	bne.n	8007cc4 <_strtod_l+0xa04>
 8007d3a:	ec51 0b1d 	vmov	r0, r1, d13
 8007d3e:	f7f8 fcab 	bl	8000698 <__aeabi_d2lz>
 8007d42:	f7f8 fc63 	bl	800060c <__aeabi_l2d>
 8007d46:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 8007d4a:	ec41 0b17 	vmov	d7, r0, r1
 8007d4e:	ea4b 0b08 	orr.w	fp, fp, r8
 8007d52:	ea5b 0b0a 	orrs.w	fp, fp, sl
 8007d56:	ee3d db47 	vsub.f64	d13, d13, d7
 8007d5a:	d03c      	beq.n	8007dd6 <_strtod_l+0xb16>
 8007d5c:	eeb4 dbca 	vcmpe.f64	d13, d10
 8007d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d64:	f53f acf4 	bmi.w	8007750 <_strtod_l+0x490>
 8007d68:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8007d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d70:	dda8      	ble.n	8007cc4 <_strtod_l+0xa04>
 8007d72:	e4ed      	b.n	8007750 <_strtod_l+0x490>
 8007d74:	9805      	ldr	r0, [sp, #20]
 8007d76:	b1f0      	cbz	r0, 8007db6 <_strtod_l+0xaf6>
 8007d78:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8007d7c:	d81b      	bhi.n	8007db6 <_strtod_l+0xaf6>
 8007d7e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8007e08 <_strtod_l+0xb48>
 8007d82:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8007d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d8a:	d811      	bhi.n	8007db0 <_strtod_l+0xaf0>
 8007d8c:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8007d90:	ee1d 3a10 	vmov	r3, s26
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	bf38      	it	cc
 8007d98:	2301      	movcc	r3, #1
 8007d9a:	ee0d 3a10 	vmov	s26, r3
 8007d9e:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8007da2:	f1ba 0f00 	cmp.w	sl, #0
 8007da6:	d113      	bne.n	8007dd0 <_strtod_l+0xb10>
 8007da8:	eeb1 7b4d 	vneg.f64	d7, d13
 8007dac:	ec53 2b17 	vmov	r2, r3, d7
 8007db0:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8007db4:	1a43      	subs	r3, r0, r1
 8007db6:	eeb0 0b48 	vmov.f64	d0, d8
 8007dba:	ec43 2b1c 	vmov	d12, r2, r3
 8007dbe:	910a      	str	r1, [sp, #40]	; 0x28
 8007dc0:	f7ff f926 	bl	8007010 <__ulp>
 8007dc4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007dc6:	eeac 8b00 	vfma.f64	d8, d12, d0
 8007dca:	ec59 8b18 	vmov	r8, r9, d8
 8007dce:	e7aa      	b.n	8007d26 <_strtod_l+0xa66>
 8007dd0:	eeb0 7b4d 	vmov.f64	d7, d13
 8007dd4:	e7ea      	b.n	8007dac <_strtod_l+0xaec>
 8007dd6:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8007dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dde:	f57f af71 	bpl.w	8007cc4 <_strtod_l+0xa04>
 8007de2:	e4b5      	b.n	8007750 <_strtod_l+0x490>
 8007de4:	2300      	movs	r3, #0
 8007de6:	9308      	str	r3, [sp, #32]
 8007de8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007dea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007dec:	6013      	str	r3, [r2, #0]
 8007dee:	f7ff baa6 	b.w	800733e <_strtod_l+0x7e>
 8007df2:	2a65      	cmp	r2, #101	; 0x65
 8007df4:	f43f aba2 	beq.w	800753c <_strtod_l+0x27c>
 8007df8:	2a45      	cmp	r2, #69	; 0x45
 8007dfa:	f43f ab9f 	beq.w	800753c <_strtod_l+0x27c>
 8007dfe:	2101      	movs	r1, #1
 8007e00:	f7ff bbd8 	b.w	80075b4 <_strtod_l+0x2f4>
 8007e04:	f3af 8000 	nop.w
 8007e08:	ffc00000 	.word	0xffc00000
 8007e0c:	41dfffff 	.word	0x41dfffff
 8007e10:	000fffff 	.word	0x000fffff
 8007e14:	7ff00000 	.word	0x7ff00000
 8007e18:	7fefffff 	.word	0x7fefffff
 8007e1c:	7c9fffff 	.word	0x7c9fffff
 8007e20:	7fe00000 	.word	0x7fe00000

08007e24 <_strtod_r>:
 8007e24:	4b01      	ldr	r3, [pc, #4]	; (8007e2c <_strtod_r+0x8>)
 8007e26:	f7ff ba4b 	b.w	80072c0 <_strtod_l>
 8007e2a:	bf00      	nop
 8007e2c:	20000068 	.word	0x20000068

08007e30 <_strtol_l.constprop.0>:
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e36:	d001      	beq.n	8007e3c <_strtol_l.constprop.0+0xc>
 8007e38:	2b24      	cmp	r3, #36	; 0x24
 8007e3a:	d906      	bls.n	8007e4a <_strtol_l.constprop.0+0x1a>
 8007e3c:	f7fd fe54 	bl	8005ae8 <__errno>
 8007e40:	2316      	movs	r3, #22
 8007e42:	6003      	str	r3, [r0, #0]
 8007e44:	2000      	movs	r0, #0
 8007e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e4a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007f30 <_strtol_l.constprop.0+0x100>
 8007e4e:	460d      	mov	r5, r1
 8007e50:	462e      	mov	r6, r5
 8007e52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e56:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007e5a:	f017 0708 	ands.w	r7, r7, #8
 8007e5e:	d1f7      	bne.n	8007e50 <_strtol_l.constprop.0+0x20>
 8007e60:	2c2d      	cmp	r4, #45	; 0x2d
 8007e62:	d132      	bne.n	8007eca <_strtol_l.constprop.0+0x9a>
 8007e64:	782c      	ldrb	r4, [r5, #0]
 8007e66:	2701      	movs	r7, #1
 8007e68:	1cb5      	adds	r5, r6, #2
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d05b      	beq.n	8007f26 <_strtol_l.constprop.0+0xf6>
 8007e6e:	2b10      	cmp	r3, #16
 8007e70:	d109      	bne.n	8007e86 <_strtol_l.constprop.0+0x56>
 8007e72:	2c30      	cmp	r4, #48	; 0x30
 8007e74:	d107      	bne.n	8007e86 <_strtol_l.constprop.0+0x56>
 8007e76:	782c      	ldrb	r4, [r5, #0]
 8007e78:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007e7c:	2c58      	cmp	r4, #88	; 0x58
 8007e7e:	d14d      	bne.n	8007f1c <_strtol_l.constprop.0+0xec>
 8007e80:	786c      	ldrb	r4, [r5, #1]
 8007e82:	2310      	movs	r3, #16
 8007e84:	3502      	adds	r5, #2
 8007e86:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007e8a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007e8e:	f04f 0e00 	mov.w	lr, #0
 8007e92:	fbb8 f9f3 	udiv	r9, r8, r3
 8007e96:	4676      	mov	r6, lr
 8007e98:	fb03 8a19 	mls	sl, r3, r9, r8
 8007e9c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007ea0:	f1bc 0f09 	cmp.w	ip, #9
 8007ea4:	d816      	bhi.n	8007ed4 <_strtol_l.constprop.0+0xa4>
 8007ea6:	4664      	mov	r4, ip
 8007ea8:	42a3      	cmp	r3, r4
 8007eaa:	dd24      	ble.n	8007ef6 <_strtol_l.constprop.0+0xc6>
 8007eac:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8007eb0:	d008      	beq.n	8007ec4 <_strtol_l.constprop.0+0x94>
 8007eb2:	45b1      	cmp	r9, r6
 8007eb4:	d31c      	bcc.n	8007ef0 <_strtol_l.constprop.0+0xc0>
 8007eb6:	d101      	bne.n	8007ebc <_strtol_l.constprop.0+0x8c>
 8007eb8:	45a2      	cmp	sl, r4
 8007eba:	db19      	blt.n	8007ef0 <_strtol_l.constprop.0+0xc0>
 8007ebc:	fb06 4603 	mla	r6, r6, r3, r4
 8007ec0:	f04f 0e01 	mov.w	lr, #1
 8007ec4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ec8:	e7e8      	b.n	8007e9c <_strtol_l.constprop.0+0x6c>
 8007eca:	2c2b      	cmp	r4, #43	; 0x2b
 8007ecc:	bf04      	itt	eq
 8007ece:	782c      	ldrbeq	r4, [r5, #0]
 8007ed0:	1cb5      	addeq	r5, r6, #2
 8007ed2:	e7ca      	b.n	8007e6a <_strtol_l.constprop.0+0x3a>
 8007ed4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007ed8:	f1bc 0f19 	cmp.w	ip, #25
 8007edc:	d801      	bhi.n	8007ee2 <_strtol_l.constprop.0+0xb2>
 8007ede:	3c37      	subs	r4, #55	; 0x37
 8007ee0:	e7e2      	b.n	8007ea8 <_strtol_l.constprop.0+0x78>
 8007ee2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007ee6:	f1bc 0f19 	cmp.w	ip, #25
 8007eea:	d804      	bhi.n	8007ef6 <_strtol_l.constprop.0+0xc6>
 8007eec:	3c57      	subs	r4, #87	; 0x57
 8007eee:	e7db      	b.n	8007ea8 <_strtol_l.constprop.0+0x78>
 8007ef0:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8007ef4:	e7e6      	b.n	8007ec4 <_strtol_l.constprop.0+0x94>
 8007ef6:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8007efa:	d105      	bne.n	8007f08 <_strtol_l.constprop.0+0xd8>
 8007efc:	2322      	movs	r3, #34	; 0x22
 8007efe:	6003      	str	r3, [r0, #0]
 8007f00:	4646      	mov	r6, r8
 8007f02:	b942      	cbnz	r2, 8007f16 <_strtol_l.constprop.0+0xe6>
 8007f04:	4630      	mov	r0, r6
 8007f06:	e79e      	b.n	8007e46 <_strtol_l.constprop.0+0x16>
 8007f08:	b107      	cbz	r7, 8007f0c <_strtol_l.constprop.0+0xdc>
 8007f0a:	4276      	negs	r6, r6
 8007f0c:	2a00      	cmp	r2, #0
 8007f0e:	d0f9      	beq.n	8007f04 <_strtol_l.constprop.0+0xd4>
 8007f10:	f1be 0f00 	cmp.w	lr, #0
 8007f14:	d000      	beq.n	8007f18 <_strtol_l.constprop.0+0xe8>
 8007f16:	1e69      	subs	r1, r5, #1
 8007f18:	6011      	str	r1, [r2, #0]
 8007f1a:	e7f3      	b.n	8007f04 <_strtol_l.constprop.0+0xd4>
 8007f1c:	2430      	movs	r4, #48	; 0x30
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1b1      	bne.n	8007e86 <_strtol_l.constprop.0+0x56>
 8007f22:	2308      	movs	r3, #8
 8007f24:	e7af      	b.n	8007e86 <_strtol_l.constprop.0+0x56>
 8007f26:	2c30      	cmp	r4, #48	; 0x30
 8007f28:	d0a5      	beq.n	8007e76 <_strtol_l.constprop.0+0x46>
 8007f2a:	230a      	movs	r3, #10
 8007f2c:	e7ab      	b.n	8007e86 <_strtol_l.constprop.0+0x56>
 8007f2e:	bf00      	nop
 8007f30:	080093f1 	.word	0x080093f1

08007f34 <_strtol_r>:
 8007f34:	f7ff bf7c 	b.w	8007e30 <_strtol_l.constprop.0>

08007f38 <__ssputs_r>:
 8007f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f3c:	688e      	ldr	r6, [r1, #8]
 8007f3e:	461f      	mov	r7, r3
 8007f40:	42be      	cmp	r6, r7
 8007f42:	680b      	ldr	r3, [r1, #0]
 8007f44:	4682      	mov	sl, r0
 8007f46:	460c      	mov	r4, r1
 8007f48:	4690      	mov	r8, r2
 8007f4a:	d82c      	bhi.n	8007fa6 <__ssputs_r+0x6e>
 8007f4c:	898a      	ldrh	r2, [r1, #12]
 8007f4e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f52:	d026      	beq.n	8007fa2 <__ssputs_r+0x6a>
 8007f54:	6965      	ldr	r5, [r4, #20]
 8007f56:	6909      	ldr	r1, [r1, #16]
 8007f58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f5c:	eba3 0901 	sub.w	r9, r3, r1
 8007f60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f64:	1c7b      	adds	r3, r7, #1
 8007f66:	444b      	add	r3, r9
 8007f68:	106d      	asrs	r5, r5, #1
 8007f6a:	429d      	cmp	r5, r3
 8007f6c:	bf38      	it	cc
 8007f6e:	461d      	movcc	r5, r3
 8007f70:	0553      	lsls	r3, r2, #21
 8007f72:	d527      	bpl.n	8007fc4 <__ssputs_r+0x8c>
 8007f74:	4629      	mov	r1, r5
 8007f76:	f7fe fc53 	bl	8006820 <_malloc_r>
 8007f7a:	4606      	mov	r6, r0
 8007f7c:	b360      	cbz	r0, 8007fd8 <__ssputs_r+0xa0>
 8007f7e:	6921      	ldr	r1, [r4, #16]
 8007f80:	464a      	mov	r2, r9
 8007f82:	f000 fa1b 	bl	80083bc <memcpy>
 8007f86:	89a3      	ldrh	r3, [r4, #12]
 8007f88:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f90:	81a3      	strh	r3, [r4, #12]
 8007f92:	6126      	str	r6, [r4, #16]
 8007f94:	6165      	str	r5, [r4, #20]
 8007f96:	444e      	add	r6, r9
 8007f98:	eba5 0509 	sub.w	r5, r5, r9
 8007f9c:	6026      	str	r6, [r4, #0]
 8007f9e:	60a5      	str	r5, [r4, #8]
 8007fa0:	463e      	mov	r6, r7
 8007fa2:	42be      	cmp	r6, r7
 8007fa4:	d900      	bls.n	8007fa8 <__ssputs_r+0x70>
 8007fa6:	463e      	mov	r6, r7
 8007fa8:	6820      	ldr	r0, [r4, #0]
 8007faa:	4632      	mov	r2, r6
 8007fac:	4641      	mov	r1, r8
 8007fae:	f000 f9c9 	bl	8008344 <memmove>
 8007fb2:	68a3      	ldr	r3, [r4, #8]
 8007fb4:	1b9b      	subs	r3, r3, r6
 8007fb6:	60a3      	str	r3, [r4, #8]
 8007fb8:	6823      	ldr	r3, [r4, #0]
 8007fba:	4433      	add	r3, r6
 8007fbc:	6023      	str	r3, [r4, #0]
 8007fbe:	2000      	movs	r0, #0
 8007fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fc4:	462a      	mov	r2, r5
 8007fc6:	f000 fdac 	bl	8008b22 <_realloc_r>
 8007fca:	4606      	mov	r6, r0
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	d1e0      	bne.n	8007f92 <__ssputs_r+0x5a>
 8007fd0:	6921      	ldr	r1, [r4, #16]
 8007fd2:	4650      	mov	r0, sl
 8007fd4:	f7fe fbb0 	bl	8006738 <_free_r>
 8007fd8:	230c      	movs	r3, #12
 8007fda:	f8ca 3000 	str.w	r3, [sl]
 8007fde:	89a3      	ldrh	r3, [r4, #12]
 8007fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fe4:	81a3      	strh	r3, [r4, #12]
 8007fe6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fea:	e7e9      	b.n	8007fc0 <__ssputs_r+0x88>

08007fec <_svfiprintf_r>:
 8007fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ff0:	4698      	mov	r8, r3
 8007ff2:	898b      	ldrh	r3, [r1, #12]
 8007ff4:	061b      	lsls	r3, r3, #24
 8007ff6:	b09d      	sub	sp, #116	; 0x74
 8007ff8:	4607      	mov	r7, r0
 8007ffa:	460d      	mov	r5, r1
 8007ffc:	4614      	mov	r4, r2
 8007ffe:	d50e      	bpl.n	800801e <_svfiprintf_r+0x32>
 8008000:	690b      	ldr	r3, [r1, #16]
 8008002:	b963      	cbnz	r3, 800801e <_svfiprintf_r+0x32>
 8008004:	2140      	movs	r1, #64	; 0x40
 8008006:	f7fe fc0b 	bl	8006820 <_malloc_r>
 800800a:	6028      	str	r0, [r5, #0]
 800800c:	6128      	str	r0, [r5, #16]
 800800e:	b920      	cbnz	r0, 800801a <_svfiprintf_r+0x2e>
 8008010:	230c      	movs	r3, #12
 8008012:	603b      	str	r3, [r7, #0]
 8008014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008018:	e0d0      	b.n	80081bc <_svfiprintf_r+0x1d0>
 800801a:	2340      	movs	r3, #64	; 0x40
 800801c:	616b      	str	r3, [r5, #20]
 800801e:	2300      	movs	r3, #0
 8008020:	9309      	str	r3, [sp, #36]	; 0x24
 8008022:	2320      	movs	r3, #32
 8008024:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008028:	f8cd 800c 	str.w	r8, [sp, #12]
 800802c:	2330      	movs	r3, #48	; 0x30
 800802e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80081d4 <_svfiprintf_r+0x1e8>
 8008032:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008036:	f04f 0901 	mov.w	r9, #1
 800803a:	4623      	mov	r3, r4
 800803c:	469a      	mov	sl, r3
 800803e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008042:	b10a      	cbz	r2, 8008048 <_svfiprintf_r+0x5c>
 8008044:	2a25      	cmp	r2, #37	; 0x25
 8008046:	d1f9      	bne.n	800803c <_svfiprintf_r+0x50>
 8008048:	ebba 0b04 	subs.w	fp, sl, r4
 800804c:	d00b      	beq.n	8008066 <_svfiprintf_r+0x7a>
 800804e:	465b      	mov	r3, fp
 8008050:	4622      	mov	r2, r4
 8008052:	4629      	mov	r1, r5
 8008054:	4638      	mov	r0, r7
 8008056:	f7ff ff6f 	bl	8007f38 <__ssputs_r>
 800805a:	3001      	adds	r0, #1
 800805c:	f000 80a9 	beq.w	80081b2 <_svfiprintf_r+0x1c6>
 8008060:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008062:	445a      	add	r2, fp
 8008064:	9209      	str	r2, [sp, #36]	; 0x24
 8008066:	f89a 3000 	ldrb.w	r3, [sl]
 800806a:	2b00      	cmp	r3, #0
 800806c:	f000 80a1 	beq.w	80081b2 <_svfiprintf_r+0x1c6>
 8008070:	2300      	movs	r3, #0
 8008072:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008076:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800807a:	f10a 0a01 	add.w	sl, sl, #1
 800807e:	9304      	str	r3, [sp, #16]
 8008080:	9307      	str	r3, [sp, #28]
 8008082:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008086:	931a      	str	r3, [sp, #104]	; 0x68
 8008088:	4654      	mov	r4, sl
 800808a:	2205      	movs	r2, #5
 800808c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008090:	4850      	ldr	r0, [pc, #320]	; (80081d4 <_svfiprintf_r+0x1e8>)
 8008092:	f7f8 f8d5 	bl	8000240 <memchr>
 8008096:	9a04      	ldr	r2, [sp, #16]
 8008098:	b9d8      	cbnz	r0, 80080d2 <_svfiprintf_r+0xe6>
 800809a:	06d0      	lsls	r0, r2, #27
 800809c:	bf44      	itt	mi
 800809e:	2320      	movmi	r3, #32
 80080a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080a4:	0711      	lsls	r1, r2, #28
 80080a6:	bf44      	itt	mi
 80080a8:	232b      	movmi	r3, #43	; 0x2b
 80080aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080ae:	f89a 3000 	ldrb.w	r3, [sl]
 80080b2:	2b2a      	cmp	r3, #42	; 0x2a
 80080b4:	d015      	beq.n	80080e2 <_svfiprintf_r+0xf6>
 80080b6:	9a07      	ldr	r2, [sp, #28]
 80080b8:	4654      	mov	r4, sl
 80080ba:	2000      	movs	r0, #0
 80080bc:	f04f 0c0a 	mov.w	ip, #10
 80080c0:	4621      	mov	r1, r4
 80080c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080c6:	3b30      	subs	r3, #48	; 0x30
 80080c8:	2b09      	cmp	r3, #9
 80080ca:	d94d      	bls.n	8008168 <_svfiprintf_r+0x17c>
 80080cc:	b1b0      	cbz	r0, 80080fc <_svfiprintf_r+0x110>
 80080ce:	9207      	str	r2, [sp, #28]
 80080d0:	e014      	b.n	80080fc <_svfiprintf_r+0x110>
 80080d2:	eba0 0308 	sub.w	r3, r0, r8
 80080d6:	fa09 f303 	lsl.w	r3, r9, r3
 80080da:	4313      	orrs	r3, r2
 80080dc:	9304      	str	r3, [sp, #16]
 80080de:	46a2      	mov	sl, r4
 80080e0:	e7d2      	b.n	8008088 <_svfiprintf_r+0x9c>
 80080e2:	9b03      	ldr	r3, [sp, #12]
 80080e4:	1d19      	adds	r1, r3, #4
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	9103      	str	r1, [sp, #12]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	bfbb      	ittet	lt
 80080ee:	425b      	neglt	r3, r3
 80080f0:	f042 0202 	orrlt.w	r2, r2, #2
 80080f4:	9307      	strge	r3, [sp, #28]
 80080f6:	9307      	strlt	r3, [sp, #28]
 80080f8:	bfb8      	it	lt
 80080fa:	9204      	strlt	r2, [sp, #16]
 80080fc:	7823      	ldrb	r3, [r4, #0]
 80080fe:	2b2e      	cmp	r3, #46	; 0x2e
 8008100:	d10c      	bne.n	800811c <_svfiprintf_r+0x130>
 8008102:	7863      	ldrb	r3, [r4, #1]
 8008104:	2b2a      	cmp	r3, #42	; 0x2a
 8008106:	d134      	bne.n	8008172 <_svfiprintf_r+0x186>
 8008108:	9b03      	ldr	r3, [sp, #12]
 800810a:	1d1a      	adds	r2, r3, #4
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	9203      	str	r2, [sp, #12]
 8008110:	2b00      	cmp	r3, #0
 8008112:	bfb8      	it	lt
 8008114:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008118:	3402      	adds	r4, #2
 800811a:	9305      	str	r3, [sp, #20]
 800811c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80081e4 <_svfiprintf_r+0x1f8>
 8008120:	7821      	ldrb	r1, [r4, #0]
 8008122:	2203      	movs	r2, #3
 8008124:	4650      	mov	r0, sl
 8008126:	f7f8 f88b 	bl	8000240 <memchr>
 800812a:	b138      	cbz	r0, 800813c <_svfiprintf_r+0x150>
 800812c:	9b04      	ldr	r3, [sp, #16]
 800812e:	eba0 000a 	sub.w	r0, r0, sl
 8008132:	2240      	movs	r2, #64	; 0x40
 8008134:	4082      	lsls	r2, r0
 8008136:	4313      	orrs	r3, r2
 8008138:	3401      	adds	r4, #1
 800813a:	9304      	str	r3, [sp, #16]
 800813c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008140:	4825      	ldr	r0, [pc, #148]	; (80081d8 <_svfiprintf_r+0x1ec>)
 8008142:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008146:	2206      	movs	r2, #6
 8008148:	f7f8 f87a 	bl	8000240 <memchr>
 800814c:	2800      	cmp	r0, #0
 800814e:	d038      	beq.n	80081c2 <_svfiprintf_r+0x1d6>
 8008150:	4b22      	ldr	r3, [pc, #136]	; (80081dc <_svfiprintf_r+0x1f0>)
 8008152:	bb1b      	cbnz	r3, 800819c <_svfiprintf_r+0x1b0>
 8008154:	9b03      	ldr	r3, [sp, #12]
 8008156:	3307      	adds	r3, #7
 8008158:	f023 0307 	bic.w	r3, r3, #7
 800815c:	3308      	adds	r3, #8
 800815e:	9303      	str	r3, [sp, #12]
 8008160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008162:	4433      	add	r3, r6
 8008164:	9309      	str	r3, [sp, #36]	; 0x24
 8008166:	e768      	b.n	800803a <_svfiprintf_r+0x4e>
 8008168:	fb0c 3202 	mla	r2, ip, r2, r3
 800816c:	460c      	mov	r4, r1
 800816e:	2001      	movs	r0, #1
 8008170:	e7a6      	b.n	80080c0 <_svfiprintf_r+0xd4>
 8008172:	2300      	movs	r3, #0
 8008174:	3401      	adds	r4, #1
 8008176:	9305      	str	r3, [sp, #20]
 8008178:	4619      	mov	r1, r3
 800817a:	f04f 0c0a 	mov.w	ip, #10
 800817e:	4620      	mov	r0, r4
 8008180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008184:	3a30      	subs	r2, #48	; 0x30
 8008186:	2a09      	cmp	r2, #9
 8008188:	d903      	bls.n	8008192 <_svfiprintf_r+0x1a6>
 800818a:	2b00      	cmp	r3, #0
 800818c:	d0c6      	beq.n	800811c <_svfiprintf_r+0x130>
 800818e:	9105      	str	r1, [sp, #20]
 8008190:	e7c4      	b.n	800811c <_svfiprintf_r+0x130>
 8008192:	fb0c 2101 	mla	r1, ip, r1, r2
 8008196:	4604      	mov	r4, r0
 8008198:	2301      	movs	r3, #1
 800819a:	e7f0      	b.n	800817e <_svfiprintf_r+0x192>
 800819c:	ab03      	add	r3, sp, #12
 800819e:	9300      	str	r3, [sp, #0]
 80081a0:	462a      	mov	r2, r5
 80081a2:	4b0f      	ldr	r3, [pc, #60]	; (80081e0 <_svfiprintf_r+0x1f4>)
 80081a4:	a904      	add	r1, sp, #16
 80081a6:	4638      	mov	r0, r7
 80081a8:	f7fc fd8a 	bl	8004cc0 <_printf_float>
 80081ac:	1c42      	adds	r2, r0, #1
 80081ae:	4606      	mov	r6, r0
 80081b0:	d1d6      	bne.n	8008160 <_svfiprintf_r+0x174>
 80081b2:	89ab      	ldrh	r3, [r5, #12]
 80081b4:	065b      	lsls	r3, r3, #25
 80081b6:	f53f af2d 	bmi.w	8008014 <_svfiprintf_r+0x28>
 80081ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081bc:	b01d      	add	sp, #116	; 0x74
 80081be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081c2:	ab03      	add	r3, sp, #12
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	462a      	mov	r2, r5
 80081c8:	4b05      	ldr	r3, [pc, #20]	; (80081e0 <_svfiprintf_r+0x1f4>)
 80081ca:	a904      	add	r1, sp, #16
 80081cc:	4638      	mov	r0, r7
 80081ce:	f7fc ffff 	bl	80051d0 <_printf_i>
 80081d2:	e7eb      	b.n	80081ac <_svfiprintf_r+0x1c0>
 80081d4:	080094f1 	.word	0x080094f1
 80081d8:	080094fb 	.word	0x080094fb
 80081dc:	08004cc1 	.word	0x08004cc1
 80081e0:	08007f39 	.word	0x08007f39
 80081e4:	080094f7 	.word	0x080094f7

080081e8 <__sflush_r>:
 80081e8:	898a      	ldrh	r2, [r1, #12]
 80081ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081ee:	4605      	mov	r5, r0
 80081f0:	0710      	lsls	r0, r2, #28
 80081f2:	460c      	mov	r4, r1
 80081f4:	d458      	bmi.n	80082a8 <__sflush_r+0xc0>
 80081f6:	684b      	ldr	r3, [r1, #4]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	dc05      	bgt.n	8008208 <__sflush_r+0x20>
 80081fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80081fe:	2b00      	cmp	r3, #0
 8008200:	dc02      	bgt.n	8008208 <__sflush_r+0x20>
 8008202:	2000      	movs	r0, #0
 8008204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008208:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800820a:	2e00      	cmp	r6, #0
 800820c:	d0f9      	beq.n	8008202 <__sflush_r+0x1a>
 800820e:	2300      	movs	r3, #0
 8008210:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008214:	682f      	ldr	r7, [r5, #0]
 8008216:	6a21      	ldr	r1, [r4, #32]
 8008218:	602b      	str	r3, [r5, #0]
 800821a:	d032      	beq.n	8008282 <__sflush_r+0x9a>
 800821c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800821e:	89a3      	ldrh	r3, [r4, #12]
 8008220:	075a      	lsls	r2, r3, #29
 8008222:	d505      	bpl.n	8008230 <__sflush_r+0x48>
 8008224:	6863      	ldr	r3, [r4, #4]
 8008226:	1ac0      	subs	r0, r0, r3
 8008228:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800822a:	b10b      	cbz	r3, 8008230 <__sflush_r+0x48>
 800822c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800822e:	1ac0      	subs	r0, r0, r3
 8008230:	2300      	movs	r3, #0
 8008232:	4602      	mov	r2, r0
 8008234:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008236:	6a21      	ldr	r1, [r4, #32]
 8008238:	4628      	mov	r0, r5
 800823a:	47b0      	blx	r6
 800823c:	1c43      	adds	r3, r0, #1
 800823e:	89a3      	ldrh	r3, [r4, #12]
 8008240:	d106      	bne.n	8008250 <__sflush_r+0x68>
 8008242:	6829      	ldr	r1, [r5, #0]
 8008244:	291d      	cmp	r1, #29
 8008246:	d82b      	bhi.n	80082a0 <__sflush_r+0xb8>
 8008248:	4a29      	ldr	r2, [pc, #164]	; (80082f0 <__sflush_r+0x108>)
 800824a:	410a      	asrs	r2, r1
 800824c:	07d6      	lsls	r6, r2, #31
 800824e:	d427      	bmi.n	80082a0 <__sflush_r+0xb8>
 8008250:	2200      	movs	r2, #0
 8008252:	6062      	str	r2, [r4, #4]
 8008254:	04d9      	lsls	r1, r3, #19
 8008256:	6922      	ldr	r2, [r4, #16]
 8008258:	6022      	str	r2, [r4, #0]
 800825a:	d504      	bpl.n	8008266 <__sflush_r+0x7e>
 800825c:	1c42      	adds	r2, r0, #1
 800825e:	d101      	bne.n	8008264 <__sflush_r+0x7c>
 8008260:	682b      	ldr	r3, [r5, #0]
 8008262:	b903      	cbnz	r3, 8008266 <__sflush_r+0x7e>
 8008264:	6560      	str	r0, [r4, #84]	; 0x54
 8008266:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008268:	602f      	str	r7, [r5, #0]
 800826a:	2900      	cmp	r1, #0
 800826c:	d0c9      	beq.n	8008202 <__sflush_r+0x1a>
 800826e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008272:	4299      	cmp	r1, r3
 8008274:	d002      	beq.n	800827c <__sflush_r+0x94>
 8008276:	4628      	mov	r0, r5
 8008278:	f7fe fa5e 	bl	8006738 <_free_r>
 800827c:	2000      	movs	r0, #0
 800827e:	6360      	str	r0, [r4, #52]	; 0x34
 8008280:	e7c0      	b.n	8008204 <__sflush_r+0x1c>
 8008282:	2301      	movs	r3, #1
 8008284:	4628      	mov	r0, r5
 8008286:	47b0      	blx	r6
 8008288:	1c41      	adds	r1, r0, #1
 800828a:	d1c8      	bne.n	800821e <__sflush_r+0x36>
 800828c:	682b      	ldr	r3, [r5, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d0c5      	beq.n	800821e <__sflush_r+0x36>
 8008292:	2b1d      	cmp	r3, #29
 8008294:	d001      	beq.n	800829a <__sflush_r+0xb2>
 8008296:	2b16      	cmp	r3, #22
 8008298:	d101      	bne.n	800829e <__sflush_r+0xb6>
 800829a:	602f      	str	r7, [r5, #0]
 800829c:	e7b1      	b.n	8008202 <__sflush_r+0x1a>
 800829e:	89a3      	ldrh	r3, [r4, #12]
 80082a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082a4:	81a3      	strh	r3, [r4, #12]
 80082a6:	e7ad      	b.n	8008204 <__sflush_r+0x1c>
 80082a8:	690f      	ldr	r7, [r1, #16]
 80082aa:	2f00      	cmp	r7, #0
 80082ac:	d0a9      	beq.n	8008202 <__sflush_r+0x1a>
 80082ae:	0793      	lsls	r3, r2, #30
 80082b0:	680e      	ldr	r6, [r1, #0]
 80082b2:	bf08      	it	eq
 80082b4:	694b      	ldreq	r3, [r1, #20]
 80082b6:	600f      	str	r7, [r1, #0]
 80082b8:	bf18      	it	ne
 80082ba:	2300      	movne	r3, #0
 80082bc:	eba6 0807 	sub.w	r8, r6, r7
 80082c0:	608b      	str	r3, [r1, #8]
 80082c2:	f1b8 0f00 	cmp.w	r8, #0
 80082c6:	dd9c      	ble.n	8008202 <__sflush_r+0x1a>
 80082c8:	6a21      	ldr	r1, [r4, #32]
 80082ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80082cc:	4643      	mov	r3, r8
 80082ce:	463a      	mov	r2, r7
 80082d0:	4628      	mov	r0, r5
 80082d2:	47b0      	blx	r6
 80082d4:	2800      	cmp	r0, #0
 80082d6:	dc06      	bgt.n	80082e6 <__sflush_r+0xfe>
 80082d8:	89a3      	ldrh	r3, [r4, #12]
 80082da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082de:	81a3      	strh	r3, [r4, #12]
 80082e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082e4:	e78e      	b.n	8008204 <__sflush_r+0x1c>
 80082e6:	4407      	add	r7, r0
 80082e8:	eba8 0800 	sub.w	r8, r8, r0
 80082ec:	e7e9      	b.n	80082c2 <__sflush_r+0xda>
 80082ee:	bf00      	nop
 80082f0:	dfbffffe 	.word	0xdfbffffe

080082f4 <_fflush_r>:
 80082f4:	b538      	push	{r3, r4, r5, lr}
 80082f6:	690b      	ldr	r3, [r1, #16]
 80082f8:	4605      	mov	r5, r0
 80082fa:	460c      	mov	r4, r1
 80082fc:	b913      	cbnz	r3, 8008304 <_fflush_r+0x10>
 80082fe:	2500      	movs	r5, #0
 8008300:	4628      	mov	r0, r5
 8008302:	bd38      	pop	{r3, r4, r5, pc}
 8008304:	b118      	cbz	r0, 800830e <_fflush_r+0x1a>
 8008306:	6a03      	ldr	r3, [r0, #32]
 8008308:	b90b      	cbnz	r3, 800830e <_fflush_r+0x1a>
 800830a:	f7fd fb01 	bl	8005910 <__sinit>
 800830e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d0f3      	beq.n	80082fe <_fflush_r+0xa>
 8008316:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008318:	07d0      	lsls	r0, r2, #31
 800831a:	d404      	bmi.n	8008326 <_fflush_r+0x32>
 800831c:	0599      	lsls	r1, r3, #22
 800831e:	d402      	bmi.n	8008326 <_fflush_r+0x32>
 8008320:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008322:	f7fd fc0b 	bl	8005b3c <__retarget_lock_acquire_recursive>
 8008326:	4628      	mov	r0, r5
 8008328:	4621      	mov	r1, r4
 800832a:	f7ff ff5d 	bl	80081e8 <__sflush_r>
 800832e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008330:	07da      	lsls	r2, r3, #31
 8008332:	4605      	mov	r5, r0
 8008334:	d4e4      	bmi.n	8008300 <_fflush_r+0xc>
 8008336:	89a3      	ldrh	r3, [r4, #12]
 8008338:	059b      	lsls	r3, r3, #22
 800833a:	d4e1      	bmi.n	8008300 <_fflush_r+0xc>
 800833c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800833e:	f7fd fbfe 	bl	8005b3e <__retarget_lock_release_recursive>
 8008342:	e7dd      	b.n	8008300 <_fflush_r+0xc>

08008344 <memmove>:
 8008344:	4288      	cmp	r0, r1
 8008346:	b510      	push	{r4, lr}
 8008348:	eb01 0402 	add.w	r4, r1, r2
 800834c:	d902      	bls.n	8008354 <memmove+0x10>
 800834e:	4284      	cmp	r4, r0
 8008350:	4623      	mov	r3, r4
 8008352:	d807      	bhi.n	8008364 <memmove+0x20>
 8008354:	1e43      	subs	r3, r0, #1
 8008356:	42a1      	cmp	r1, r4
 8008358:	d008      	beq.n	800836c <memmove+0x28>
 800835a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800835e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008362:	e7f8      	b.n	8008356 <memmove+0x12>
 8008364:	4402      	add	r2, r0
 8008366:	4601      	mov	r1, r0
 8008368:	428a      	cmp	r2, r1
 800836a:	d100      	bne.n	800836e <memmove+0x2a>
 800836c:	bd10      	pop	{r4, pc}
 800836e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008372:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008376:	e7f7      	b.n	8008368 <memmove+0x24>

08008378 <strncmp>:
 8008378:	b510      	push	{r4, lr}
 800837a:	b16a      	cbz	r2, 8008398 <strncmp+0x20>
 800837c:	3901      	subs	r1, #1
 800837e:	1884      	adds	r4, r0, r2
 8008380:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008384:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008388:	429a      	cmp	r2, r3
 800838a:	d103      	bne.n	8008394 <strncmp+0x1c>
 800838c:	42a0      	cmp	r0, r4
 800838e:	d001      	beq.n	8008394 <strncmp+0x1c>
 8008390:	2a00      	cmp	r2, #0
 8008392:	d1f5      	bne.n	8008380 <strncmp+0x8>
 8008394:	1ad0      	subs	r0, r2, r3
 8008396:	bd10      	pop	{r4, pc}
 8008398:	4610      	mov	r0, r2
 800839a:	e7fc      	b.n	8008396 <strncmp+0x1e>

0800839c <_sbrk_r>:
 800839c:	b538      	push	{r3, r4, r5, lr}
 800839e:	4d06      	ldr	r5, [pc, #24]	; (80083b8 <_sbrk_r+0x1c>)
 80083a0:	2300      	movs	r3, #0
 80083a2:	4604      	mov	r4, r0
 80083a4:	4608      	mov	r0, r1
 80083a6:	602b      	str	r3, [r5, #0]
 80083a8:	f7f8 fdb2 	bl	8000f10 <_sbrk>
 80083ac:	1c43      	adds	r3, r0, #1
 80083ae:	d102      	bne.n	80083b6 <_sbrk_r+0x1a>
 80083b0:	682b      	ldr	r3, [r5, #0]
 80083b2:	b103      	cbz	r3, 80083b6 <_sbrk_r+0x1a>
 80083b4:	6023      	str	r3, [r4, #0]
 80083b6:	bd38      	pop	{r3, r4, r5, pc}
 80083b8:	20000460 	.word	0x20000460

080083bc <memcpy>:
 80083bc:	440a      	add	r2, r1
 80083be:	4291      	cmp	r1, r2
 80083c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80083c4:	d100      	bne.n	80083c8 <memcpy+0xc>
 80083c6:	4770      	bx	lr
 80083c8:	b510      	push	{r4, lr}
 80083ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083d2:	4291      	cmp	r1, r2
 80083d4:	d1f9      	bne.n	80083ca <memcpy+0xe>
 80083d6:	bd10      	pop	{r4, pc}

080083d8 <nan>:
 80083d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80083e0 <nan+0x8>
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	00000000 	.word	0x00000000
 80083e4:	7ff80000 	.word	0x7ff80000

080083e8 <__assert_func>:
 80083e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083ea:	4614      	mov	r4, r2
 80083ec:	461a      	mov	r2, r3
 80083ee:	4b09      	ldr	r3, [pc, #36]	; (8008414 <__assert_func+0x2c>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4605      	mov	r5, r0
 80083f4:	68d8      	ldr	r0, [r3, #12]
 80083f6:	b14c      	cbz	r4, 800840c <__assert_func+0x24>
 80083f8:	4b07      	ldr	r3, [pc, #28]	; (8008418 <__assert_func+0x30>)
 80083fa:	9100      	str	r1, [sp, #0]
 80083fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008400:	4906      	ldr	r1, [pc, #24]	; (800841c <__assert_func+0x34>)
 8008402:	462b      	mov	r3, r5
 8008404:	f000 fbca 	bl	8008b9c <fiprintf>
 8008408:	f000 fbda 	bl	8008bc0 <abort>
 800840c:	4b04      	ldr	r3, [pc, #16]	; (8008420 <__assert_func+0x38>)
 800840e:	461c      	mov	r4, r3
 8008410:	e7f3      	b.n	80083fa <__assert_func+0x12>
 8008412:	bf00      	nop
 8008414:	20000064 	.word	0x20000064
 8008418:	0800950a 	.word	0x0800950a
 800841c:	08009517 	.word	0x08009517
 8008420:	08009545 	.word	0x08009545

08008424 <_calloc_r>:
 8008424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008426:	fba1 2402 	umull	r2, r4, r1, r2
 800842a:	b94c      	cbnz	r4, 8008440 <_calloc_r+0x1c>
 800842c:	4611      	mov	r1, r2
 800842e:	9201      	str	r2, [sp, #4]
 8008430:	f7fe f9f6 	bl	8006820 <_malloc_r>
 8008434:	9a01      	ldr	r2, [sp, #4]
 8008436:	4605      	mov	r5, r0
 8008438:	b930      	cbnz	r0, 8008448 <_calloc_r+0x24>
 800843a:	4628      	mov	r0, r5
 800843c:	b003      	add	sp, #12
 800843e:	bd30      	pop	{r4, r5, pc}
 8008440:	220c      	movs	r2, #12
 8008442:	6002      	str	r2, [r0, #0]
 8008444:	2500      	movs	r5, #0
 8008446:	e7f8      	b.n	800843a <_calloc_r+0x16>
 8008448:	4621      	mov	r1, r4
 800844a:	f7fd fafa 	bl	8005a42 <memset>
 800844e:	e7f4      	b.n	800843a <_calloc_r+0x16>

08008450 <rshift>:
 8008450:	6903      	ldr	r3, [r0, #16]
 8008452:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008456:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800845a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800845e:	f100 0414 	add.w	r4, r0, #20
 8008462:	dd45      	ble.n	80084f0 <rshift+0xa0>
 8008464:	f011 011f 	ands.w	r1, r1, #31
 8008468:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800846c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008470:	d10c      	bne.n	800848c <rshift+0x3c>
 8008472:	f100 0710 	add.w	r7, r0, #16
 8008476:	4629      	mov	r1, r5
 8008478:	42b1      	cmp	r1, r6
 800847a:	d334      	bcc.n	80084e6 <rshift+0x96>
 800847c:	1a9b      	subs	r3, r3, r2
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	1eea      	subs	r2, r5, #3
 8008482:	4296      	cmp	r6, r2
 8008484:	bf38      	it	cc
 8008486:	2300      	movcc	r3, #0
 8008488:	4423      	add	r3, r4
 800848a:	e015      	b.n	80084b8 <rshift+0x68>
 800848c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008490:	f1c1 0820 	rsb	r8, r1, #32
 8008494:	40cf      	lsrs	r7, r1
 8008496:	f105 0e04 	add.w	lr, r5, #4
 800849a:	46a1      	mov	r9, r4
 800849c:	4576      	cmp	r6, lr
 800849e:	46f4      	mov	ip, lr
 80084a0:	d815      	bhi.n	80084ce <rshift+0x7e>
 80084a2:	1a9a      	subs	r2, r3, r2
 80084a4:	0092      	lsls	r2, r2, #2
 80084a6:	3a04      	subs	r2, #4
 80084a8:	3501      	adds	r5, #1
 80084aa:	42ae      	cmp	r6, r5
 80084ac:	bf38      	it	cc
 80084ae:	2200      	movcc	r2, #0
 80084b0:	18a3      	adds	r3, r4, r2
 80084b2:	50a7      	str	r7, [r4, r2]
 80084b4:	b107      	cbz	r7, 80084b8 <rshift+0x68>
 80084b6:	3304      	adds	r3, #4
 80084b8:	1b1a      	subs	r2, r3, r4
 80084ba:	42a3      	cmp	r3, r4
 80084bc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80084c0:	bf08      	it	eq
 80084c2:	2300      	moveq	r3, #0
 80084c4:	6102      	str	r2, [r0, #16]
 80084c6:	bf08      	it	eq
 80084c8:	6143      	streq	r3, [r0, #20]
 80084ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084ce:	f8dc c000 	ldr.w	ip, [ip]
 80084d2:	fa0c fc08 	lsl.w	ip, ip, r8
 80084d6:	ea4c 0707 	orr.w	r7, ip, r7
 80084da:	f849 7b04 	str.w	r7, [r9], #4
 80084de:	f85e 7b04 	ldr.w	r7, [lr], #4
 80084e2:	40cf      	lsrs	r7, r1
 80084e4:	e7da      	b.n	800849c <rshift+0x4c>
 80084e6:	f851 cb04 	ldr.w	ip, [r1], #4
 80084ea:	f847 cf04 	str.w	ip, [r7, #4]!
 80084ee:	e7c3      	b.n	8008478 <rshift+0x28>
 80084f0:	4623      	mov	r3, r4
 80084f2:	e7e1      	b.n	80084b8 <rshift+0x68>

080084f4 <__hexdig_fun>:
 80084f4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80084f8:	2b09      	cmp	r3, #9
 80084fa:	d802      	bhi.n	8008502 <__hexdig_fun+0xe>
 80084fc:	3820      	subs	r0, #32
 80084fe:	b2c0      	uxtb	r0, r0
 8008500:	4770      	bx	lr
 8008502:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008506:	2b05      	cmp	r3, #5
 8008508:	d801      	bhi.n	800850e <__hexdig_fun+0x1a>
 800850a:	3847      	subs	r0, #71	; 0x47
 800850c:	e7f7      	b.n	80084fe <__hexdig_fun+0xa>
 800850e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008512:	2b05      	cmp	r3, #5
 8008514:	d801      	bhi.n	800851a <__hexdig_fun+0x26>
 8008516:	3827      	subs	r0, #39	; 0x27
 8008518:	e7f1      	b.n	80084fe <__hexdig_fun+0xa>
 800851a:	2000      	movs	r0, #0
 800851c:	4770      	bx	lr
	...

08008520 <__gethex>:
 8008520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008524:	4617      	mov	r7, r2
 8008526:	680a      	ldr	r2, [r1, #0]
 8008528:	b085      	sub	sp, #20
 800852a:	f102 0b02 	add.w	fp, r2, #2
 800852e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008532:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008536:	4681      	mov	r9, r0
 8008538:	468a      	mov	sl, r1
 800853a:	9302      	str	r3, [sp, #8]
 800853c:	32fe      	adds	r2, #254	; 0xfe
 800853e:	eb02 030b 	add.w	r3, r2, fp
 8008542:	46d8      	mov	r8, fp
 8008544:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008548:	9301      	str	r3, [sp, #4]
 800854a:	2830      	cmp	r0, #48	; 0x30
 800854c:	d0f7      	beq.n	800853e <__gethex+0x1e>
 800854e:	f7ff ffd1 	bl	80084f4 <__hexdig_fun>
 8008552:	4604      	mov	r4, r0
 8008554:	2800      	cmp	r0, #0
 8008556:	d138      	bne.n	80085ca <__gethex+0xaa>
 8008558:	49a7      	ldr	r1, [pc, #668]	; (80087f8 <__gethex+0x2d8>)
 800855a:	2201      	movs	r2, #1
 800855c:	4640      	mov	r0, r8
 800855e:	f7ff ff0b 	bl	8008378 <strncmp>
 8008562:	4606      	mov	r6, r0
 8008564:	2800      	cmp	r0, #0
 8008566:	d169      	bne.n	800863c <__gethex+0x11c>
 8008568:	f898 0001 	ldrb.w	r0, [r8, #1]
 800856c:	465d      	mov	r5, fp
 800856e:	f7ff ffc1 	bl	80084f4 <__hexdig_fun>
 8008572:	2800      	cmp	r0, #0
 8008574:	d064      	beq.n	8008640 <__gethex+0x120>
 8008576:	465a      	mov	r2, fp
 8008578:	7810      	ldrb	r0, [r2, #0]
 800857a:	2830      	cmp	r0, #48	; 0x30
 800857c:	4690      	mov	r8, r2
 800857e:	f102 0201 	add.w	r2, r2, #1
 8008582:	d0f9      	beq.n	8008578 <__gethex+0x58>
 8008584:	f7ff ffb6 	bl	80084f4 <__hexdig_fun>
 8008588:	2301      	movs	r3, #1
 800858a:	fab0 f480 	clz	r4, r0
 800858e:	0964      	lsrs	r4, r4, #5
 8008590:	465e      	mov	r6, fp
 8008592:	9301      	str	r3, [sp, #4]
 8008594:	4642      	mov	r2, r8
 8008596:	4615      	mov	r5, r2
 8008598:	3201      	adds	r2, #1
 800859a:	7828      	ldrb	r0, [r5, #0]
 800859c:	f7ff ffaa 	bl	80084f4 <__hexdig_fun>
 80085a0:	2800      	cmp	r0, #0
 80085a2:	d1f8      	bne.n	8008596 <__gethex+0x76>
 80085a4:	4994      	ldr	r1, [pc, #592]	; (80087f8 <__gethex+0x2d8>)
 80085a6:	2201      	movs	r2, #1
 80085a8:	4628      	mov	r0, r5
 80085aa:	f7ff fee5 	bl	8008378 <strncmp>
 80085ae:	b978      	cbnz	r0, 80085d0 <__gethex+0xb0>
 80085b0:	b946      	cbnz	r6, 80085c4 <__gethex+0xa4>
 80085b2:	1c6e      	adds	r6, r5, #1
 80085b4:	4632      	mov	r2, r6
 80085b6:	4615      	mov	r5, r2
 80085b8:	3201      	adds	r2, #1
 80085ba:	7828      	ldrb	r0, [r5, #0]
 80085bc:	f7ff ff9a 	bl	80084f4 <__hexdig_fun>
 80085c0:	2800      	cmp	r0, #0
 80085c2:	d1f8      	bne.n	80085b6 <__gethex+0x96>
 80085c4:	1b73      	subs	r3, r6, r5
 80085c6:	009e      	lsls	r6, r3, #2
 80085c8:	e004      	b.n	80085d4 <__gethex+0xb4>
 80085ca:	2400      	movs	r4, #0
 80085cc:	4626      	mov	r6, r4
 80085ce:	e7e1      	b.n	8008594 <__gethex+0x74>
 80085d0:	2e00      	cmp	r6, #0
 80085d2:	d1f7      	bne.n	80085c4 <__gethex+0xa4>
 80085d4:	782b      	ldrb	r3, [r5, #0]
 80085d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80085da:	2b50      	cmp	r3, #80	; 0x50
 80085dc:	d13d      	bne.n	800865a <__gethex+0x13a>
 80085de:	786b      	ldrb	r3, [r5, #1]
 80085e0:	2b2b      	cmp	r3, #43	; 0x2b
 80085e2:	d02f      	beq.n	8008644 <__gethex+0x124>
 80085e4:	2b2d      	cmp	r3, #45	; 0x2d
 80085e6:	d031      	beq.n	800864c <__gethex+0x12c>
 80085e8:	1c69      	adds	r1, r5, #1
 80085ea:	f04f 0b00 	mov.w	fp, #0
 80085ee:	7808      	ldrb	r0, [r1, #0]
 80085f0:	f7ff ff80 	bl	80084f4 <__hexdig_fun>
 80085f4:	1e42      	subs	r2, r0, #1
 80085f6:	b2d2      	uxtb	r2, r2
 80085f8:	2a18      	cmp	r2, #24
 80085fa:	d82e      	bhi.n	800865a <__gethex+0x13a>
 80085fc:	f1a0 0210 	sub.w	r2, r0, #16
 8008600:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008604:	f7ff ff76 	bl	80084f4 <__hexdig_fun>
 8008608:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800860c:	fa5f fc8c 	uxtb.w	ip, ip
 8008610:	f1bc 0f18 	cmp.w	ip, #24
 8008614:	d91d      	bls.n	8008652 <__gethex+0x132>
 8008616:	f1bb 0f00 	cmp.w	fp, #0
 800861a:	d000      	beq.n	800861e <__gethex+0xfe>
 800861c:	4252      	negs	r2, r2
 800861e:	4416      	add	r6, r2
 8008620:	f8ca 1000 	str.w	r1, [sl]
 8008624:	b1dc      	cbz	r4, 800865e <__gethex+0x13e>
 8008626:	9b01      	ldr	r3, [sp, #4]
 8008628:	2b00      	cmp	r3, #0
 800862a:	bf14      	ite	ne
 800862c:	f04f 0800 	movne.w	r8, #0
 8008630:	f04f 0806 	moveq.w	r8, #6
 8008634:	4640      	mov	r0, r8
 8008636:	b005      	add	sp, #20
 8008638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800863c:	4645      	mov	r5, r8
 800863e:	4626      	mov	r6, r4
 8008640:	2401      	movs	r4, #1
 8008642:	e7c7      	b.n	80085d4 <__gethex+0xb4>
 8008644:	f04f 0b00 	mov.w	fp, #0
 8008648:	1ca9      	adds	r1, r5, #2
 800864a:	e7d0      	b.n	80085ee <__gethex+0xce>
 800864c:	f04f 0b01 	mov.w	fp, #1
 8008650:	e7fa      	b.n	8008648 <__gethex+0x128>
 8008652:	230a      	movs	r3, #10
 8008654:	fb03 0002 	mla	r0, r3, r2, r0
 8008658:	e7d0      	b.n	80085fc <__gethex+0xdc>
 800865a:	4629      	mov	r1, r5
 800865c:	e7e0      	b.n	8008620 <__gethex+0x100>
 800865e:	eba5 0308 	sub.w	r3, r5, r8
 8008662:	3b01      	subs	r3, #1
 8008664:	4621      	mov	r1, r4
 8008666:	2b07      	cmp	r3, #7
 8008668:	dc0a      	bgt.n	8008680 <__gethex+0x160>
 800866a:	4648      	mov	r0, r9
 800866c:	f7fe f964 	bl	8006938 <_Balloc>
 8008670:	4604      	mov	r4, r0
 8008672:	b940      	cbnz	r0, 8008686 <__gethex+0x166>
 8008674:	4b61      	ldr	r3, [pc, #388]	; (80087fc <__gethex+0x2dc>)
 8008676:	4602      	mov	r2, r0
 8008678:	21e4      	movs	r1, #228	; 0xe4
 800867a:	4861      	ldr	r0, [pc, #388]	; (8008800 <__gethex+0x2e0>)
 800867c:	f7ff feb4 	bl	80083e8 <__assert_func>
 8008680:	3101      	adds	r1, #1
 8008682:	105b      	asrs	r3, r3, #1
 8008684:	e7ef      	b.n	8008666 <__gethex+0x146>
 8008686:	f100 0a14 	add.w	sl, r0, #20
 800868a:	2300      	movs	r3, #0
 800868c:	495a      	ldr	r1, [pc, #360]	; (80087f8 <__gethex+0x2d8>)
 800868e:	f8cd a004 	str.w	sl, [sp, #4]
 8008692:	469b      	mov	fp, r3
 8008694:	45a8      	cmp	r8, r5
 8008696:	d342      	bcc.n	800871e <__gethex+0x1fe>
 8008698:	9801      	ldr	r0, [sp, #4]
 800869a:	f840 bb04 	str.w	fp, [r0], #4
 800869e:	eba0 000a 	sub.w	r0, r0, sl
 80086a2:	1080      	asrs	r0, r0, #2
 80086a4:	6120      	str	r0, [r4, #16]
 80086a6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80086aa:	4658      	mov	r0, fp
 80086ac:	f7fe fa36 	bl	8006b1c <__hi0bits>
 80086b0:	683d      	ldr	r5, [r7, #0]
 80086b2:	eba8 0000 	sub.w	r0, r8, r0
 80086b6:	42a8      	cmp	r0, r5
 80086b8:	dd59      	ble.n	800876e <__gethex+0x24e>
 80086ba:	eba0 0805 	sub.w	r8, r0, r5
 80086be:	4641      	mov	r1, r8
 80086c0:	4620      	mov	r0, r4
 80086c2:	f7fe fdc2 	bl	800724a <__any_on>
 80086c6:	4683      	mov	fp, r0
 80086c8:	b1b8      	cbz	r0, 80086fa <__gethex+0x1da>
 80086ca:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80086ce:	1159      	asrs	r1, r3, #5
 80086d0:	f003 021f 	and.w	r2, r3, #31
 80086d4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80086d8:	f04f 0b01 	mov.w	fp, #1
 80086dc:	fa0b f202 	lsl.w	r2, fp, r2
 80086e0:	420a      	tst	r2, r1
 80086e2:	d00a      	beq.n	80086fa <__gethex+0x1da>
 80086e4:	455b      	cmp	r3, fp
 80086e6:	dd06      	ble.n	80086f6 <__gethex+0x1d6>
 80086e8:	f1a8 0102 	sub.w	r1, r8, #2
 80086ec:	4620      	mov	r0, r4
 80086ee:	f7fe fdac 	bl	800724a <__any_on>
 80086f2:	2800      	cmp	r0, #0
 80086f4:	d138      	bne.n	8008768 <__gethex+0x248>
 80086f6:	f04f 0b02 	mov.w	fp, #2
 80086fa:	4641      	mov	r1, r8
 80086fc:	4620      	mov	r0, r4
 80086fe:	f7ff fea7 	bl	8008450 <rshift>
 8008702:	4446      	add	r6, r8
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	42b3      	cmp	r3, r6
 8008708:	da41      	bge.n	800878e <__gethex+0x26e>
 800870a:	4621      	mov	r1, r4
 800870c:	4648      	mov	r0, r9
 800870e:	f7fe f953 	bl	80069b8 <_Bfree>
 8008712:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008714:	2300      	movs	r3, #0
 8008716:	6013      	str	r3, [r2, #0]
 8008718:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800871c:	e78a      	b.n	8008634 <__gethex+0x114>
 800871e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008722:	2a2e      	cmp	r2, #46	; 0x2e
 8008724:	d014      	beq.n	8008750 <__gethex+0x230>
 8008726:	2b20      	cmp	r3, #32
 8008728:	d106      	bne.n	8008738 <__gethex+0x218>
 800872a:	9b01      	ldr	r3, [sp, #4]
 800872c:	f843 bb04 	str.w	fp, [r3], #4
 8008730:	f04f 0b00 	mov.w	fp, #0
 8008734:	9301      	str	r3, [sp, #4]
 8008736:	465b      	mov	r3, fp
 8008738:	7828      	ldrb	r0, [r5, #0]
 800873a:	9303      	str	r3, [sp, #12]
 800873c:	f7ff feda 	bl	80084f4 <__hexdig_fun>
 8008740:	9b03      	ldr	r3, [sp, #12]
 8008742:	f000 000f 	and.w	r0, r0, #15
 8008746:	4098      	lsls	r0, r3
 8008748:	ea4b 0b00 	orr.w	fp, fp, r0
 800874c:	3304      	adds	r3, #4
 800874e:	e7a1      	b.n	8008694 <__gethex+0x174>
 8008750:	45a8      	cmp	r8, r5
 8008752:	d8e8      	bhi.n	8008726 <__gethex+0x206>
 8008754:	2201      	movs	r2, #1
 8008756:	4628      	mov	r0, r5
 8008758:	9303      	str	r3, [sp, #12]
 800875a:	f7ff fe0d 	bl	8008378 <strncmp>
 800875e:	4926      	ldr	r1, [pc, #152]	; (80087f8 <__gethex+0x2d8>)
 8008760:	9b03      	ldr	r3, [sp, #12]
 8008762:	2800      	cmp	r0, #0
 8008764:	d1df      	bne.n	8008726 <__gethex+0x206>
 8008766:	e795      	b.n	8008694 <__gethex+0x174>
 8008768:	f04f 0b03 	mov.w	fp, #3
 800876c:	e7c5      	b.n	80086fa <__gethex+0x1da>
 800876e:	da0b      	bge.n	8008788 <__gethex+0x268>
 8008770:	eba5 0800 	sub.w	r8, r5, r0
 8008774:	4621      	mov	r1, r4
 8008776:	4642      	mov	r2, r8
 8008778:	4648      	mov	r0, r9
 800877a:	f7fe fb37 	bl	8006dec <__lshift>
 800877e:	eba6 0608 	sub.w	r6, r6, r8
 8008782:	4604      	mov	r4, r0
 8008784:	f100 0a14 	add.w	sl, r0, #20
 8008788:	f04f 0b00 	mov.w	fp, #0
 800878c:	e7ba      	b.n	8008704 <__gethex+0x1e4>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	42b3      	cmp	r3, r6
 8008792:	dd73      	ble.n	800887c <__gethex+0x35c>
 8008794:	1b9e      	subs	r6, r3, r6
 8008796:	42b5      	cmp	r5, r6
 8008798:	dc34      	bgt.n	8008804 <__gethex+0x2e4>
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2b02      	cmp	r3, #2
 800879e:	d023      	beq.n	80087e8 <__gethex+0x2c8>
 80087a0:	2b03      	cmp	r3, #3
 80087a2:	d025      	beq.n	80087f0 <__gethex+0x2d0>
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d115      	bne.n	80087d4 <__gethex+0x2b4>
 80087a8:	42b5      	cmp	r5, r6
 80087aa:	d113      	bne.n	80087d4 <__gethex+0x2b4>
 80087ac:	2d01      	cmp	r5, #1
 80087ae:	d10b      	bne.n	80087c8 <__gethex+0x2a8>
 80087b0:	9a02      	ldr	r2, [sp, #8]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6013      	str	r3, [r2, #0]
 80087b6:	2301      	movs	r3, #1
 80087b8:	6123      	str	r3, [r4, #16]
 80087ba:	f8ca 3000 	str.w	r3, [sl]
 80087be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087c0:	f04f 0862 	mov.w	r8, #98	; 0x62
 80087c4:	601c      	str	r4, [r3, #0]
 80087c6:	e735      	b.n	8008634 <__gethex+0x114>
 80087c8:	1e69      	subs	r1, r5, #1
 80087ca:	4620      	mov	r0, r4
 80087cc:	f7fe fd3d 	bl	800724a <__any_on>
 80087d0:	2800      	cmp	r0, #0
 80087d2:	d1ed      	bne.n	80087b0 <__gethex+0x290>
 80087d4:	4621      	mov	r1, r4
 80087d6:	4648      	mov	r0, r9
 80087d8:	f7fe f8ee 	bl	80069b8 <_Bfree>
 80087dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087de:	2300      	movs	r3, #0
 80087e0:	6013      	str	r3, [r2, #0]
 80087e2:	f04f 0850 	mov.w	r8, #80	; 0x50
 80087e6:	e725      	b.n	8008634 <__gethex+0x114>
 80087e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d1f2      	bne.n	80087d4 <__gethex+0x2b4>
 80087ee:	e7df      	b.n	80087b0 <__gethex+0x290>
 80087f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d1dc      	bne.n	80087b0 <__gethex+0x290>
 80087f6:	e7ed      	b.n	80087d4 <__gethex+0x2b4>
 80087f8:	0800939c 	.word	0x0800939c
 80087fc:	08009231 	.word	0x08009231
 8008800:	08009546 	.word	0x08009546
 8008804:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8008808:	f1bb 0f00 	cmp.w	fp, #0
 800880c:	d133      	bne.n	8008876 <__gethex+0x356>
 800880e:	f1b8 0f00 	cmp.w	r8, #0
 8008812:	d004      	beq.n	800881e <__gethex+0x2fe>
 8008814:	4641      	mov	r1, r8
 8008816:	4620      	mov	r0, r4
 8008818:	f7fe fd17 	bl	800724a <__any_on>
 800881c:	4683      	mov	fp, r0
 800881e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008822:	2301      	movs	r3, #1
 8008824:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008828:	f008 081f 	and.w	r8, r8, #31
 800882c:	fa03 f308 	lsl.w	r3, r3, r8
 8008830:	4213      	tst	r3, r2
 8008832:	4631      	mov	r1, r6
 8008834:	4620      	mov	r0, r4
 8008836:	bf18      	it	ne
 8008838:	f04b 0b02 	orrne.w	fp, fp, #2
 800883c:	1bad      	subs	r5, r5, r6
 800883e:	f7ff fe07 	bl	8008450 <rshift>
 8008842:	687e      	ldr	r6, [r7, #4]
 8008844:	f04f 0802 	mov.w	r8, #2
 8008848:	f1bb 0f00 	cmp.w	fp, #0
 800884c:	d04a      	beq.n	80088e4 <__gethex+0x3c4>
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2b02      	cmp	r3, #2
 8008852:	d016      	beq.n	8008882 <__gethex+0x362>
 8008854:	2b03      	cmp	r3, #3
 8008856:	d018      	beq.n	800888a <__gethex+0x36a>
 8008858:	2b01      	cmp	r3, #1
 800885a:	d109      	bne.n	8008870 <__gethex+0x350>
 800885c:	f01b 0f02 	tst.w	fp, #2
 8008860:	d006      	beq.n	8008870 <__gethex+0x350>
 8008862:	f8da 3000 	ldr.w	r3, [sl]
 8008866:	ea4b 0b03 	orr.w	fp, fp, r3
 800886a:	f01b 0f01 	tst.w	fp, #1
 800886e:	d10f      	bne.n	8008890 <__gethex+0x370>
 8008870:	f048 0810 	orr.w	r8, r8, #16
 8008874:	e036      	b.n	80088e4 <__gethex+0x3c4>
 8008876:	f04f 0b01 	mov.w	fp, #1
 800887a:	e7d0      	b.n	800881e <__gethex+0x2fe>
 800887c:	f04f 0801 	mov.w	r8, #1
 8008880:	e7e2      	b.n	8008848 <__gethex+0x328>
 8008882:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008884:	f1c3 0301 	rsb	r3, r3, #1
 8008888:	930f      	str	r3, [sp, #60]	; 0x3c
 800888a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800888c:	2b00      	cmp	r3, #0
 800888e:	d0ef      	beq.n	8008870 <__gethex+0x350>
 8008890:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008894:	f104 0214 	add.w	r2, r4, #20
 8008898:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800889c:	9301      	str	r3, [sp, #4]
 800889e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80088a2:	2300      	movs	r3, #0
 80088a4:	4694      	mov	ip, r2
 80088a6:	f852 1b04 	ldr.w	r1, [r2], #4
 80088aa:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80088ae:	d01e      	beq.n	80088ee <__gethex+0x3ce>
 80088b0:	3101      	adds	r1, #1
 80088b2:	f8cc 1000 	str.w	r1, [ip]
 80088b6:	f1b8 0f02 	cmp.w	r8, #2
 80088ba:	f104 0214 	add.w	r2, r4, #20
 80088be:	d13d      	bne.n	800893c <__gethex+0x41c>
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	3b01      	subs	r3, #1
 80088c4:	42ab      	cmp	r3, r5
 80088c6:	d10b      	bne.n	80088e0 <__gethex+0x3c0>
 80088c8:	1169      	asrs	r1, r5, #5
 80088ca:	2301      	movs	r3, #1
 80088cc:	f005 051f 	and.w	r5, r5, #31
 80088d0:	fa03 f505 	lsl.w	r5, r3, r5
 80088d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80088d8:	421d      	tst	r5, r3
 80088da:	bf18      	it	ne
 80088dc:	f04f 0801 	movne.w	r8, #1
 80088e0:	f048 0820 	orr.w	r8, r8, #32
 80088e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088e6:	601c      	str	r4, [r3, #0]
 80088e8:	9b02      	ldr	r3, [sp, #8]
 80088ea:	601e      	str	r6, [r3, #0]
 80088ec:	e6a2      	b.n	8008634 <__gethex+0x114>
 80088ee:	4290      	cmp	r0, r2
 80088f0:	f842 3c04 	str.w	r3, [r2, #-4]
 80088f4:	d8d6      	bhi.n	80088a4 <__gethex+0x384>
 80088f6:	68a2      	ldr	r2, [r4, #8]
 80088f8:	4593      	cmp	fp, r2
 80088fa:	db17      	blt.n	800892c <__gethex+0x40c>
 80088fc:	6861      	ldr	r1, [r4, #4]
 80088fe:	4648      	mov	r0, r9
 8008900:	3101      	adds	r1, #1
 8008902:	f7fe f819 	bl	8006938 <_Balloc>
 8008906:	4682      	mov	sl, r0
 8008908:	b918      	cbnz	r0, 8008912 <__gethex+0x3f2>
 800890a:	4b1b      	ldr	r3, [pc, #108]	; (8008978 <__gethex+0x458>)
 800890c:	4602      	mov	r2, r0
 800890e:	2184      	movs	r1, #132	; 0x84
 8008910:	e6b3      	b.n	800867a <__gethex+0x15a>
 8008912:	6922      	ldr	r2, [r4, #16]
 8008914:	3202      	adds	r2, #2
 8008916:	f104 010c 	add.w	r1, r4, #12
 800891a:	0092      	lsls	r2, r2, #2
 800891c:	300c      	adds	r0, #12
 800891e:	f7ff fd4d 	bl	80083bc <memcpy>
 8008922:	4621      	mov	r1, r4
 8008924:	4648      	mov	r0, r9
 8008926:	f7fe f847 	bl	80069b8 <_Bfree>
 800892a:	4654      	mov	r4, sl
 800892c:	6922      	ldr	r2, [r4, #16]
 800892e:	1c51      	adds	r1, r2, #1
 8008930:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008934:	6121      	str	r1, [r4, #16]
 8008936:	2101      	movs	r1, #1
 8008938:	6151      	str	r1, [r2, #20]
 800893a:	e7bc      	b.n	80088b6 <__gethex+0x396>
 800893c:	6921      	ldr	r1, [r4, #16]
 800893e:	4559      	cmp	r1, fp
 8008940:	dd0b      	ble.n	800895a <__gethex+0x43a>
 8008942:	2101      	movs	r1, #1
 8008944:	4620      	mov	r0, r4
 8008946:	f7ff fd83 	bl	8008450 <rshift>
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	3601      	adds	r6, #1
 800894e:	42b3      	cmp	r3, r6
 8008950:	f6ff aedb 	blt.w	800870a <__gethex+0x1ea>
 8008954:	f04f 0801 	mov.w	r8, #1
 8008958:	e7c2      	b.n	80088e0 <__gethex+0x3c0>
 800895a:	f015 051f 	ands.w	r5, r5, #31
 800895e:	d0f9      	beq.n	8008954 <__gethex+0x434>
 8008960:	9b01      	ldr	r3, [sp, #4]
 8008962:	441a      	add	r2, r3
 8008964:	f1c5 0520 	rsb	r5, r5, #32
 8008968:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800896c:	f7fe f8d6 	bl	8006b1c <__hi0bits>
 8008970:	42a8      	cmp	r0, r5
 8008972:	dbe6      	blt.n	8008942 <__gethex+0x422>
 8008974:	e7ee      	b.n	8008954 <__gethex+0x434>
 8008976:	bf00      	nop
 8008978:	08009231 	.word	0x08009231

0800897c <L_shift>:
 800897c:	f1c2 0208 	rsb	r2, r2, #8
 8008980:	0092      	lsls	r2, r2, #2
 8008982:	b570      	push	{r4, r5, r6, lr}
 8008984:	f1c2 0620 	rsb	r6, r2, #32
 8008988:	6843      	ldr	r3, [r0, #4]
 800898a:	6804      	ldr	r4, [r0, #0]
 800898c:	fa03 f506 	lsl.w	r5, r3, r6
 8008990:	432c      	orrs	r4, r5
 8008992:	40d3      	lsrs	r3, r2
 8008994:	6004      	str	r4, [r0, #0]
 8008996:	f840 3f04 	str.w	r3, [r0, #4]!
 800899a:	4288      	cmp	r0, r1
 800899c:	d3f4      	bcc.n	8008988 <L_shift+0xc>
 800899e:	bd70      	pop	{r4, r5, r6, pc}

080089a0 <__match>:
 80089a0:	b530      	push	{r4, r5, lr}
 80089a2:	6803      	ldr	r3, [r0, #0]
 80089a4:	3301      	adds	r3, #1
 80089a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089aa:	b914      	cbnz	r4, 80089b2 <__match+0x12>
 80089ac:	6003      	str	r3, [r0, #0]
 80089ae:	2001      	movs	r0, #1
 80089b0:	bd30      	pop	{r4, r5, pc}
 80089b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80089ba:	2d19      	cmp	r5, #25
 80089bc:	bf98      	it	ls
 80089be:	3220      	addls	r2, #32
 80089c0:	42a2      	cmp	r2, r4
 80089c2:	d0f0      	beq.n	80089a6 <__match+0x6>
 80089c4:	2000      	movs	r0, #0
 80089c6:	e7f3      	b.n	80089b0 <__match+0x10>

080089c8 <__hexnan>:
 80089c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089cc:	680b      	ldr	r3, [r1, #0]
 80089ce:	6801      	ldr	r1, [r0, #0]
 80089d0:	115e      	asrs	r6, r3, #5
 80089d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80089d6:	f013 031f 	ands.w	r3, r3, #31
 80089da:	b087      	sub	sp, #28
 80089dc:	bf18      	it	ne
 80089de:	3604      	addne	r6, #4
 80089e0:	2500      	movs	r5, #0
 80089e2:	1f37      	subs	r7, r6, #4
 80089e4:	4682      	mov	sl, r0
 80089e6:	4690      	mov	r8, r2
 80089e8:	9301      	str	r3, [sp, #4]
 80089ea:	f846 5c04 	str.w	r5, [r6, #-4]
 80089ee:	46b9      	mov	r9, r7
 80089f0:	463c      	mov	r4, r7
 80089f2:	9502      	str	r5, [sp, #8]
 80089f4:	46ab      	mov	fp, r5
 80089f6:	784a      	ldrb	r2, [r1, #1]
 80089f8:	1c4b      	adds	r3, r1, #1
 80089fa:	9303      	str	r3, [sp, #12]
 80089fc:	b342      	cbz	r2, 8008a50 <__hexnan+0x88>
 80089fe:	4610      	mov	r0, r2
 8008a00:	9105      	str	r1, [sp, #20]
 8008a02:	9204      	str	r2, [sp, #16]
 8008a04:	f7ff fd76 	bl	80084f4 <__hexdig_fun>
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	d14f      	bne.n	8008aac <__hexnan+0xe4>
 8008a0c:	9a04      	ldr	r2, [sp, #16]
 8008a0e:	9905      	ldr	r1, [sp, #20]
 8008a10:	2a20      	cmp	r2, #32
 8008a12:	d818      	bhi.n	8008a46 <__hexnan+0x7e>
 8008a14:	9b02      	ldr	r3, [sp, #8]
 8008a16:	459b      	cmp	fp, r3
 8008a18:	dd13      	ble.n	8008a42 <__hexnan+0x7a>
 8008a1a:	454c      	cmp	r4, r9
 8008a1c:	d206      	bcs.n	8008a2c <__hexnan+0x64>
 8008a1e:	2d07      	cmp	r5, #7
 8008a20:	dc04      	bgt.n	8008a2c <__hexnan+0x64>
 8008a22:	462a      	mov	r2, r5
 8008a24:	4649      	mov	r1, r9
 8008a26:	4620      	mov	r0, r4
 8008a28:	f7ff ffa8 	bl	800897c <L_shift>
 8008a2c:	4544      	cmp	r4, r8
 8008a2e:	d950      	bls.n	8008ad2 <__hexnan+0x10a>
 8008a30:	2300      	movs	r3, #0
 8008a32:	f1a4 0904 	sub.w	r9, r4, #4
 8008a36:	f844 3c04 	str.w	r3, [r4, #-4]
 8008a3a:	f8cd b008 	str.w	fp, [sp, #8]
 8008a3e:	464c      	mov	r4, r9
 8008a40:	461d      	mov	r5, r3
 8008a42:	9903      	ldr	r1, [sp, #12]
 8008a44:	e7d7      	b.n	80089f6 <__hexnan+0x2e>
 8008a46:	2a29      	cmp	r2, #41	; 0x29
 8008a48:	d155      	bne.n	8008af6 <__hexnan+0x12e>
 8008a4a:	3102      	adds	r1, #2
 8008a4c:	f8ca 1000 	str.w	r1, [sl]
 8008a50:	f1bb 0f00 	cmp.w	fp, #0
 8008a54:	d04f      	beq.n	8008af6 <__hexnan+0x12e>
 8008a56:	454c      	cmp	r4, r9
 8008a58:	d206      	bcs.n	8008a68 <__hexnan+0xa0>
 8008a5a:	2d07      	cmp	r5, #7
 8008a5c:	dc04      	bgt.n	8008a68 <__hexnan+0xa0>
 8008a5e:	462a      	mov	r2, r5
 8008a60:	4649      	mov	r1, r9
 8008a62:	4620      	mov	r0, r4
 8008a64:	f7ff ff8a 	bl	800897c <L_shift>
 8008a68:	4544      	cmp	r4, r8
 8008a6a:	d934      	bls.n	8008ad6 <__hexnan+0x10e>
 8008a6c:	f1a8 0204 	sub.w	r2, r8, #4
 8008a70:	4623      	mov	r3, r4
 8008a72:	f853 1b04 	ldr.w	r1, [r3], #4
 8008a76:	f842 1f04 	str.w	r1, [r2, #4]!
 8008a7a:	429f      	cmp	r7, r3
 8008a7c:	d2f9      	bcs.n	8008a72 <__hexnan+0xaa>
 8008a7e:	1b3b      	subs	r3, r7, r4
 8008a80:	f023 0303 	bic.w	r3, r3, #3
 8008a84:	3304      	adds	r3, #4
 8008a86:	3e03      	subs	r6, #3
 8008a88:	3401      	adds	r4, #1
 8008a8a:	42a6      	cmp	r6, r4
 8008a8c:	bf38      	it	cc
 8008a8e:	2304      	movcc	r3, #4
 8008a90:	4443      	add	r3, r8
 8008a92:	2200      	movs	r2, #0
 8008a94:	f843 2b04 	str.w	r2, [r3], #4
 8008a98:	429f      	cmp	r7, r3
 8008a9a:	d2fb      	bcs.n	8008a94 <__hexnan+0xcc>
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	b91b      	cbnz	r3, 8008aa8 <__hexnan+0xe0>
 8008aa0:	4547      	cmp	r7, r8
 8008aa2:	d126      	bne.n	8008af2 <__hexnan+0x12a>
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	603b      	str	r3, [r7, #0]
 8008aa8:	2005      	movs	r0, #5
 8008aaa:	e025      	b.n	8008af8 <__hexnan+0x130>
 8008aac:	3501      	adds	r5, #1
 8008aae:	2d08      	cmp	r5, #8
 8008ab0:	f10b 0b01 	add.w	fp, fp, #1
 8008ab4:	dd06      	ble.n	8008ac4 <__hexnan+0xfc>
 8008ab6:	4544      	cmp	r4, r8
 8008ab8:	d9c3      	bls.n	8008a42 <__hexnan+0x7a>
 8008aba:	2300      	movs	r3, #0
 8008abc:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ac0:	2501      	movs	r5, #1
 8008ac2:	3c04      	subs	r4, #4
 8008ac4:	6822      	ldr	r2, [r4, #0]
 8008ac6:	f000 000f 	and.w	r0, r0, #15
 8008aca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008ace:	6020      	str	r0, [r4, #0]
 8008ad0:	e7b7      	b.n	8008a42 <__hexnan+0x7a>
 8008ad2:	2508      	movs	r5, #8
 8008ad4:	e7b5      	b.n	8008a42 <__hexnan+0x7a>
 8008ad6:	9b01      	ldr	r3, [sp, #4]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d0df      	beq.n	8008a9c <__hexnan+0xd4>
 8008adc:	f1c3 0320 	rsb	r3, r3, #32
 8008ae0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ae4:	40da      	lsrs	r2, r3
 8008ae6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008aea:	4013      	ands	r3, r2
 8008aec:	f846 3c04 	str.w	r3, [r6, #-4]
 8008af0:	e7d4      	b.n	8008a9c <__hexnan+0xd4>
 8008af2:	3f04      	subs	r7, #4
 8008af4:	e7d2      	b.n	8008a9c <__hexnan+0xd4>
 8008af6:	2004      	movs	r0, #4
 8008af8:	b007      	add	sp, #28
 8008afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008afe <__ascii_mbtowc>:
 8008afe:	b082      	sub	sp, #8
 8008b00:	b901      	cbnz	r1, 8008b04 <__ascii_mbtowc+0x6>
 8008b02:	a901      	add	r1, sp, #4
 8008b04:	b142      	cbz	r2, 8008b18 <__ascii_mbtowc+0x1a>
 8008b06:	b14b      	cbz	r3, 8008b1c <__ascii_mbtowc+0x1e>
 8008b08:	7813      	ldrb	r3, [r2, #0]
 8008b0a:	600b      	str	r3, [r1, #0]
 8008b0c:	7812      	ldrb	r2, [r2, #0]
 8008b0e:	1e10      	subs	r0, r2, #0
 8008b10:	bf18      	it	ne
 8008b12:	2001      	movne	r0, #1
 8008b14:	b002      	add	sp, #8
 8008b16:	4770      	bx	lr
 8008b18:	4610      	mov	r0, r2
 8008b1a:	e7fb      	b.n	8008b14 <__ascii_mbtowc+0x16>
 8008b1c:	f06f 0001 	mvn.w	r0, #1
 8008b20:	e7f8      	b.n	8008b14 <__ascii_mbtowc+0x16>

08008b22 <_realloc_r>:
 8008b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b26:	4680      	mov	r8, r0
 8008b28:	4614      	mov	r4, r2
 8008b2a:	460e      	mov	r6, r1
 8008b2c:	b921      	cbnz	r1, 8008b38 <_realloc_r+0x16>
 8008b2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b32:	4611      	mov	r1, r2
 8008b34:	f7fd be74 	b.w	8006820 <_malloc_r>
 8008b38:	b92a      	cbnz	r2, 8008b46 <_realloc_r+0x24>
 8008b3a:	f7fd fdfd 	bl	8006738 <_free_r>
 8008b3e:	4625      	mov	r5, r4
 8008b40:	4628      	mov	r0, r5
 8008b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b46:	f000 f842 	bl	8008bce <_malloc_usable_size_r>
 8008b4a:	4284      	cmp	r4, r0
 8008b4c:	4607      	mov	r7, r0
 8008b4e:	d802      	bhi.n	8008b56 <_realloc_r+0x34>
 8008b50:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008b54:	d812      	bhi.n	8008b7c <_realloc_r+0x5a>
 8008b56:	4621      	mov	r1, r4
 8008b58:	4640      	mov	r0, r8
 8008b5a:	f7fd fe61 	bl	8006820 <_malloc_r>
 8008b5e:	4605      	mov	r5, r0
 8008b60:	2800      	cmp	r0, #0
 8008b62:	d0ed      	beq.n	8008b40 <_realloc_r+0x1e>
 8008b64:	42bc      	cmp	r4, r7
 8008b66:	4622      	mov	r2, r4
 8008b68:	4631      	mov	r1, r6
 8008b6a:	bf28      	it	cs
 8008b6c:	463a      	movcs	r2, r7
 8008b6e:	f7ff fc25 	bl	80083bc <memcpy>
 8008b72:	4631      	mov	r1, r6
 8008b74:	4640      	mov	r0, r8
 8008b76:	f7fd fddf 	bl	8006738 <_free_r>
 8008b7a:	e7e1      	b.n	8008b40 <_realloc_r+0x1e>
 8008b7c:	4635      	mov	r5, r6
 8008b7e:	e7df      	b.n	8008b40 <_realloc_r+0x1e>

08008b80 <__ascii_wctomb>:
 8008b80:	b149      	cbz	r1, 8008b96 <__ascii_wctomb+0x16>
 8008b82:	2aff      	cmp	r2, #255	; 0xff
 8008b84:	bf85      	ittet	hi
 8008b86:	238a      	movhi	r3, #138	; 0x8a
 8008b88:	6003      	strhi	r3, [r0, #0]
 8008b8a:	700a      	strbls	r2, [r1, #0]
 8008b8c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008b90:	bf98      	it	ls
 8008b92:	2001      	movls	r0, #1
 8008b94:	4770      	bx	lr
 8008b96:	4608      	mov	r0, r1
 8008b98:	4770      	bx	lr
	...

08008b9c <fiprintf>:
 8008b9c:	b40e      	push	{r1, r2, r3}
 8008b9e:	b503      	push	{r0, r1, lr}
 8008ba0:	4601      	mov	r1, r0
 8008ba2:	ab03      	add	r3, sp, #12
 8008ba4:	4805      	ldr	r0, [pc, #20]	; (8008bbc <fiprintf+0x20>)
 8008ba6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008baa:	6800      	ldr	r0, [r0, #0]
 8008bac:	9301      	str	r3, [sp, #4]
 8008bae:	f000 f83f 	bl	8008c30 <_vfiprintf_r>
 8008bb2:	b002      	add	sp, #8
 8008bb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bb8:	b003      	add	sp, #12
 8008bba:	4770      	bx	lr
 8008bbc:	20000064 	.word	0x20000064

08008bc0 <abort>:
 8008bc0:	b508      	push	{r3, lr}
 8008bc2:	2006      	movs	r0, #6
 8008bc4:	f000 fa0c 	bl	8008fe0 <raise>
 8008bc8:	2001      	movs	r0, #1
 8008bca:	f7f8 f929 	bl	8000e20 <_exit>

08008bce <_malloc_usable_size_r>:
 8008bce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bd2:	1f18      	subs	r0, r3, #4
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	bfbc      	itt	lt
 8008bd8:	580b      	ldrlt	r3, [r1, r0]
 8008bda:	18c0      	addlt	r0, r0, r3
 8008bdc:	4770      	bx	lr

08008bde <__sfputc_r>:
 8008bde:	6893      	ldr	r3, [r2, #8]
 8008be0:	3b01      	subs	r3, #1
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	b410      	push	{r4}
 8008be6:	6093      	str	r3, [r2, #8]
 8008be8:	da08      	bge.n	8008bfc <__sfputc_r+0x1e>
 8008bea:	6994      	ldr	r4, [r2, #24]
 8008bec:	42a3      	cmp	r3, r4
 8008bee:	db01      	blt.n	8008bf4 <__sfputc_r+0x16>
 8008bf0:	290a      	cmp	r1, #10
 8008bf2:	d103      	bne.n	8008bfc <__sfputc_r+0x1e>
 8008bf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bf8:	f000 b934 	b.w	8008e64 <__swbuf_r>
 8008bfc:	6813      	ldr	r3, [r2, #0]
 8008bfe:	1c58      	adds	r0, r3, #1
 8008c00:	6010      	str	r0, [r2, #0]
 8008c02:	7019      	strb	r1, [r3, #0]
 8008c04:	4608      	mov	r0, r1
 8008c06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <__sfputs_r>:
 8008c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c0e:	4606      	mov	r6, r0
 8008c10:	460f      	mov	r7, r1
 8008c12:	4614      	mov	r4, r2
 8008c14:	18d5      	adds	r5, r2, r3
 8008c16:	42ac      	cmp	r4, r5
 8008c18:	d101      	bne.n	8008c1e <__sfputs_r+0x12>
 8008c1a:	2000      	movs	r0, #0
 8008c1c:	e007      	b.n	8008c2e <__sfputs_r+0x22>
 8008c1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c22:	463a      	mov	r2, r7
 8008c24:	4630      	mov	r0, r6
 8008c26:	f7ff ffda 	bl	8008bde <__sfputc_r>
 8008c2a:	1c43      	adds	r3, r0, #1
 8008c2c:	d1f3      	bne.n	8008c16 <__sfputs_r+0xa>
 8008c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c30 <_vfiprintf_r>:
 8008c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c34:	460d      	mov	r5, r1
 8008c36:	b09d      	sub	sp, #116	; 0x74
 8008c38:	4614      	mov	r4, r2
 8008c3a:	4698      	mov	r8, r3
 8008c3c:	4606      	mov	r6, r0
 8008c3e:	b118      	cbz	r0, 8008c48 <_vfiprintf_r+0x18>
 8008c40:	6a03      	ldr	r3, [r0, #32]
 8008c42:	b90b      	cbnz	r3, 8008c48 <_vfiprintf_r+0x18>
 8008c44:	f7fc fe64 	bl	8005910 <__sinit>
 8008c48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c4a:	07d9      	lsls	r1, r3, #31
 8008c4c:	d405      	bmi.n	8008c5a <_vfiprintf_r+0x2a>
 8008c4e:	89ab      	ldrh	r3, [r5, #12]
 8008c50:	059a      	lsls	r2, r3, #22
 8008c52:	d402      	bmi.n	8008c5a <_vfiprintf_r+0x2a>
 8008c54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c56:	f7fc ff71 	bl	8005b3c <__retarget_lock_acquire_recursive>
 8008c5a:	89ab      	ldrh	r3, [r5, #12]
 8008c5c:	071b      	lsls	r3, r3, #28
 8008c5e:	d501      	bpl.n	8008c64 <_vfiprintf_r+0x34>
 8008c60:	692b      	ldr	r3, [r5, #16]
 8008c62:	b99b      	cbnz	r3, 8008c8c <_vfiprintf_r+0x5c>
 8008c64:	4629      	mov	r1, r5
 8008c66:	4630      	mov	r0, r6
 8008c68:	f000 f93a 	bl	8008ee0 <__swsetup_r>
 8008c6c:	b170      	cbz	r0, 8008c8c <_vfiprintf_r+0x5c>
 8008c6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c70:	07dc      	lsls	r4, r3, #31
 8008c72:	d504      	bpl.n	8008c7e <_vfiprintf_r+0x4e>
 8008c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c78:	b01d      	add	sp, #116	; 0x74
 8008c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c7e:	89ab      	ldrh	r3, [r5, #12]
 8008c80:	0598      	lsls	r0, r3, #22
 8008c82:	d4f7      	bmi.n	8008c74 <_vfiprintf_r+0x44>
 8008c84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c86:	f7fc ff5a 	bl	8005b3e <__retarget_lock_release_recursive>
 8008c8a:	e7f3      	b.n	8008c74 <_vfiprintf_r+0x44>
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c90:	2320      	movs	r3, #32
 8008c92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c96:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c9a:	2330      	movs	r3, #48	; 0x30
 8008c9c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008e50 <_vfiprintf_r+0x220>
 8008ca0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ca4:	f04f 0901 	mov.w	r9, #1
 8008ca8:	4623      	mov	r3, r4
 8008caa:	469a      	mov	sl, r3
 8008cac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cb0:	b10a      	cbz	r2, 8008cb6 <_vfiprintf_r+0x86>
 8008cb2:	2a25      	cmp	r2, #37	; 0x25
 8008cb4:	d1f9      	bne.n	8008caa <_vfiprintf_r+0x7a>
 8008cb6:	ebba 0b04 	subs.w	fp, sl, r4
 8008cba:	d00b      	beq.n	8008cd4 <_vfiprintf_r+0xa4>
 8008cbc:	465b      	mov	r3, fp
 8008cbe:	4622      	mov	r2, r4
 8008cc0:	4629      	mov	r1, r5
 8008cc2:	4630      	mov	r0, r6
 8008cc4:	f7ff ffa2 	bl	8008c0c <__sfputs_r>
 8008cc8:	3001      	adds	r0, #1
 8008cca:	f000 80a9 	beq.w	8008e20 <_vfiprintf_r+0x1f0>
 8008cce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cd0:	445a      	add	r2, fp
 8008cd2:	9209      	str	r2, [sp, #36]	; 0x24
 8008cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	f000 80a1 	beq.w	8008e20 <_vfiprintf_r+0x1f0>
 8008cde:	2300      	movs	r3, #0
 8008ce0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ce4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ce8:	f10a 0a01 	add.w	sl, sl, #1
 8008cec:	9304      	str	r3, [sp, #16]
 8008cee:	9307      	str	r3, [sp, #28]
 8008cf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008cf4:	931a      	str	r3, [sp, #104]	; 0x68
 8008cf6:	4654      	mov	r4, sl
 8008cf8:	2205      	movs	r2, #5
 8008cfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cfe:	4854      	ldr	r0, [pc, #336]	; (8008e50 <_vfiprintf_r+0x220>)
 8008d00:	f7f7 fa9e 	bl	8000240 <memchr>
 8008d04:	9a04      	ldr	r2, [sp, #16]
 8008d06:	b9d8      	cbnz	r0, 8008d40 <_vfiprintf_r+0x110>
 8008d08:	06d1      	lsls	r1, r2, #27
 8008d0a:	bf44      	itt	mi
 8008d0c:	2320      	movmi	r3, #32
 8008d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d12:	0713      	lsls	r3, r2, #28
 8008d14:	bf44      	itt	mi
 8008d16:	232b      	movmi	r3, #43	; 0x2b
 8008d18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d1c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d20:	2b2a      	cmp	r3, #42	; 0x2a
 8008d22:	d015      	beq.n	8008d50 <_vfiprintf_r+0x120>
 8008d24:	9a07      	ldr	r2, [sp, #28]
 8008d26:	4654      	mov	r4, sl
 8008d28:	2000      	movs	r0, #0
 8008d2a:	f04f 0c0a 	mov.w	ip, #10
 8008d2e:	4621      	mov	r1, r4
 8008d30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d34:	3b30      	subs	r3, #48	; 0x30
 8008d36:	2b09      	cmp	r3, #9
 8008d38:	d94d      	bls.n	8008dd6 <_vfiprintf_r+0x1a6>
 8008d3a:	b1b0      	cbz	r0, 8008d6a <_vfiprintf_r+0x13a>
 8008d3c:	9207      	str	r2, [sp, #28]
 8008d3e:	e014      	b.n	8008d6a <_vfiprintf_r+0x13a>
 8008d40:	eba0 0308 	sub.w	r3, r0, r8
 8008d44:	fa09 f303 	lsl.w	r3, r9, r3
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	9304      	str	r3, [sp, #16]
 8008d4c:	46a2      	mov	sl, r4
 8008d4e:	e7d2      	b.n	8008cf6 <_vfiprintf_r+0xc6>
 8008d50:	9b03      	ldr	r3, [sp, #12]
 8008d52:	1d19      	adds	r1, r3, #4
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	9103      	str	r1, [sp, #12]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	bfbb      	ittet	lt
 8008d5c:	425b      	neglt	r3, r3
 8008d5e:	f042 0202 	orrlt.w	r2, r2, #2
 8008d62:	9307      	strge	r3, [sp, #28]
 8008d64:	9307      	strlt	r3, [sp, #28]
 8008d66:	bfb8      	it	lt
 8008d68:	9204      	strlt	r2, [sp, #16]
 8008d6a:	7823      	ldrb	r3, [r4, #0]
 8008d6c:	2b2e      	cmp	r3, #46	; 0x2e
 8008d6e:	d10c      	bne.n	8008d8a <_vfiprintf_r+0x15a>
 8008d70:	7863      	ldrb	r3, [r4, #1]
 8008d72:	2b2a      	cmp	r3, #42	; 0x2a
 8008d74:	d134      	bne.n	8008de0 <_vfiprintf_r+0x1b0>
 8008d76:	9b03      	ldr	r3, [sp, #12]
 8008d78:	1d1a      	adds	r2, r3, #4
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	9203      	str	r2, [sp, #12]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	bfb8      	it	lt
 8008d82:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008d86:	3402      	adds	r4, #2
 8008d88:	9305      	str	r3, [sp, #20]
 8008d8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008e60 <_vfiprintf_r+0x230>
 8008d8e:	7821      	ldrb	r1, [r4, #0]
 8008d90:	2203      	movs	r2, #3
 8008d92:	4650      	mov	r0, sl
 8008d94:	f7f7 fa54 	bl	8000240 <memchr>
 8008d98:	b138      	cbz	r0, 8008daa <_vfiprintf_r+0x17a>
 8008d9a:	9b04      	ldr	r3, [sp, #16]
 8008d9c:	eba0 000a 	sub.w	r0, r0, sl
 8008da0:	2240      	movs	r2, #64	; 0x40
 8008da2:	4082      	lsls	r2, r0
 8008da4:	4313      	orrs	r3, r2
 8008da6:	3401      	adds	r4, #1
 8008da8:	9304      	str	r3, [sp, #16]
 8008daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dae:	4829      	ldr	r0, [pc, #164]	; (8008e54 <_vfiprintf_r+0x224>)
 8008db0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008db4:	2206      	movs	r2, #6
 8008db6:	f7f7 fa43 	bl	8000240 <memchr>
 8008dba:	2800      	cmp	r0, #0
 8008dbc:	d03f      	beq.n	8008e3e <_vfiprintf_r+0x20e>
 8008dbe:	4b26      	ldr	r3, [pc, #152]	; (8008e58 <_vfiprintf_r+0x228>)
 8008dc0:	bb1b      	cbnz	r3, 8008e0a <_vfiprintf_r+0x1da>
 8008dc2:	9b03      	ldr	r3, [sp, #12]
 8008dc4:	3307      	adds	r3, #7
 8008dc6:	f023 0307 	bic.w	r3, r3, #7
 8008dca:	3308      	adds	r3, #8
 8008dcc:	9303      	str	r3, [sp, #12]
 8008dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dd0:	443b      	add	r3, r7
 8008dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8008dd4:	e768      	b.n	8008ca8 <_vfiprintf_r+0x78>
 8008dd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dda:	460c      	mov	r4, r1
 8008ddc:	2001      	movs	r0, #1
 8008dde:	e7a6      	b.n	8008d2e <_vfiprintf_r+0xfe>
 8008de0:	2300      	movs	r3, #0
 8008de2:	3401      	adds	r4, #1
 8008de4:	9305      	str	r3, [sp, #20]
 8008de6:	4619      	mov	r1, r3
 8008de8:	f04f 0c0a 	mov.w	ip, #10
 8008dec:	4620      	mov	r0, r4
 8008dee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008df2:	3a30      	subs	r2, #48	; 0x30
 8008df4:	2a09      	cmp	r2, #9
 8008df6:	d903      	bls.n	8008e00 <_vfiprintf_r+0x1d0>
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d0c6      	beq.n	8008d8a <_vfiprintf_r+0x15a>
 8008dfc:	9105      	str	r1, [sp, #20]
 8008dfe:	e7c4      	b.n	8008d8a <_vfiprintf_r+0x15a>
 8008e00:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e04:	4604      	mov	r4, r0
 8008e06:	2301      	movs	r3, #1
 8008e08:	e7f0      	b.n	8008dec <_vfiprintf_r+0x1bc>
 8008e0a:	ab03      	add	r3, sp, #12
 8008e0c:	9300      	str	r3, [sp, #0]
 8008e0e:	462a      	mov	r2, r5
 8008e10:	4b12      	ldr	r3, [pc, #72]	; (8008e5c <_vfiprintf_r+0x22c>)
 8008e12:	a904      	add	r1, sp, #16
 8008e14:	4630      	mov	r0, r6
 8008e16:	f7fb ff53 	bl	8004cc0 <_printf_float>
 8008e1a:	4607      	mov	r7, r0
 8008e1c:	1c78      	adds	r0, r7, #1
 8008e1e:	d1d6      	bne.n	8008dce <_vfiprintf_r+0x19e>
 8008e20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e22:	07d9      	lsls	r1, r3, #31
 8008e24:	d405      	bmi.n	8008e32 <_vfiprintf_r+0x202>
 8008e26:	89ab      	ldrh	r3, [r5, #12]
 8008e28:	059a      	lsls	r2, r3, #22
 8008e2a:	d402      	bmi.n	8008e32 <_vfiprintf_r+0x202>
 8008e2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e2e:	f7fc fe86 	bl	8005b3e <__retarget_lock_release_recursive>
 8008e32:	89ab      	ldrh	r3, [r5, #12]
 8008e34:	065b      	lsls	r3, r3, #25
 8008e36:	f53f af1d 	bmi.w	8008c74 <_vfiprintf_r+0x44>
 8008e3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e3c:	e71c      	b.n	8008c78 <_vfiprintf_r+0x48>
 8008e3e:	ab03      	add	r3, sp, #12
 8008e40:	9300      	str	r3, [sp, #0]
 8008e42:	462a      	mov	r2, r5
 8008e44:	4b05      	ldr	r3, [pc, #20]	; (8008e5c <_vfiprintf_r+0x22c>)
 8008e46:	a904      	add	r1, sp, #16
 8008e48:	4630      	mov	r0, r6
 8008e4a:	f7fc f9c1 	bl	80051d0 <_printf_i>
 8008e4e:	e7e4      	b.n	8008e1a <_vfiprintf_r+0x1ea>
 8008e50:	080094f1 	.word	0x080094f1
 8008e54:	080094fb 	.word	0x080094fb
 8008e58:	08004cc1 	.word	0x08004cc1
 8008e5c:	08008c0d 	.word	0x08008c0d
 8008e60:	080094f7 	.word	0x080094f7

08008e64 <__swbuf_r>:
 8008e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e66:	460e      	mov	r6, r1
 8008e68:	4614      	mov	r4, r2
 8008e6a:	4605      	mov	r5, r0
 8008e6c:	b118      	cbz	r0, 8008e76 <__swbuf_r+0x12>
 8008e6e:	6a03      	ldr	r3, [r0, #32]
 8008e70:	b90b      	cbnz	r3, 8008e76 <__swbuf_r+0x12>
 8008e72:	f7fc fd4d 	bl	8005910 <__sinit>
 8008e76:	69a3      	ldr	r3, [r4, #24]
 8008e78:	60a3      	str	r3, [r4, #8]
 8008e7a:	89a3      	ldrh	r3, [r4, #12]
 8008e7c:	071a      	lsls	r2, r3, #28
 8008e7e:	d525      	bpl.n	8008ecc <__swbuf_r+0x68>
 8008e80:	6923      	ldr	r3, [r4, #16]
 8008e82:	b31b      	cbz	r3, 8008ecc <__swbuf_r+0x68>
 8008e84:	6823      	ldr	r3, [r4, #0]
 8008e86:	6922      	ldr	r2, [r4, #16]
 8008e88:	1a98      	subs	r0, r3, r2
 8008e8a:	6963      	ldr	r3, [r4, #20]
 8008e8c:	b2f6      	uxtb	r6, r6
 8008e8e:	4283      	cmp	r3, r0
 8008e90:	4637      	mov	r7, r6
 8008e92:	dc04      	bgt.n	8008e9e <__swbuf_r+0x3a>
 8008e94:	4621      	mov	r1, r4
 8008e96:	4628      	mov	r0, r5
 8008e98:	f7ff fa2c 	bl	80082f4 <_fflush_r>
 8008e9c:	b9e0      	cbnz	r0, 8008ed8 <__swbuf_r+0x74>
 8008e9e:	68a3      	ldr	r3, [r4, #8]
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	60a3      	str	r3, [r4, #8]
 8008ea4:	6823      	ldr	r3, [r4, #0]
 8008ea6:	1c5a      	adds	r2, r3, #1
 8008ea8:	6022      	str	r2, [r4, #0]
 8008eaa:	701e      	strb	r6, [r3, #0]
 8008eac:	6962      	ldr	r2, [r4, #20]
 8008eae:	1c43      	adds	r3, r0, #1
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d004      	beq.n	8008ebe <__swbuf_r+0x5a>
 8008eb4:	89a3      	ldrh	r3, [r4, #12]
 8008eb6:	07db      	lsls	r3, r3, #31
 8008eb8:	d506      	bpl.n	8008ec8 <__swbuf_r+0x64>
 8008eba:	2e0a      	cmp	r6, #10
 8008ebc:	d104      	bne.n	8008ec8 <__swbuf_r+0x64>
 8008ebe:	4621      	mov	r1, r4
 8008ec0:	4628      	mov	r0, r5
 8008ec2:	f7ff fa17 	bl	80082f4 <_fflush_r>
 8008ec6:	b938      	cbnz	r0, 8008ed8 <__swbuf_r+0x74>
 8008ec8:	4638      	mov	r0, r7
 8008eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ecc:	4621      	mov	r1, r4
 8008ece:	4628      	mov	r0, r5
 8008ed0:	f000 f806 	bl	8008ee0 <__swsetup_r>
 8008ed4:	2800      	cmp	r0, #0
 8008ed6:	d0d5      	beq.n	8008e84 <__swbuf_r+0x20>
 8008ed8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008edc:	e7f4      	b.n	8008ec8 <__swbuf_r+0x64>
	...

08008ee0 <__swsetup_r>:
 8008ee0:	b538      	push	{r3, r4, r5, lr}
 8008ee2:	4b2a      	ldr	r3, [pc, #168]	; (8008f8c <__swsetup_r+0xac>)
 8008ee4:	4605      	mov	r5, r0
 8008ee6:	6818      	ldr	r0, [r3, #0]
 8008ee8:	460c      	mov	r4, r1
 8008eea:	b118      	cbz	r0, 8008ef4 <__swsetup_r+0x14>
 8008eec:	6a03      	ldr	r3, [r0, #32]
 8008eee:	b90b      	cbnz	r3, 8008ef4 <__swsetup_r+0x14>
 8008ef0:	f7fc fd0e 	bl	8005910 <__sinit>
 8008ef4:	89a3      	ldrh	r3, [r4, #12]
 8008ef6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008efa:	0718      	lsls	r0, r3, #28
 8008efc:	d422      	bmi.n	8008f44 <__swsetup_r+0x64>
 8008efe:	06d9      	lsls	r1, r3, #27
 8008f00:	d407      	bmi.n	8008f12 <__swsetup_r+0x32>
 8008f02:	2309      	movs	r3, #9
 8008f04:	602b      	str	r3, [r5, #0]
 8008f06:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008f0a:	81a3      	strh	r3, [r4, #12]
 8008f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f10:	e034      	b.n	8008f7c <__swsetup_r+0x9c>
 8008f12:	0758      	lsls	r0, r3, #29
 8008f14:	d512      	bpl.n	8008f3c <__swsetup_r+0x5c>
 8008f16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f18:	b141      	cbz	r1, 8008f2c <__swsetup_r+0x4c>
 8008f1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f1e:	4299      	cmp	r1, r3
 8008f20:	d002      	beq.n	8008f28 <__swsetup_r+0x48>
 8008f22:	4628      	mov	r0, r5
 8008f24:	f7fd fc08 	bl	8006738 <_free_r>
 8008f28:	2300      	movs	r3, #0
 8008f2a:	6363      	str	r3, [r4, #52]	; 0x34
 8008f2c:	89a3      	ldrh	r3, [r4, #12]
 8008f2e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f32:	81a3      	strh	r3, [r4, #12]
 8008f34:	2300      	movs	r3, #0
 8008f36:	6063      	str	r3, [r4, #4]
 8008f38:	6923      	ldr	r3, [r4, #16]
 8008f3a:	6023      	str	r3, [r4, #0]
 8008f3c:	89a3      	ldrh	r3, [r4, #12]
 8008f3e:	f043 0308 	orr.w	r3, r3, #8
 8008f42:	81a3      	strh	r3, [r4, #12]
 8008f44:	6923      	ldr	r3, [r4, #16]
 8008f46:	b94b      	cbnz	r3, 8008f5c <__swsetup_r+0x7c>
 8008f48:	89a3      	ldrh	r3, [r4, #12]
 8008f4a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f52:	d003      	beq.n	8008f5c <__swsetup_r+0x7c>
 8008f54:	4621      	mov	r1, r4
 8008f56:	4628      	mov	r0, r5
 8008f58:	f000 f884 	bl	8009064 <__smakebuf_r>
 8008f5c:	89a0      	ldrh	r0, [r4, #12]
 8008f5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f62:	f010 0301 	ands.w	r3, r0, #1
 8008f66:	d00a      	beq.n	8008f7e <__swsetup_r+0x9e>
 8008f68:	2300      	movs	r3, #0
 8008f6a:	60a3      	str	r3, [r4, #8]
 8008f6c:	6963      	ldr	r3, [r4, #20]
 8008f6e:	425b      	negs	r3, r3
 8008f70:	61a3      	str	r3, [r4, #24]
 8008f72:	6923      	ldr	r3, [r4, #16]
 8008f74:	b943      	cbnz	r3, 8008f88 <__swsetup_r+0xa8>
 8008f76:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f7a:	d1c4      	bne.n	8008f06 <__swsetup_r+0x26>
 8008f7c:	bd38      	pop	{r3, r4, r5, pc}
 8008f7e:	0781      	lsls	r1, r0, #30
 8008f80:	bf58      	it	pl
 8008f82:	6963      	ldrpl	r3, [r4, #20]
 8008f84:	60a3      	str	r3, [r4, #8]
 8008f86:	e7f4      	b.n	8008f72 <__swsetup_r+0x92>
 8008f88:	2000      	movs	r0, #0
 8008f8a:	e7f7      	b.n	8008f7c <__swsetup_r+0x9c>
 8008f8c:	20000064 	.word	0x20000064

08008f90 <_raise_r>:
 8008f90:	291f      	cmp	r1, #31
 8008f92:	b538      	push	{r3, r4, r5, lr}
 8008f94:	4604      	mov	r4, r0
 8008f96:	460d      	mov	r5, r1
 8008f98:	d904      	bls.n	8008fa4 <_raise_r+0x14>
 8008f9a:	2316      	movs	r3, #22
 8008f9c:	6003      	str	r3, [r0, #0]
 8008f9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fa2:	bd38      	pop	{r3, r4, r5, pc}
 8008fa4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008fa6:	b112      	cbz	r2, 8008fae <_raise_r+0x1e>
 8008fa8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008fac:	b94b      	cbnz	r3, 8008fc2 <_raise_r+0x32>
 8008fae:	4620      	mov	r0, r4
 8008fb0:	f000 f830 	bl	8009014 <_getpid_r>
 8008fb4:	462a      	mov	r2, r5
 8008fb6:	4601      	mov	r1, r0
 8008fb8:	4620      	mov	r0, r4
 8008fba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fbe:	f000 b817 	b.w	8008ff0 <_kill_r>
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d00a      	beq.n	8008fdc <_raise_r+0x4c>
 8008fc6:	1c59      	adds	r1, r3, #1
 8008fc8:	d103      	bne.n	8008fd2 <_raise_r+0x42>
 8008fca:	2316      	movs	r3, #22
 8008fcc:	6003      	str	r3, [r0, #0]
 8008fce:	2001      	movs	r0, #1
 8008fd0:	e7e7      	b.n	8008fa2 <_raise_r+0x12>
 8008fd2:	2400      	movs	r4, #0
 8008fd4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008fd8:	4628      	mov	r0, r5
 8008fda:	4798      	blx	r3
 8008fdc:	2000      	movs	r0, #0
 8008fde:	e7e0      	b.n	8008fa2 <_raise_r+0x12>

08008fe0 <raise>:
 8008fe0:	4b02      	ldr	r3, [pc, #8]	; (8008fec <raise+0xc>)
 8008fe2:	4601      	mov	r1, r0
 8008fe4:	6818      	ldr	r0, [r3, #0]
 8008fe6:	f7ff bfd3 	b.w	8008f90 <_raise_r>
 8008fea:	bf00      	nop
 8008fec:	20000064 	.word	0x20000064

08008ff0 <_kill_r>:
 8008ff0:	b538      	push	{r3, r4, r5, lr}
 8008ff2:	4d07      	ldr	r5, [pc, #28]	; (8009010 <_kill_r+0x20>)
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	4604      	mov	r4, r0
 8008ff8:	4608      	mov	r0, r1
 8008ffa:	4611      	mov	r1, r2
 8008ffc:	602b      	str	r3, [r5, #0]
 8008ffe:	f7f7 feff 	bl	8000e00 <_kill>
 8009002:	1c43      	adds	r3, r0, #1
 8009004:	d102      	bne.n	800900c <_kill_r+0x1c>
 8009006:	682b      	ldr	r3, [r5, #0]
 8009008:	b103      	cbz	r3, 800900c <_kill_r+0x1c>
 800900a:	6023      	str	r3, [r4, #0]
 800900c:	bd38      	pop	{r3, r4, r5, pc}
 800900e:	bf00      	nop
 8009010:	20000460 	.word	0x20000460

08009014 <_getpid_r>:
 8009014:	f7f7 beec 	b.w	8000df0 <_getpid>

08009018 <__swhatbuf_r>:
 8009018:	b570      	push	{r4, r5, r6, lr}
 800901a:	460c      	mov	r4, r1
 800901c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009020:	2900      	cmp	r1, #0
 8009022:	b096      	sub	sp, #88	; 0x58
 8009024:	4615      	mov	r5, r2
 8009026:	461e      	mov	r6, r3
 8009028:	da0d      	bge.n	8009046 <__swhatbuf_r+0x2e>
 800902a:	89a3      	ldrh	r3, [r4, #12]
 800902c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009030:	f04f 0100 	mov.w	r1, #0
 8009034:	bf0c      	ite	eq
 8009036:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800903a:	2340      	movne	r3, #64	; 0x40
 800903c:	2000      	movs	r0, #0
 800903e:	6031      	str	r1, [r6, #0]
 8009040:	602b      	str	r3, [r5, #0]
 8009042:	b016      	add	sp, #88	; 0x58
 8009044:	bd70      	pop	{r4, r5, r6, pc}
 8009046:	466a      	mov	r2, sp
 8009048:	f000 f848 	bl	80090dc <_fstat_r>
 800904c:	2800      	cmp	r0, #0
 800904e:	dbec      	blt.n	800902a <__swhatbuf_r+0x12>
 8009050:	9901      	ldr	r1, [sp, #4]
 8009052:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009056:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800905a:	4259      	negs	r1, r3
 800905c:	4159      	adcs	r1, r3
 800905e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009062:	e7eb      	b.n	800903c <__swhatbuf_r+0x24>

08009064 <__smakebuf_r>:
 8009064:	898b      	ldrh	r3, [r1, #12]
 8009066:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009068:	079d      	lsls	r5, r3, #30
 800906a:	4606      	mov	r6, r0
 800906c:	460c      	mov	r4, r1
 800906e:	d507      	bpl.n	8009080 <__smakebuf_r+0x1c>
 8009070:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009074:	6023      	str	r3, [r4, #0]
 8009076:	6123      	str	r3, [r4, #16]
 8009078:	2301      	movs	r3, #1
 800907a:	6163      	str	r3, [r4, #20]
 800907c:	b002      	add	sp, #8
 800907e:	bd70      	pop	{r4, r5, r6, pc}
 8009080:	ab01      	add	r3, sp, #4
 8009082:	466a      	mov	r2, sp
 8009084:	f7ff ffc8 	bl	8009018 <__swhatbuf_r>
 8009088:	9900      	ldr	r1, [sp, #0]
 800908a:	4605      	mov	r5, r0
 800908c:	4630      	mov	r0, r6
 800908e:	f7fd fbc7 	bl	8006820 <_malloc_r>
 8009092:	b948      	cbnz	r0, 80090a8 <__smakebuf_r+0x44>
 8009094:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009098:	059a      	lsls	r2, r3, #22
 800909a:	d4ef      	bmi.n	800907c <__smakebuf_r+0x18>
 800909c:	f023 0303 	bic.w	r3, r3, #3
 80090a0:	f043 0302 	orr.w	r3, r3, #2
 80090a4:	81a3      	strh	r3, [r4, #12]
 80090a6:	e7e3      	b.n	8009070 <__smakebuf_r+0xc>
 80090a8:	89a3      	ldrh	r3, [r4, #12]
 80090aa:	6020      	str	r0, [r4, #0]
 80090ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090b0:	81a3      	strh	r3, [r4, #12]
 80090b2:	9b00      	ldr	r3, [sp, #0]
 80090b4:	6163      	str	r3, [r4, #20]
 80090b6:	9b01      	ldr	r3, [sp, #4]
 80090b8:	6120      	str	r0, [r4, #16]
 80090ba:	b15b      	cbz	r3, 80090d4 <__smakebuf_r+0x70>
 80090bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090c0:	4630      	mov	r0, r6
 80090c2:	f000 f81d 	bl	8009100 <_isatty_r>
 80090c6:	b128      	cbz	r0, 80090d4 <__smakebuf_r+0x70>
 80090c8:	89a3      	ldrh	r3, [r4, #12]
 80090ca:	f023 0303 	bic.w	r3, r3, #3
 80090ce:	f043 0301 	orr.w	r3, r3, #1
 80090d2:	81a3      	strh	r3, [r4, #12]
 80090d4:	89a3      	ldrh	r3, [r4, #12]
 80090d6:	431d      	orrs	r5, r3
 80090d8:	81a5      	strh	r5, [r4, #12]
 80090da:	e7cf      	b.n	800907c <__smakebuf_r+0x18>

080090dc <_fstat_r>:
 80090dc:	b538      	push	{r3, r4, r5, lr}
 80090de:	4d07      	ldr	r5, [pc, #28]	; (80090fc <_fstat_r+0x20>)
 80090e0:	2300      	movs	r3, #0
 80090e2:	4604      	mov	r4, r0
 80090e4:	4608      	mov	r0, r1
 80090e6:	4611      	mov	r1, r2
 80090e8:	602b      	str	r3, [r5, #0]
 80090ea:	f7f7 fee8 	bl	8000ebe <_fstat>
 80090ee:	1c43      	adds	r3, r0, #1
 80090f0:	d102      	bne.n	80090f8 <_fstat_r+0x1c>
 80090f2:	682b      	ldr	r3, [r5, #0]
 80090f4:	b103      	cbz	r3, 80090f8 <_fstat_r+0x1c>
 80090f6:	6023      	str	r3, [r4, #0]
 80090f8:	bd38      	pop	{r3, r4, r5, pc}
 80090fa:	bf00      	nop
 80090fc:	20000460 	.word	0x20000460

08009100 <_isatty_r>:
 8009100:	b538      	push	{r3, r4, r5, lr}
 8009102:	4d06      	ldr	r5, [pc, #24]	; (800911c <_isatty_r+0x1c>)
 8009104:	2300      	movs	r3, #0
 8009106:	4604      	mov	r4, r0
 8009108:	4608      	mov	r0, r1
 800910a:	602b      	str	r3, [r5, #0]
 800910c:	f7f7 fee7 	bl	8000ede <_isatty>
 8009110:	1c43      	adds	r3, r0, #1
 8009112:	d102      	bne.n	800911a <_isatty_r+0x1a>
 8009114:	682b      	ldr	r3, [r5, #0]
 8009116:	b103      	cbz	r3, 800911a <_isatty_r+0x1a>
 8009118:	6023      	str	r3, [r4, #0]
 800911a:	bd38      	pop	{r3, r4, r5, pc}
 800911c:	20000460 	.word	0x20000460

08009120 <_init>:
 8009120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009122:	bf00      	nop
 8009124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009126:	bc08      	pop	{r3}
 8009128:	469e      	mov	lr, r3
 800912a:	4770      	bx	lr

0800912c <_fini>:
 800912c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800912e:	bf00      	nop
 8009130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009132:	bc08      	pop	{r3}
 8009134:	469e      	mov	lr, r3
 8009136:	4770      	bx	lr
